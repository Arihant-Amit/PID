
PID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008c98  08008c98  00018c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090fc  080090fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009104  08009104  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800910c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004230  200001e0  080092ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004410  080092ec  00024410  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a101  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003619  00000000  00000000  0003a30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b693  00000000  00000000  00040170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018489  00000000  00000000  0006b803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c4fb  00000000  00000000  00083c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006504  00000000  00000000  001901d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c7c 	.word	0x08008c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08008c7c 	.word	0x08008c7c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200001fc 	.word	0x200001fc
 8000624:	200002b0 	.word	0x200002b0

08000628 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <__io_putchar+0x20>)
 800063a:	f003 fee5 	bl	8004408 <HAL_UART_Transmit>

  return ch;
 800063e:	687b      	ldr	r3, [r7, #4]

}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200005a0 	.word	0x200005a0

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 ff98 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f83b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f9f7 	bl	8000a4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800065e:	f000 f9c5 	bl	80009ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000662:	f000 f8a5 	bl	80007b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000666:	f000 f8f5 	bl	8000854 <MX_ADC2_Init>
  MX_DAC_Init();
 800066a:	f000 f945 	bl	80008f8 <MX_DAC_Init>
  MX_TIM3_Init();
 800066e:	f000 f96d 	bl	800094c <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <main+0x74>)
 8000674:	f107 041c 	add.w	r4, r7, #28
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fb81 	bl	8004d94 <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <main+0x78>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADCTASK */
  osThreadDef(ADCTASK, STARTADCTASK, osPriorityLow, 0, 128);
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <main+0x7c>)
 800069a:	463c      	mov	r4, r7
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADCTASKHandle = osThreadCreate(osThread(ADCTASK), NULL);
 80006aa:	463b      	mov	r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fb70 	bl	8004d94 <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <main+0x80>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f004 fb64 	bl	8004d86 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x72>
 80006c0:	08008cac 	.word	0x08008cac
 80006c4:	20000624 	.word	0x20000624
 80006c8:	08008cc8 	.word	0x08008cc8
 80006cc:	20000628 	.word	0x20000628

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fed9 	bl	8006496 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f001 ff4c 	bl	8002590 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <SystemClock_Config+0xdc>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000740:	23d8      	movs	r3, #216	; 0xd8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff7b 	bl	8002650 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 fc3c 	bl	8000fdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f001 ff24 	bl	80025b0 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076e:	f000 fc35 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2107      	movs	r1, #7
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fa0b 	bl	8002bac <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800079c:	f000 fc1e 	bl	8000fdc <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0x98>)
 8000812:	f000 fee5 	bl	80015e0 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 fbde 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000820:	2303      	movs	r3, #3
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0x98>)
 8000832:	f001 f8b3 	bl	800199c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fbce 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200004b0 	.word	0x200004b0
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC2_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC2_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC2_Init+0x98>)
 800086e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000872:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC2_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC2_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC2_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC2_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b6:	f000 fe93 	bl	80015e0 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fb8c 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC2_Init+0x98>)
 80008d6:	f001 f861 	bl	800199c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 fb7c 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200004f8 	.word	0x200004f8
 80008f0:	40012100 	.word	0x40012100
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_DAC_Init+0x4c>)
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <MX_DAC_Init+0x50>)
 800090a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_DAC_Init+0x4c>)
 800090e:	f001 fb77 	bl	8002000 <HAL_DAC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000918:	f000 fb60 	bl	8000fdc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_DAC_Init+0x4c>)
 800092c:	f001 fc01 	bl	8002132 <HAL_DAC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000936:	f000 fb51 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000540 	.word	0x20000540
 8000948:	40007400 	.word	0x40007400

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM3_Init+0x98>)
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <MX_TIM3_Init+0x9c>)
 800096e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000976:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_TIM3_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM3_Init+0x98>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000992:	4814      	ldr	r0, [pc, #80]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000994:	f002 ff8a 	bl	80038ac <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800099e:	f000 fb1d 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_TIM3_Init+0x98>)
 80009b0:	f003 fa04 	bl	8003dbc <HAL_TIM_ConfigClockSource>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009ba:	f000 fb0f 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_TIM3_Init+0x98>)
 80009cc:	f003 fc22 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 fb01 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000554 	.word	0x20000554
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART3_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a30:	f003 fc9c 	bl	800436c <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 facf 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200005a0 	.word	0x200005a0
 8000a48:	40004800 	.word	0x40004800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b77      	ldr	r3, [pc, #476]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a76      	ldr	r2, [pc, #472]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b71      	ldr	r3, [pc, #452]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a70      	ldr	r2, [pc, #448]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b6e      	ldr	r3, [pc, #440]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b6b      	ldr	r3, [pc, #428]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a6a      	ldr	r2, [pc, #424]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b65      	ldr	r3, [pc, #404]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a64      	ldr	r2, [pc, #400]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a5e      	ldr	r2, [pc, #376]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af8:	4852      	ldr	r0, [pc, #328]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000afa:	f001 fd15 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4851      	ldr	r0, [pc, #324]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000b04:	f001 fd10 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	484b      	ldr	r0, [pc, #300]	; (8000c4c <MX_GPIO_Init+0x200>)
 8000b20:	f001 fb56 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b24:	2332      	movs	r3, #50	; 0x32
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4843      	ldr	r0, [pc, #268]	; (8000c4c <MX_GPIO_Init+0x200>)
 8000b40:	f001 fb46 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b44:	2386      	movs	r3, #134	; 0x86
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	483c      	ldr	r0, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000b60:	f001 fb36 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4831      	ldr	r0, [pc, #196]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000b7e:	f001 fb27 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000ba0:	f001 fb16 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000bbc:	f001 fb08 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000bd4:	f001 fafc 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bea:	230a      	movs	r3, #10
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4816      	ldr	r0, [pc, #88]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000bf6:	f001 faeb 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000c10:	f001 fade 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000c32:	f001 facd 	bl	80021d0 <HAL_GPIO_Init>

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin);
 8000c5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <StartDefaultTask+0x1c>)
 8000c62:	f001 fc7a 	bl	800255a <HAL_GPIO_TogglePin>
    osDelay(200);
 8000c66:	20c8      	movs	r0, #200	; 0xc8
 8000c68:	f004 f8e0 	bl	8004e2c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin);
 8000c6c:	e7f6      	b.n	8000c5c <StartDefaultTask+0x8>
 8000c6e:	bf00      	nop
 8000c70:	40020400 	.word	0x40020400
 8000c74:	00000000 	.word	0x00000000

08000c78 <STARTADCTASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STARTADCTASK */
void STARTADCTASK(void const * argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STARTADCTASK */

	KP=0;
 8000c80:	4bb9      	ldr	r3, [pc, #740]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
	KI=0;
 8000c88:	4bb8      	ldr	r3, [pc, #736]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
	KD=0;
 8000c90:	4bb7      	ldr	r3, [pc, #732]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]


	 /* Infinite loop */
  for(;;)
  {
		HAL_ADC_Start(&hadc1);
 8000c98:	48b6      	ldr	r0, [pc, #728]	; (8000f74 <STARTADCTASK+0x2fc>)
 8000c9a:	f000 fce5 	bl	8001668 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000c9e:	210a      	movs	r1, #10
 8000ca0:	48b4      	ldr	r0, [pc, #720]	; (8000f74 <STARTADCTASK+0x2fc>)
 8000ca2:	f000 fde3 	bl	800186c <HAL_ADC_PollForConversion>
		SetPoint = (float)HAL_ADC_GetValue(&hadc1);
 8000ca6:	48b3      	ldr	r0, [pc, #716]	; (8000f74 <STARTADCTASK+0x2fc>)
 8000ca8:	f000 fe6b 	bl	8001982 <HAL_ADC_GetValue>
 8000cac:	ee07 0a90 	vmov	s15, r0
 8000cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb4:	4bb0      	ldr	r3, [pc, #704]	; (8000f78 <STARTADCTASK+0x300>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8000cba:	48ae      	ldr	r0, [pc, #696]	; (8000f74 <STARTADCTASK+0x2fc>)
 8000cbc:	f000 fda2 	bl	8001804 <HAL_ADC_Stop>
	    if(SetPoint >4050)
 8000cc0:	4bad      	ldr	r3, [pc, #692]	; (8000f78 <STARTADCTASK+0x300>)
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8000f7c <STARTADCTASK+0x304>
 8000cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	dd02      	ble.n	8000cda <STARTADCTASK+0x62>
	    {
	    	SetPoint = 4050;
 8000cd4:	4ba8      	ldr	r3, [pc, #672]	; (8000f78 <STARTADCTASK+0x300>)
 8000cd6:	4aaa      	ldr	r2, [pc, #680]	; (8000f80 <STARTADCTASK+0x308>)
 8000cd8:	601a      	str	r2, [r3, #0]

	    }


	    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	48a9      	ldr	r0, [pc, #676]	; (8000f84 <STARTADCTASK+0x30c>)
 8000cde:	f001 f9b1 	bl	8002044 <HAL_DAC_Start>
	   	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)DAC_VAL);
 8000ce2:	4ba9      	ldr	r3, [pc, #676]	; (8000f88 <STARTADCTASK+0x310>)
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cec:	ee17 3a90 	vmov	r3, s15
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	48a3      	ldr	r0, [pc, #652]	; (8000f84 <STARTADCTASK+0x30c>)
 8000cf8:	f001 f9f6 	bl	80020e8 <HAL_DAC_SetValue>

	   	HAL_ADC_Start(&hadc2);
 8000cfc:	48a3      	ldr	r0, [pc, #652]	; (8000f8c <STARTADCTASK+0x314>)
 8000cfe:	f000 fcb3 	bl	8001668 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc2, 10);
 8000d02:	210a      	movs	r1, #10
 8000d04:	48a1      	ldr	r0, [pc, #644]	; (8000f8c <STARTADCTASK+0x314>)
 8000d06:	f000 fdb1 	bl	800186c <HAL_ADC_PollForConversion>
	   	Feedback = (float)HAL_ADC_GetValue(&hadc2);
 8000d0a:	48a0      	ldr	r0, [pc, #640]	; (8000f8c <STARTADCTASK+0x314>)
 8000d0c:	f000 fe39 	bl	8001982 <HAL_ADC_GetValue>
 8000d10:	ee07 0a90 	vmov	s15, r0
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	4b9d      	ldr	r3, [pc, #628]	; (8000f90 <STARTADCTASK+0x318>)
 8000d1a:	edc3 7a00 	vstr	s15, [r3]

	   	HAL_ADC_Stop(&hadc2);
 8000d1e:	489b      	ldr	r0, [pc, #620]	; (8000f8c <STARTADCTASK+0x314>)
 8000d20:	f000 fd70 	bl	8001804 <HAL_ADC_Stop>


	 	HAL_TIM_Base_Stop(&htim3);
 8000d24:	489b      	ldr	r0, [pc, #620]	; (8000f94 <STARTADCTASK+0x31c>)
 8000d26:	f002 fe89 	bl	8003a3c <HAL_TIM_Base_Stop>
		currentcount = __HAL_TIM_GetCounter(&htim3);
 8000d2a:	4b9a      	ldr	r3, [pc, #616]	; (8000f94 <STARTADCTASK+0x31c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d38:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <STARTADCTASK+0x320>)
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
		countdifference = currentcount-previouscount;
 8000d3e:	4b96      	ldr	r3, [pc, #600]	; (8000f98 <STARTADCTASK+0x320>)
 8000d40:	ed93 7a00 	vldr	s14, [r3]
 8000d44:	4b95      	ldr	r3, [pc, #596]	; (8000f9c <STARTADCTASK+0x324>)
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <STARTADCTASK+0x328>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]
		previouscount = currentcount;
 8000d54:	4b90      	ldr	r3, [pc, #576]	; (8000f98 <STARTADCTASK+0x320>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a90      	ldr	r2, [pc, #576]	; (8000f9c <STARTADCTASK+0x324>)
 8000d5a:	6013      	str	r3, [r2, #0]
		currentcount =0;
 8000d5c:	4b8e      	ldr	r3, [pc, #568]	; (8000f98 <STARTADCTASK+0x320>)
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

		error = SetPoint - Feedback;
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <STARTADCTASK+0x300>)
 8000d66:	ed93 7a00 	vldr	s14, [r3]
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <STARTADCTASK+0x318>)
 8000d6c:	edd3 7a00 	vldr	s15, [r3]
 8000d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d74:	4b8b      	ldr	r3, [pc, #556]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000d76:	edc3 7a00 	vstr	s15, [r3]

		if(error < (0.9*SetPoint))
 8000d7a:	4b8a      	ldr	r3, [pc, #552]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000d7c:	edd3 7a00 	vldr	s15, [r3]
 8000d80:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d84:	4b7c      	ldr	r3, [pc, #496]	; (8000f78 <STARTADCTASK+0x300>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000f50 <STARTADCTASK+0x2d8>
 8000d92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	d50d      	bpl.n	8000dbc <STARTADCTASK+0x144>
		{

			KP=KP+0.0001;
 8000da0:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000daa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8000f58 <STARTADCTASK+0x2e0>
 8000dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000db2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000db8:	edc3 7a00 	vstr	s15, [r3]


		}
		if (error>(0.9*SetPoint))
 8000dbc:	4b79      	ldr	r3, [pc, #484]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dc6:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <STARTADCTASK+0x300>)
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd0:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000f50 <STARTADCTASK+0x2d8>
 8000dd4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	dd17      	ble.n	8000e12 <STARTADCTASK+0x19a>
		{
			KP =KP/2;
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000de4:	ed93 7a00 	vldr	s14, [r3]
 8000de8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df0:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
			KI =KI+0.0001;
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e00:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8000f58 <STARTADCTASK+0x2e0>
 8000e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e0c:	4b57      	ldr	r3, [pc, #348]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000e0e:	edc3 7a00 	vstr	s15, [r3]

		}
		if (error>(0.97*SetPoint))
 8000e12:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e1c:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <STARTADCTASK+0x300>)
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e26:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8000f60 <STARTADCTASK+0x2e8>
 8000e2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e36:	dd15      	ble.n	8000e64 <STARTADCTASK+0x1ec>
		{
			KD =KP;
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000e3e:	6013      	str	r3, [r2, #0]
			KI=KI;
 8000e40:	4b4a      	ldr	r3, [pc, #296]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000e46:	6013      	str	r3, [r2, #0]
			KD=KD+0.0001;
 8000e48:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000f58 <STARTADCTASK+0x2e0>
 8000e56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000e60:	edc3 7a00 	vstr	s15, [r3]
		}
		if (error>SetPoint)
 8000e64:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000e66:	ed93 7a00 	vldr	s14, [r3]
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <STARTADCTASK+0x300>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	dd0b      	ble.n	8000e92 <STARTADCTASK+0x21a>
		{
			KP =KD=KI=0;
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000e90:	6013      	str	r3, [r2, #0]
		}


		integral = integral + error * countdifference;
 8000e92:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <STARTADCTASK+0x328>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <STARTADCTASK+0x330>)
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <STARTADCTASK+0x330>)
 8000eae:	edc3 7a00 	vstr	s15, [r3]
		derivative = (error - previous_error) / countdifference;
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000eb4:	ed93 7a00 	vldr	s14, [r3]
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <STARTADCTASK+0x334>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <STARTADCTASK+0x328>)
 8000ec4:	ed93 7a00 	vldr	s14, [r3]
 8000ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <STARTADCTASK+0x338>)
 8000ece:	edc3 7a00 	vstr	s15, [r3]
		DAC_VAL = (KP * error) + (KI * integral) + (KD * derivative);
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <STARTADCTASK+0x2f0>)
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <STARTADCTASK+0x2f4>)
 8000ee4:	edd3 6a00 	vldr	s13, [r3]
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <STARTADCTASK+0x330>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <STARTADCTASK+0x2f8>)
 8000ef8:	edd3 6a00 	vldr	s13, [r3]
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <STARTADCTASK+0x338>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <STARTADCTASK+0x310>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
		previous_error = error;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <STARTADCTASK+0x32c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a25      	ldr	r2, [pc, #148]	; (8000fac <STARTADCTASK+0x334>)
 8000f16:	6013      	str	r3, [r2, #0]

		printf("INPUT : %d , OUTPUT : %d\r\n",(uint16_t)SetPoint,(uint16_t)Feedback);
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <STARTADCTASK+0x300>)
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 3a90 	vmov	r3, s15
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <STARTADCTASK+0x318>)
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f34:	ee17 3a90 	vmov	r3, s15
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <STARTADCTASK+0x33c>)
 8000f3e:	f005 ff89 	bl	8006e54 <iprintf>

		HAL_TIM_Base_Start(&htim3);
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <STARTADCTASK+0x31c>)
 8000f44:	f002 fd0a 	bl	800395c <HAL_TIM_Base_Start>




    osDelay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f003 ff6f 	bl	8004e2c <osDelay>
  {
 8000f4e:	e6a3      	b.n	8000c98 <STARTADCTASK+0x20>
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	3feccccc 	.word	0x3feccccc
 8000f58:	eb1c432d 	.word	0xeb1c432d
 8000f5c:	3f1a36e2 	.word	0x3f1a36e2
 8000f60:	70a3d70a 	.word	0x70a3d70a
 8000f64:	3fef0a3d 	.word	0x3fef0a3d
 8000f68:	20000644 	.word	0x20000644
 8000f6c:	20000648 	.word	0x20000648
 8000f70:	2000064c 	.word	0x2000064c
 8000f74:	200004b0 	.word	0x200004b0
 8000f78:	2000062c 	.word	0x2000062c
 8000f7c:	457d2000 	.word	0x457d2000
 8000f80:	457d2000 	.word	0x457d2000
 8000f84:	20000540 	.word	0x20000540
 8000f88:	20000634 	.word	0x20000634
 8000f8c:	200004f8 	.word	0x200004f8
 8000f90:	20000630 	.word	0x20000630
 8000f94:	20000554 	.word	0x20000554
 8000f98:	20000638 	.word	0x20000638
 8000f9c:	2000063c 	.word	0x2000063c
 8000fa0:	20000640 	.word	0x20000640
 8000fa4:	20000650 	.word	0x20000650
 8000fa8:	20000654 	.word	0x20000654
 8000fac:	20000658 	.word	0x20000658
 8000fb0:	2000065c 	.word	0x2000065c
 8000fb4:	08008ce4 	.word	0x08008ce4

08000fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fca:	f000 fae9 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40001400 	.word	0x40001400

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	210f      	movs	r1, #15
 8001022:	f06f 0001 	mvn.w	r0, #1
 8001026:	f000 ffc1 	bl	8001fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <HAL_ADC_MspInit+0xc8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d124      	bne.n	80010a4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a29      	ldr	r2, [pc, #164]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800108a:	2308      	movs	r3, #8
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <HAL_ADC_MspInit+0xd0>)
 800109e:	f001 f897 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010a2:	e028      	b.n	80010f6 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_ADC_MspInit+0xd4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d123      	bne.n	80010f6 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_ADC_MspInit+0xcc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_ADC_MspInit+0xd8>)
 80010f2:	f001 f86d 	bl	80021d0 <HAL_GPIO_Init>
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	; 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40012000 	.word	0x40012000
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000
 800110c:	40012100 	.word	0x40012100
 8001110:	40020800 	.word	0x40020800

08001114 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_DAC_MspInit+0x74>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d123      	bne.n	800117e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_DAC_MspInit+0x78>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_DAC_MspInit+0x78>)
 800113c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_DAC_MspInit+0x78>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_DAC_MspInit+0x78>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_DAC_MspInit+0x78>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_DAC_MspInit+0x78>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001166:	2310      	movs	r3, #16
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_DAC_MspInit+0x7c>)
 800117a:	f001 f829 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40007400 	.word	0x40007400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_TIM_Base_MspInit+0x38>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40000400 	.word	0x40000400
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0ae      	sub	sp, #184	; 0xb8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2290      	movs	r2, #144	; 0x90
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f005 f94e 	bl	8006496 <memset>
  if(huart->Instance==USART3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_UART_MspInit+0xb4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d13c      	bne.n	800127e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800120a:	2300      	movs	r3, #0
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4618      	mov	r0, r3
 8001214:	f001 ff22 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800121e:	f7ff fedd 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_UART_MspInit+0xb8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_UART_MspInit+0xb8>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_UART_MspInit+0xb8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_UART_MspInit+0xb8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_UART_MspInit+0xb8>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800126c:	2307      	movs	r3, #7
 800126e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001272:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0xbc>)
 800127a:	f000 ffa9 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	37b8      	adds	r7, #184	; 0xb8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40004800 	.word	0x40004800
 800128c:	40023800 	.word	0x40023800
 8001290:	40020c00 	.word	0x40020c00

08001294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2037      	movs	r0, #55	; 0x37
 80012aa:	f000 fe7f 	bl	8001fac <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012ae:	2037      	movs	r0, #55	; 0x37
 80012b0:	f000 fe98 	bl	8001fe4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_InitTick+0xa0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_InitTick+0xa0>)
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_InitTick+0xa0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fe8e 	bl	8002ff8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012dc:	f001 fe64 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 80012e0:	4603      	mov	r3, r0
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_InitTick+0xa4>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9b      	lsrs	r3, r3, #18
 80012f0:	3b01      	subs	r3, #1
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_InitTick+0xa8>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <HAL_InitTick+0xac>)
 80012f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_InitTick+0xa8>)
 80012fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001300:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_InitTick+0xa8>)
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_InitTick+0xa8>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_InitTick+0xa8>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <HAL_InitTick+0xa8>)
 8001316:	f002 fac9 	bl	80038ac <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d104      	bne.n	800132a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <HAL_InitTick+0xa8>)
 8001322:	f002 fbb3 	bl	8003a8c <HAL_TIM_Base_Start_IT>
 8001326:	4603      	mov	r3, r0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3730      	adds	r7, #48	; 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	431bde83 	.word	0x431bde83
 800133c:	20000660 	.word	0x20000660
 8001340:	40001400 	.word	0x40001400

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM7_IRQHandler+0x10>)
 8001376:	f002 fc01 	bl	8003b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000660 	.word	0x20000660

08001384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_kill>:

int _kill(int pid, int sig)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800139e:	f004 ff49 	bl	8006234 <__errno>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2216      	movs	r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
	return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_exit>:

void _exit (int status)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffe7 	bl	8001394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013c6:	e7fe      	b.n	80013c6 <_exit+0x12>

080013c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
	}

return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f903 	bl	8000628 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
	}
	return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001462:	605a      	str	r2, [r3, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_isatty>:

int _isatty(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
	return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f004 feae 	bl	8006234 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20080000 	.word	0x20080000
 8001504:	00000400 	.word	0x00000400
 8001508:	200006ac 	.word	0x200006ac
 800150c:	20004410 	.word	0x20004410

08001510 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff ffd7 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f004 ff63 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff f871 	bl	800064c <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001578:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 800157c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001580:	20004410 	.word	0x20004410

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 fd03 	bl	8001f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001590:	200f      	movs	r0, #15
 8001592:	f7ff fe7f 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fd27 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008
 80015c4:	200006b0 	.word	0x200006b0

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200006b0 	.word	0x200006b0

080015e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e031      	b.n	800165a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fd1a 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_ADC_Init+0x84>)
 8001624:	4013      	ands	r3, r2
 8001626:	f043 0202 	orr.w	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb0a 	bl	8001c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f023 0303 	bic.w	r3, r3, #3
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
 800164a:	e001      	b.n	8001650 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	ffffeefd 	.word	0xffffeefd

08001668 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Start+0x1a>
 800167e:	2302      	movs	r3, #2
 8001680:	e0ad      	b.n	80017de <HAL_ADC_Start+0x176>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d018      	beq.n	80016ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_ADC_Start+0x184>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_ADC_Start+0x188>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9a      	lsrs	r2, r3, #18
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d175      	bne.n	80017c4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_ADC_Start+0x18c>)
 80016de:	4013      	ands	r3, r2
 80016e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	d106      	bne.n	8001722 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f023 0206 	bic.w	r2, r3, #6
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
 8001720:	e002      	b.n	8001728 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001738:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_ADC_Start+0x190>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d143      	bne.n	80017dc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e03a      	b.n	80017dc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_ADC_Start+0x194>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10e      	bne.n	800178e <HAL_ADC_Start+0x126>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800178c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_ADC_Start+0x190>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d120      	bne.n	80017dc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_ADC_Start+0x198>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d11b      	bne.n	80017dc <HAL_ADC_Start+0x174>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d114      	bne.n	80017dc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	e00b      	b.n	80017dc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000000 	.word	0x20000000
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	fffff8fe 	.word	0xfffff8fe
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	40012200 	.word	0x40012200

08001804 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Stop+0x16>
 8001816:	2302      	movs	r3, #2
 8001818:	e01f      	b.n	800185a <HAL_ADC_Stop+0x56>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_ADC_Stop+0x64>)
 8001846:	4013      	ands	r3, r2
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	ffffeefe 	.word	0xffffeefe

0800186c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001888:	d113      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001898:	d10b      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e063      	b.n	800197a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018b2:	f7ff fe89 	bl	80015c8 <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b8:	e021      	b.n	80018fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d01d      	beq.n	80018fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_ADC_PollForConversion+0x6c>
 80018c8:	f7ff fe7e 	bl	80015c8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d212      	bcs.n	80018fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d00b      	beq.n	80018fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f043 0204 	orr.w	r2, r3, #4
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e03d      	b.n	800197a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b02      	cmp	r3, #2
 800190a:	d1d6      	bne.n	80018ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 0212 	mvn.w	r2, #18
 8001914:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d123      	bne.n	8001978 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11f      	bne.n	8001978 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001950:	2b00      	cmp	r3, #0
 8001952:	d111      	bne.n	8001978 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1c>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e136      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x28a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d93a      	bls.n	8001a3e <HAL_ADC_ConfigChannel+0xa2>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d0:	d035      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68d9      	ldr	r1, [r3, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	2207      	movs	r2, #7
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a8d      	ldr	r2, [pc, #564]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68d9      	ldr	r1, [r3, #12]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a16:	e035      	b.n	8001a84 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4403      	add	r3, r0
 8001a30:	3b1e      	subs	r3, #30
 8001a32:	409a      	lsls	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a3c:	e022      	b.n	8001a84 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6919      	ldr	r1, [r3, #16]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	2207      	movs	r2, #7
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6919      	ldr	r1, [r3, #16]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4403      	add	r3, r0
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d824      	bhi.n	8001ad6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b05      	subs	r3, #5
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b05      	subs	r3, #5
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad4:	e04c      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d824      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b23      	subs	r3, #35	; 0x23
 8001af0:	221f      	movs	r2, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
 8001b26:	e023      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	; 0x41
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b41      	subs	r3, #65	; 0x41
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10f      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x21e>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d10b      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d12b      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d122      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bdc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001be0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9a      	lsrs	r2, r3, #18
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	10000012 	.word	0x10000012
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	20000000 	.word	0x20000000
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <ADC_Init+0x1ec>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <ADC_Init+0x1ec>)
 8001c56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c5c:	4b75      	ldr	r3, [pc, #468]	; (8001e34 <ADC_Init+0x1ec>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4973      	ldr	r1, [pc, #460]	; (8001e34 <ADC_Init+0x1ec>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	021a      	lsls	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <ADC_Init+0x1f0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6899      	ldr	r1, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e00f      	b.n	8001d42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0202 	bic.w	r2, r2, #2
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	005a      	lsls	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01b      	beq.n	8001da8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	035a      	lsls	r2, r3, #13
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e007      	b.n	8001db8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	051a      	lsls	r2, r3, #20
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfa:	025a      	lsls	r2, r3, #9
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	029a      	lsls	r2, r3, #10
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40012300 	.word	0x40012300
 8001e38:	0f000001 	.word	0x0f000001

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <__NVIC_SetPriorityGrouping+0x40>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x40>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00
 8001e80:	05fa0000 	.word	0x05fa0000

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff4c 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbe:	f7ff ff61 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8001fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff ffb1 	bl	8001f30 <NVIC_EncodePriority>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff80 	bl	8001edc <__NVIC_SetPriority>
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff54 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e014      	b.n	800203c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff f876 	bl	8001114 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	795b      	ldrb	r3, [r3, #5]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_DAC_Start+0x16>
 8002056:	2302      	movs	r3, #2
 8002058:	e040      	b.n	80020dc <HAL_DAC_Start+0x98>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2201      	movs	r2, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800208e:	2b3c      	cmp	r3, #60	; 0x3c
 8002090:	d11d      	bne.n	80020ce <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	e014      	b.n	80020ce <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	213c      	movs	r1, #60	; 0x3c
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d107      	bne.n	80020ce <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0202 	orr.w	r2, r2, #2
 80020cc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	3308      	adds	r3, #8
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e004      	b.n	800211c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3314      	adds	r3, #20
 800211a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	461a      	mov	r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	795b      	ldrb	r3, [r3, #5]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_DAC_ConfigChannel+0x18>
 8002146:	2302      	movs	r3, #2
 8002148:	e03c      	b.n	80021c4 <HAL_DAC_ConfigChannel+0x92>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2202      	movs	r2, #2
 8002154:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	22c0      	movs	r2, #192	; 0xc0
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	400a      	ands	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e175      	b.n	80024dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8164 	bne.w	80024d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x56>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80be 	beq.w	80024d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_GPIO_Init+0x324>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002372:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d037      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_GPIO_Init+0x334>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a54      	ldr	r2, [pc, #336]	; (800250c <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a53      	ldr	r2, [pc, #332]	; (8002510 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a51      	ldr	r2, [pc, #324]	; (8002518 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x350>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x21a>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e012      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e010      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_GPIO_Init+0x354>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_GPIO_Init+0x354>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae86 	bls.w	80021f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40022000 	.word	0x40022000
 8002520:	40022400 	.word	0x40022400
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800256c:	887a      	ldrh	r2, [r7, #2]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4013      	ands	r3, r2
 8002572:	041a      	lsls	r2, r3, #16
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43d9      	mvns	r1, r3
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	400b      	ands	r3, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40007000 	.word	0x40007000

080025b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_PWREx_EnableOverDrive+0x98>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_PWREx_EnableOverDrive+0x98>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_PWREx_EnableOverDrive+0x98>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025de:	f7fe fff3 	bl	80015c8 <HAL_GetTick>
 80025e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e4:	e009      	b.n	80025fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025e6:	f7fe ffef 	bl	80015c8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f4:	d901      	bls.n	80025fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e022      	b.n	8002640 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d1ee      	bne.n	80025e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 800260e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002612:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002614:	f7fe ffd8 	bl	80015c8 <HAL_GetTick>
 8002618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261a:	e009      	b.n	8002630 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800261c:	f7fe ffd4 	bl	80015c8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800262a:	d901      	bls.n	8002630 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e007      	b.n	8002640 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800263c:	d1ee      	bne.n	800261c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000

08002650 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e29b      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8087 	beq.w	8002782 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002674:	4b96      	ldr	r3, [pc, #600]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00c      	beq.n	800269a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002680:	4b93      	ldr	r3, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d112      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
 800268c:	4b90      	ldr	r3, [pc, #576]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002698:	d10b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	4b8d      	ldr	r3, [pc, #564]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d06c      	beq.n	8002780 <HAL_RCC_OscConfig+0x130>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d168      	bne.n	8002780 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e275      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x7a>
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a83      	ldr	r2, [pc, #524]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e02e      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x9c>
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7b      	ldr	r2, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0xc0>
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a72      	ldr	r2, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe ff4a 	bl	80015c8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe ff46 	bl	80015c8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e229      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe ff36 	bl	80015c8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe ff32 	bl	80015c8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e215      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x110>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d069      	beq.n	8002862 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800278e:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x190>
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x17a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1e9      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	493d      	ldr	r1, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e040      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fee8 	bl	80015c8 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fee4 	bl	80015c8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1c7      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4929      	ldr	r1, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
 800282e:	e018      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fec4 	bl	80015c8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe fec0 	bl	80015c8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1a3      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d038      	beq.n	80028e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fea1 	bl	80015c8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fe9d 	bl	80015c8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e180      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x23a>
 80028a8:	e01a      	b.n	80028e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80028ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x280>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b6:	f7fe fe87 	bl	80015c8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028be:	f7fe fe83 	bl	80015c8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d903      	bls.n	80028d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e166      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
 80028d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ee      	bne.n	80028be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a4 	beq.w	8002a36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a88      	ldr	r2, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b83      	ldr	r3, [pc, #524]	; (8002b24 <HAL_RCC_OscConfig+0x4d4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002922:	4b80      	ldr	r3, [pc, #512]	; (8002b24 <HAL_RCC_OscConfig+0x4d4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7f      	ldr	r2, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x4d4>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe fe4b 	bl	80015c8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe fe47 	bl	80015c8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e12a      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x4d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x31a>
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e02d      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x33c>
 8002972:	4b6b      	ldr	r3, [pc, #428]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a6a      	ldr	r2, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a67      	ldr	r2, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e01c      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x35e>
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a61      	ldr	r2, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
 80029a0:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fdfb 	bl	80015c8 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fdf7 	bl	80015c8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0d8      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ee      	beq.n	80029d6 <HAL_RCC_OscConfig+0x386>
 80029f8:	e014      	b.n	8002a24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fde5 	bl	80015c8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fde1 	bl	80015c8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0c2      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80ae 	beq.w	8002b9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a40:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d06d      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d14b      	bne.n	8002aec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fdb2 	bl	80015c8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fdae 	bl	80015c8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e091      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	071b      	lsls	r3, r3, #28
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fd80 	bl	80015c8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fd7c 	bl	80015c8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e05f      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x47c>
 8002aea:	e057      	b.n	8002b9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd66 	bl	80015c8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fd62 	bl	80015c8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e045      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_OscConfig+0x4d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4b0>
 8002b1e:	e03d      	b.n	8002b9c <HAL_RCC_OscConfig+0x54c>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCC_OscConfig+0x558>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d030      	beq.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d129      	bne.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d122      	bne.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d119      	bne.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10f      	bne.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0d0      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	4965      	ldr	r1, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d040      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d115      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e073      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06b      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4936      	ldr	r1, [pc, #216]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fc92 	bl	80015c8 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe fc8e 	bl	80015c8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e053      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d210      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 020f 	bic.w	r2, r3, #15
 8002ce6:	4922      	ldr	r1, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1cc>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1d0>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fa98 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08008d08 	.word	0x08008d08
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b094      	sub	sp, #80	; 0x50
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	2300      	movs	r3, #0
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d94:	2300      	movs	r3, #0
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80e1 	bhi.w	8002f70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e0db      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dbc:	e0db      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc2:	e0d8      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
 8002dee:	2300      	movs	r3, #0
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4621      	mov	r1, r4
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	6139      	str	r1, [r7, #16]
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	ebb2 0801 	subs.w	r8, r2, r1
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb18 0303 	adds.w	r3, r8, r3
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	462b      	mov	r3, r5
 8002e64:	eb49 0303 	adc.w	r3, r9, r3
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e76:	4629      	mov	r1, r5
 8002e78:	024b      	lsls	r3, r1, #9
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e80:	4621      	mov	r1, r4
 8002e82:	024a      	lsls	r2, r1, #9
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e94:	f7fd fa2c 	bl	80002f0 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	e058      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4611      	mov	r1, r2
 8002eae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	0159      	lsls	r1, r3, #5
 8002eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ece:	0150      	lsls	r0, r2, #5
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eda:	4649      	mov	r1, r9
 8002edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	00eb      	lsls	r3, r5, #3
 8002f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0a:	00e2      	lsls	r2, r4, #3
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	461d      	mov	r5, r3
 8002f10:	4643      	mov	r3, r8
 8002f12:	18e3      	adds	r3, r4, r3
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	464b      	mov	r3, r9
 8002f18:	eb45 0303 	adc.w	r3, r5, r3
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	028b      	lsls	r3, r1, #10
 8002f2e:	4621      	mov	r1, r4
 8002f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f34:	4621      	mov	r1, r4
 8002f36:	028a      	lsls	r2, r1, #10
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f48:	f7fd f9d2 	bl	80002f0 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3750      	adds	r7, #80	; 0x50
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	00f42400 	.word	0x00f42400
 8002f8c:	007a1200 	.word	0x007a1200

08002f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fac:	f7ff fff0 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0a9b      	lsrs	r3, r3, #10
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08008d18 	.word	0x08008d18

08002fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd4:	f7ff ffdc 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0b5b      	lsrs	r3, r3, #13
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08008d18 	.word	0x08008d18

08002ff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	220f      	movs	r2, #15
 8003006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_GetClockConfig+0x5c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	08db      	lsrs	r3, r3, #3
 8003032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_RCC_GetClockConfig+0x60>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 020f 	and.w	r2, r3, #15
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	40023c00 	.word	0x40023c00

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003084:	4b69      	ldr	r3, [pc, #420]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a68      	ldr	r2, [pc, #416]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800308e:	6093      	str	r3, [r2, #8]
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	4964      	ldr	r1, [pc, #400]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d017      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b6:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	4959      	ldr	r1, [pc, #356]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030f2:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	494a      	ldr	r1, [pc, #296]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003110:	d101      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003112:	2301      	movs	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 808b 	beq.w	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a39      	ldr	r2, [pc, #228]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe fa30 	bl	80015c8 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe fa2c 	bl	80015c8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e38f      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800317e:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d035      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d02e      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a1a      	ldr	r2, [pc, #104]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d114      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe f9f4 	bl	80015c8 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe f9f0 	bl	80015c8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e351      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ee      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003212:	d111      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003222:	400b      	ands	r3, r1
 8003224:	4901      	ldr	r1, [pc, #4]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
 800322a:	e00b      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
 8003234:	0ffffcff 	.word	0x0ffffcff
 8003238:	4bac      	ldr	r3, [pc, #688]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4aab      	ldr	r2, [pc, #684]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	4ba9      	ldr	r3, [pc, #676]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	49a6      	ldr	r1, [pc, #664]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003252:	4313      	orrs	r3, r2
 8003254:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003262:	4ba2      	ldr	r3, [pc, #648]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	4aa0      	ldr	r2, [pc, #640]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003272:	4b9e      	ldr	r3, [pc, #632]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003274:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	499b      	ldr	r1, [pc, #620]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003290:	4b96      	ldr	r3, [pc, #600]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329e:	4993      	ldr	r1, [pc, #588]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b2:	4b8e      	ldr	r3, [pc, #568]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c0:	498a      	ldr	r1, [pc, #552]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032d4:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	4982      	ldr	r1, [pc, #520]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032f6:	4b7d      	ldr	r3, [pc, #500]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4979      	ldr	r1, [pc, #484]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003318:	4b74      	ldr	r3, [pc, #464]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4971      	ldr	r1, [pc, #452]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333a:	4b6c      	ldr	r3, [pc, #432]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f023 020c 	bic.w	r2, r3, #12
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	4968      	ldr	r1, [pc, #416]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335c:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	4960      	ldr	r1, [pc, #384]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	4957      	ldr	r1, [pc, #348]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a0:	4b52      	ldr	r3, [pc, #328]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	494f      	ldr	r1, [pc, #316]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	4946      	ldr	r1, [pc, #280]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033e4:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	493e      	ldr	r1, [pc, #248]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003414:	4935      	ldr	r1, [pc, #212]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003436:	492d      	ldr	r1, [pc, #180]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800344a:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003458:	4924      	ldr	r1, [pc, #144]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800346a:	2301      	movs	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	4914      	ldr	r1, [pc, #80]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034bc:	490b      	ldr	r1, [pc, #44]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	4902      	ldr	r1, [pc, #8]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034fc:	4b8a      	ldr	r3, [pc, #552]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003502:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	4986      	ldr	r1, [pc, #536]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003526:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003530:	497d      	ldr	r1, [pc, #500]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d006      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80d6 	beq.w	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a75      	ldr	r2, [pc, #468]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fe f836 	bl	80015c8 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003560:	f7fe f832 	bl	80015c8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e195      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d021      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11d      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003592:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035a0:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a6:	0e1b      	lsrs	r3, r3, #24
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	019a      	lsls	r2, r3, #6
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	071b      	lsls	r3, r3, #28
 80035c6:	4958      	ldr	r1, [pc, #352]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f8:	d129      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035fa:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003608:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360e:	0f1b      	lsrs	r3, r3, #28
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	019a      	lsls	r2, r3, #6
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	493e      	ldr	r1, [pc, #248]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003636:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363c:	f023 021f 	bic.w	r2, r3, #31
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	3b01      	subs	r3, #1
 8003646:	4938      	ldr	r1, [pc, #224]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01d      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	0e1b      	lsrs	r3, r3, #24
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0f1b      	lsrs	r3, r3, #28
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	019a      	lsls	r2, r3, #6
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	061b      	lsls	r3, r3, #24
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	071b      	lsls	r3, r3, #28
 800368e:	4926      	ldr	r1, [pc, #152]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d011      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	019a      	lsls	r2, r3, #6
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	491a      	ldr	r1, [pc, #104]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d2:	f7fd ff79 	bl	80015c8 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036da:	f7fd ff75 	bl	80015c8 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0d8      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 80ce 	bne.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fd ff5c 	bl	80015c8 <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003712:	e00b      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003714:	f7fd ff58 	bl	80015c8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d904      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0bb      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800372c:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003738:	d0ec      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12a      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003762:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003770:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	0f1b      	lsrs	r3, r3, #28
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	019a      	lsls	r2, r3, #6
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	4944      	ldr	r1, [pc, #272]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800379e:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	493d      	ldr	r1, [pc, #244]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d022      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037cc:	d11d      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	0e1b      	lsrs	r3, r3, #24
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	0f1b      	lsrs	r3, r3, #28
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	019a      	lsls	r2, r3, #6
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	431a      	orrs	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	431a      	orrs	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	071b      	lsls	r3, r3, #28
 8003802:	4929      	ldr	r1, [pc, #164]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	019a      	lsls	r2, r3, #6
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	4917      	ldr	r1, [pc, #92]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4911      	ldr	r1, [pc, #68]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003874:	f7fd fea8 	bl	80015c8 <HAL_GetTick>
 8003878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800387c:	f7fd fea4 	bl	80015c8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e007      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389a:	d1ef      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e049      	b.n	8003952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fc5e 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f000 fb58 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04c      	b.n	8003a0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <HAL_TIM_Base_Start+0xc0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d01d      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_TIM_Base_Start+0xc4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_TIM_Base_Start+0xc8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_TIM_Base_Start+0xcc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_TIM_Base_Start+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_TIM_Base_Start+0xd4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_Base_Start+0x70>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_TIM_Base_Start+0xd8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d115      	bne.n	80039f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_TIM_Base_Start+0xdc>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d015      	beq.n	8003a0a <HAL_TIM_Base_Start+0xae>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d011      	beq.n	8003a0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40001800 	.word	0x40001800
 8003a38:	00010007 	.word	0x00010007

08003a3c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <HAL_TIM_Base_Stop+0x38>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	f240 4344 	movw	r3, #1092	; 0x444
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_Base_Stop+0x38>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e054      	b.n	8003b4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d022      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d01d      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_TIM_Base_Start_IT+0xe0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_TIM_Base_Start_IT+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x80>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d115      	bne.n	8003b38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_TIM_Base_Start_IT+0xec>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d015      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0xbe>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d011      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e000      	b.n	8003b4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40001800 	.word	0x40001800
 8003b78:	00010007 	.word	0x00010007

08003b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0202 	mvn.w	r2, #2
 8003ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9d0 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f9c2 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f9d3 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0204 	mvn.w	r2, #4
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9a6 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f998 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f9a9 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0208 	mvn.w	r2, #8
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f97c 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f96e 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f97f 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0210 	mvn.w	r2, #16
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f952 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f944 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f955 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd f95c 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fb0c 	bl	8004344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	d10e      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 faff 	bl	8004358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d10e      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d107      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f903 	bl	8003f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d10e      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0220 	mvn.w	r2, #32
 8003daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fabf 	bl	8004330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0b4      	b.n	8003f42 <HAL_TIM_ConfigClockSource+0x186>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_TIM_ConfigClockSource+0x190>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	d03e      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0xd4>
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	f200 8087 	bhi.w	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	f000 8086 	beq.w	8003f2e <HAL_TIM_ConfigClockSource+0x172>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d87f      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d01a      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0xa6>
 8003e2c:	2b70      	cmp	r3, #112	; 0x70
 8003e2e:	d87b      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d050      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e34:	2b60      	cmp	r3, #96	; 0x60
 8003e36:	d877      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d03c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d873      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d058      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d86f      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d064      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e4c:	2b30      	cmp	r3, #48	; 0x30
 8003e4e:	d86b      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d060      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d867      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d05a      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	e062      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6899      	ldr	r1, [r3, #8]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f000 f9af 	bl	80041d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	609a      	str	r2, [r3, #8]
      break;
 8003e8e:	e04f      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f000 f998 	bl	80041d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb2:	609a      	str	r2, [r3, #8]
      break;
 8003eb4:	e03c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6859      	ldr	r1, [r3, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f000 f90c 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2150      	movs	r1, #80	; 0x50
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f965 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e02c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 f92b 	bl	800413e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2160      	movs	r1, #96	; 0x60
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f955 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e01c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f000 f8ec 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f945 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f14:	e00c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f000 f93c 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	fffeff88 	.word	0xfffeff88

08003f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3b      	ldr	r2, [pc, #236]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d027      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d023      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_Base_SetConfig+0x128>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_Base_SetConfig+0x12c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_Base_SetConfig+0x130>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_Base_SetConfig+0x134>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <TIM_Base_SetConfig+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <TIM_Base_SetConfig+0x13c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40010400 	.word	0x40010400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	40001800 	.word	0x40001800
 80040d8:	40001c00 	.word	0x40001c00
 80040dc:	40002000 	.word	0x40002000

080040e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413e:	b480      	push	{r7}
 8004140:	b087      	sub	sp, #28
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0210 	bic.w	r2, r3, #16
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f043 0307 	orr.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e06d      	b.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a30      	ldr	r2, [pc, #192]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d01d      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a16      	ldr	r2, [pc, #88]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a15      	ldr	r2, [pc, #84]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10c      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40001800 	.word	0x40001800

08004330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e040      	b.n	8004400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc ff20 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8c0 	bl	8004530 <UART_SetConfig>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e022      	b.n	8004400 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fb18 	bl	80049f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb9f 	bl	8004b3c <UART_CheckIdleState>
 80043fe:	4603      	mov	r3, r0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441c:	2b20      	cmp	r3, #32
 800441e:	f040 8081 	bne.w	8004524 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Transmit+0x26>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e079      	b.n	8004526 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x38>
 800443c:	2302      	movs	r3, #2
 800443e:	e072      	b.n	8004526 <HAL_UART_Transmit+0x11e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	; 0x21
 8004454:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd f8b7 	bl	80015c8 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d108      	bne.n	8004488 <HAL_UART_Transmit+0x80>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e003      	b.n	8004490 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004498:	e02c      	b.n	80044f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fb92 	bl	8004bce <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e038      	b.n	8004526 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3302      	adds	r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e007      	b.n	80044e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1cc      	bne.n	800449a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fb5f 	bl	8004bce <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e005      	b.n	8004526 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4ba6      	ldr	r3, [pc, #664]	; (80047f4 <UART_SetConfig+0x2c4>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a94      	ldr	r2, [pc, #592]	; (80047f8 <UART_SetConfig+0x2c8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d120      	bne.n	80045ee <UART_SetConfig+0xbe>
 80045ac:	4b93      	ldr	r3, [pc, #588]	; (80047fc <UART_SetConfig+0x2cc>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d816      	bhi.n	80045e8 <UART_SetConfig+0xb8>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x90>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045dd 	.word	0x080045dd
 80045c8:	080045d7 	.word	0x080045d7
 80045cc:	080045e3 	.word	0x080045e3
 80045d0:	2301      	movs	r3, #1
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e150      	b.n	8004878 <UART_SetConfig+0x348>
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e14d      	b.n	8004878 <UART_SetConfig+0x348>
 80045dc:	2304      	movs	r3, #4
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e14a      	b.n	8004878 <UART_SetConfig+0x348>
 80045e2:	2308      	movs	r3, #8
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e147      	b.n	8004878 <UART_SetConfig+0x348>
 80045e8:	2310      	movs	r3, #16
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e144      	b.n	8004878 <UART_SetConfig+0x348>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a83      	ldr	r2, [pc, #524]	; (8004800 <UART_SetConfig+0x2d0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d132      	bne.n	800465e <UART_SetConfig+0x12e>
 80045f8:	4b80      	ldr	r3, [pc, #512]	; (80047fc <UART_SetConfig+0x2cc>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d828      	bhi.n	8004658 <UART_SetConfig+0x128>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0xdc>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004641 	.word	0x08004641
 8004610:	08004659 	.word	0x08004659
 8004614:	08004659 	.word	0x08004659
 8004618:	08004659 	.word	0x08004659
 800461c:	0800464d 	.word	0x0800464d
 8004620:	08004659 	.word	0x08004659
 8004624:	08004659 	.word	0x08004659
 8004628:	08004659 	.word	0x08004659
 800462c:	08004647 	.word	0x08004647
 8004630:	08004659 	.word	0x08004659
 8004634:	08004659 	.word	0x08004659
 8004638:	08004659 	.word	0x08004659
 800463c:	08004653 	.word	0x08004653
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e118      	b.n	8004878 <UART_SetConfig+0x348>
 8004646:	2302      	movs	r3, #2
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e115      	b.n	8004878 <UART_SetConfig+0x348>
 800464c:	2304      	movs	r3, #4
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e112      	b.n	8004878 <UART_SetConfig+0x348>
 8004652:	2308      	movs	r3, #8
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e10f      	b.n	8004878 <UART_SetConfig+0x348>
 8004658:	2310      	movs	r3, #16
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e10c      	b.n	8004878 <UART_SetConfig+0x348>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a68      	ldr	r2, [pc, #416]	; (8004804 <UART_SetConfig+0x2d4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d120      	bne.n	80046aa <UART_SetConfig+0x17a>
 8004668:	4b64      	ldr	r3, [pc, #400]	; (80047fc <UART_SetConfig+0x2cc>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d013      	beq.n	800469e <UART_SetConfig+0x16e>
 8004676:	2b30      	cmp	r3, #48	; 0x30
 8004678:	d814      	bhi.n	80046a4 <UART_SetConfig+0x174>
 800467a:	2b20      	cmp	r3, #32
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x162>
 800467e:	2b20      	cmp	r3, #32
 8004680:	d810      	bhi.n	80046a4 <UART_SetConfig+0x174>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <UART_SetConfig+0x15c>
 8004686:	2b10      	cmp	r3, #16
 8004688:	d006      	beq.n	8004698 <UART_SetConfig+0x168>
 800468a:	e00b      	b.n	80046a4 <UART_SetConfig+0x174>
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e0f2      	b.n	8004878 <UART_SetConfig+0x348>
 8004692:	2302      	movs	r3, #2
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0ef      	b.n	8004878 <UART_SetConfig+0x348>
 8004698:	2304      	movs	r3, #4
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0ec      	b.n	8004878 <UART_SetConfig+0x348>
 800469e:	2308      	movs	r3, #8
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0e9      	b.n	8004878 <UART_SetConfig+0x348>
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0e6      	b.n	8004878 <UART_SetConfig+0x348>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a56      	ldr	r2, [pc, #344]	; (8004808 <UART_SetConfig+0x2d8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d120      	bne.n	80046f6 <UART_SetConfig+0x1c6>
 80046b4:	4b51      	ldr	r3, [pc, #324]	; (80047fc <UART_SetConfig+0x2cc>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046be:	2bc0      	cmp	r3, #192	; 0xc0
 80046c0:	d013      	beq.n	80046ea <UART_SetConfig+0x1ba>
 80046c2:	2bc0      	cmp	r3, #192	; 0xc0
 80046c4:	d814      	bhi.n	80046f0 <UART_SetConfig+0x1c0>
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x1ae>
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d810      	bhi.n	80046f0 <UART_SetConfig+0x1c0>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <UART_SetConfig+0x1a8>
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d006      	beq.n	80046e4 <UART_SetConfig+0x1b4>
 80046d6:	e00b      	b.n	80046f0 <UART_SetConfig+0x1c0>
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e0cc      	b.n	8004878 <UART_SetConfig+0x348>
 80046de:	2302      	movs	r3, #2
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e0c9      	b.n	8004878 <UART_SetConfig+0x348>
 80046e4:	2304      	movs	r3, #4
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e0c6      	b.n	8004878 <UART_SetConfig+0x348>
 80046ea:	2308      	movs	r3, #8
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e0c3      	b.n	8004878 <UART_SetConfig+0x348>
 80046f0:	2310      	movs	r3, #16
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e0c0      	b.n	8004878 <UART_SetConfig+0x348>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a44      	ldr	r2, [pc, #272]	; (800480c <UART_SetConfig+0x2dc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d125      	bne.n	800474c <UART_SetConfig+0x21c>
 8004700:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <UART_SetConfig+0x2cc>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d017      	beq.n	8004740 <UART_SetConfig+0x210>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004714:	d817      	bhi.n	8004746 <UART_SetConfig+0x216>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d00b      	beq.n	8004734 <UART_SetConfig+0x204>
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d811      	bhi.n	8004746 <UART_SetConfig+0x216>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <UART_SetConfig+0x1fe>
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d006      	beq.n	800473a <UART_SetConfig+0x20a>
 800472c:	e00b      	b.n	8004746 <UART_SetConfig+0x216>
 800472e:	2300      	movs	r3, #0
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e0a1      	b.n	8004878 <UART_SetConfig+0x348>
 8004734:	2302      	movs	r3, #2
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e09e      	b.n	8004878 <UART_SetConfig+0x348>
 800473a:	2304      	movs	r3, #4
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e09b      	b.n	8004878 <UART_SetConfig+0x348>
 8004740:	2308      	movs	r3, #8
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e098      	b.n	8004878 <UART_SetConfig+0x348>
 8004746:	2310      	movs	r3, #16
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e095      	b.n	8004878 <UART_SetConfig+0x348>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <UART_SetConfig+0x2e0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d125      	bne.n	80047a2 <UART_SetConfig+0x272>
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004764:	d017      	beq.n	8004796 <UART_SetConfig+0x266>
 8004766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476a:	d817      	bhi.n	800479c <UART_SetConfig+0x26c>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004770:	d00b      	beq.n	800478a <UART_SetConfig+0x25a>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d811      	bhi.n	800479c <UART_SetConfig+0x26c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x254>
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d006      	beq.n	8004790 <UART_SetConfig+0x260>
 8004782:	e00b      	b.n	800479c <UART_SetConfig+0x26c>
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e076      	b.n	8004878 <UART_SetConfig+0x348>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e073      	b.n	8004878 <UART_SetConfig+0x348>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e070      	b.n	8004878 <UART_SetConfig+0x348>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e06d      	b.n	8004878 <UART_SetConfig+0x348>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e06a      	b.n	8004878 <UART_SetConfig+0x348>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <UART_SetConfig+0x2e4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d138      	bne.n	800481e <UART_SetConfig+0x2ee>
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <UART_SetConfig+0x2cc>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047ba:	d017      	beq.n	80047ec <UART_SetConfig+0x2bc>
 80047bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c0:	d82a      	bhi.n	8004818 <UART_SetConfig+0x2e8>
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d00b      	beq.n	80047e0 <UART_SetConfig+0x2b0>
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d824      	bhi.n	8004818 <UART_SetConfig+0x2e8>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <UART_SetConfig+0x2aa>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	d006      	beq.n	80047e6 <UART_SetConfig+0x2b6>
 80047d8:	e01e      	b.n	8004818 <UART_SetConfig+0x2e8>
 80047da:	2300      	movs	r3, #0
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e04b      	b.n	8004878 <UART_SetConfig+0x348>
 80047e0:	2302      	movs	r3, #2
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e048      	b.n	8004878 <UART_SetConfig+0x348>
 80047e6:	2304      	movs	r3, #4
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e045      	b.n	8004878 <UART_SetConfig+0x348>
 80047ec:	2308      	movs	r3, #8
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e042      	b.n	8004878 <UART_SetConfig+0x348>
 80047f2:	bf00      	nop
 80047f4:	efff69f3 	.word	0xefff69f3
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40023800 	.word	0x40023800
 8004800:	40004400 	.word	0x40004400
 8004804:	40004800 	.word	0x40004800
 8004808:	40004c00 	.word	0x40004c00
 800480c:	40005000 	.word	0x40005000
 8004810:	40011400 	.word	0x40011400
 8004814:	40007800 	.word	0x40007800
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e02c      	b.n	8004878 <UART_SetConfig+0x348>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a72      	ldr	r2, [pc, #456]	; (80049ec <UART_SetConfig+0x4bc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d125      	bne.n	8004874 <UART_SetConfig+0x344>
 8004828:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <UART_SetConfig+0x4c0>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004832:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004836:	d017      	beq.n	8004868 <UART_SetConfig+0x338>
 8004838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800483c:	d817      	bhi.n	800486e <UART_SetConfig+0x33e>
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d00b      	beq.n	800485c <UART_SetConfig+0x32c>
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004848:	d811      	bhi.n	800486e <UART_SetConfig+0x33e>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <UART_SetConfig+0x326>
 800484e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004852:	d006      	beq.n	8004862 <UART_SetConfig+0x332>
 8004854:	e00b      	b.n	800486e <UART_SetConfig+0x33e>
 8004856:	2300      	movs	r3, #0
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e00d      	b.n	8004878 <UART_SetConfig+0x348>
 800485c:	2302      	movs	r3, #2
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e00a      	b.n	8004878 <UART_SetConfig+0x348>
 8004862:	2304      	movs	r3, #4
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e007      	b.n	8004878 <UART_SetConfig+0x348>
 8004868:	2308      	movs	r3, #8
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e004      	b.n	8004878 <UART_SetConfig+0x348>
 800486e:	2310      	movs	r3, #16
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e001      	b.n	8004878 <UART_SetConfig+0x348>
 8004874:	2310      	movs	r3, #16
 8004876:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	d15b      	bne.n	800493a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d828      	bhi.n	80048da <UART_SetConfig+0x3aa>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x360>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048db 	.word	0x080048db
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe fb78 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e013      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fb88 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <UART_SetConfig+0x4c4>)
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e00c      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe fa5b 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 80048ce:	61b8      	str	r0, [r7, #24]
        break;
 80048d0:	e008      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61bb      	str	r3, [r7, #24]
        break;
 80048d8:	e004      	b.n	80048e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	77bb      	strb	r3, [r7, #30]
        break;
 80048e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d074      	beq.n	80049d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	005a      	lsls	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d916      	bls.n	8004934 <UART_SetConfig+0x404>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d212      	bcs.n	8004934 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f023 030f 	bic.w	r3, r3, #15
 8004916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	b29a      	uxth	r2, r3
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	4313      	orrs	r3, r2
 8004928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	89fa      	ldrh	r2, [r7, #14]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e04f      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	77bb      	strb	r3, [r7, #30]
 8004938:	e04c      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800493a:	7ffb      	ldrb	r3, [r7, #31]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d828      	bhi.n	8004992 <UART_SetConfig+0x462>
 8004940:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <UART_SetConfig+0x418>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004993 	.word	0x08004993
 8004958:	08004983 	.word	0x08004983
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
 8004968:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fe fb1c 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 8004970:	61b8      	str	r0, [r7, #24]
        break;
 8004972:	e013      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fe fb2c 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 8004978:	61b8      	str	r0, [r7, #24]
        break;
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <UART_SetConfig+0x4c4>)
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e00c      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe f9ff 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8004986:	61b8      	str	r0, [r7, #24]
        break;
 8004988:	e008      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	61bb      	str	r3, [r7, #24]
        break;
 8004990:	e004      	b.n	800499c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	77bb      	strb	r3, [r7, #30]
        break;
 800499a:	bf00      	nop
    }

    if (pclk != 0U)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085a      	lsrs	r2, r3, #1
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	441a      	add	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d909      	bls.n	80049d0 <UART_SetConfig+0x4a0>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d205      	bcs.n	80049d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	e001      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40007c00 	.word	0x40007c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400

080049f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d10a      	bne.n	8004b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b4c:	f7fc fd3c 	bl	80015c8 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10e      	bne.n	8004b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f82d 	bl	8004bce <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e023      	b.n	8004bc6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d10e      	bne.n	8004baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f817 	bl	8004bce <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00d      	b.n	8004bc6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b09c      	sub	sp, #112	; 0x70
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bde:	e0a5      	b.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	f000 80a1 	beq.w	8004d2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fc fced 	bl	80015c8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d13e      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c14:	667b      	str	r3, [r7, #100]	; 0x64
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e6      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c52:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e067      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d04f      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d147      	bne.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cf8:	623a      	str	r2, [r7, #32]
 8004cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	69f9      	ldr	r1, [r7, #28]
 8004cfe:	6a3a      	ldr	r2, [r7, #32]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e010      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f43f af4a 	beq.w	8004be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3770      	adds	r7, #112	; 0x70
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d68:	2b84      	cmp	r3, #132	; 0x84
 8004d6a:	d005      	beq.n	8004d78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	3303      	adds	r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d8a:	f000 faff 	bl	800538c <vTaskStartScheduler>
  
  return osOK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <osThreadCreate+0x54>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01c      	beq.n	8004de8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685c      	ldr	r4, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681d      	ldr	r5, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691e      	ldr	r6, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ffc8 	bl	8004d56 <makeFreeRtosPriority>
 8004dc6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dd0:	9202      	str	r2, [sp, #8]
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9100      	str	r1, [sp, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 f8ed 	bl	8004fbc <xTaskCreateStatic>
 8004de2:	4603      	mov	r3, r0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e01c      	b.n	8004e22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685c      	ldr	r4, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004df4:	b29e      	uxth	r6, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ffaa 	bl	8004d56 <makeFreeRtosPriority>
 8004e02:	4602      	mov	r2, r0
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4632      	mov	r2, r6
 8004e10:	4629      	mov	r1, r5
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f935 	bl	8005082 <xTaskCreate>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d001      	beq.n	8004e22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <osDelay+0x16>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	e000      	b.n	8004e44 <osDelay+0x18>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fa6b 	bl	8005320 <vTaskDelay>
  
  return osOK;
 8004e4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f103 0208 	add.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0208 	add.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00c      	b.n	8004f30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e002      	b.n	8004f24 <vListInsert+0x2e>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d2f6      	bcs.n	8004f1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6892      	ldr	r2, [r2, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6852      	ldr	r2, [r2, #4]
 8004f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d103      	bne.n	8004f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10c      	bne.n	8004fea <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	b672      	cpsid	i
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	b662      	cpsie	i
 8004fe4:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10c      	bne.n	800500a <xTaskCreateStatic+0x4e>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	b672      	cpsid	i
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	b662      	cpsie	i
 8005004:	61fb      	str	r3, [r7, #28]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800500a:	23b4      	movs	r3, #180	; 0xb4
 800500c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2bb4      	cmp	r3, #180	; 0xb4
 8005012:	d00c      	beq.n	800502e <xTaskCreateStatic+0x72>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	61bb      	str	r3, [r7, #24]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800502e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01e      	beq.n	8005074 <xTaskCreateStatic+0xb8>
 8005036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005044:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	2202      	movs	r2, #2
 800504a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800504e:	2300      	movs	r3, #0
 8005050:	9303      	str	r3, [sp, #12]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	9302      	str	r3, [sp, #8]
 8005056:	f107 0314 	add.w	r3, r7, #20
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f850 	bl	800510c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800506c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800506e:	f000 f8ed 	bl	800524c <prvAddNewTaskToReadyList>
 8005072:	e001      	b.n	8005078 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005078:	697b      	ldr	r3, [r7, #20]
	}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005082:	b580      	push	{r7, lr}
 8005084:	b08c      	sub	sp, #48	; 0x30
 8005086:	af04      	add	r7, sp, #16
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fee8 	bl	8005e6c <pvPortMalloc>
 800509c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050a4:	20b4      	movs	r0, #180	; 0xb4
 80050a6:	f000 fee1 	bl	8005e6c <pvPortMalloc>
 80050aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
 80050b8:	e005      	b.n	80050c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f000 ffa0 	bl	8006000 <vPortFree>
 80050c0:	e001      	b.n	80050c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d017      	beq.n	80050fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9303      	str	r3, [sp, #12]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f80e 	bl	800510c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f0:	69f8      	ldr	r0, [r7, #28]
 80050f2:	f000 f8ab 	bl	800524c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e002      	b.n	8005102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005102:	69bb      	ldr	r3, [r7, #24]
	}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005124:	440b      	add	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f023 0307 	bic.w	r3, r3, #7
 8005132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	b672      	cpsid	i
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	b662      	cpsie	i
 8005152:	617b      	str	r3, [r7, #20]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01f      	beq.n	800519e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e012      	b.n	800518a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	7819      	ldrb	r1, [r3, #0]
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	3334      	adds	r3, #52	; 0x34
 8005174:	460a      	mov	r2, r1
 8005176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b0f      	cmp	r3, #15
 800518e:	d9e9      	bls.n	8005164 <prvInitialiseNewTask+0x58>
 8005190:	e000      	b.n	8005194 <prvInitialiseNewTask+0x88>
			{
				break;
 8005192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	e003      	b.n	80051a6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d901      	bls.n	80051b0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051ac:	2306      	movs	r3, #6
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fe64 	bl	8004e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	3318      	adds	r3, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fe5f 	bl	8004e94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f1c3 0207 	rsb	r2, r3, #7
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	334c      	adds	r3, #76	; 0x4c
 8005200:	2260      	movs	r2, #96	; 0x60
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f001 f946 	bl	8006496 <memset>
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <prvInitialiseNewTask+0x134>)
 800520e:	651a      	str	r2, [r3, #80]	; 0x50
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <prvInitialiseNewTask+0x138>)
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <prvInitialiseNewTask+0x13c>)
 800521a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	69b8      	ldr	r0, [r7, #24]
 8005222:	f000 fc2d 	bl	8005a80 <pxPortInitialiseStack>
 8005226:	4602      	mov	r2, r0
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005238:	bf00      	nop
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08008d40 	.word	0x08008d40
 8005244:	08008d60 	.word	0x08008d60
 8005248:	08008d20 	.word	0x08008d20

0800524c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005254:	f000 fd22 	bl	8005c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005258:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <prvAddNewTaskToReadyList+0xb8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a29      	ldr	r2, [pc, #164]	; (8005304 <prvAddNewTaskToReadyList+0xb8>)
 8005260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005262:	4b29      	ldr	r3, [pc, #164]	; (8005308 <prvAddNewTaskToReadyList+0xbc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <prvAddNewTaskToReadyList+0xbc>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <prvAddNewTaskToReadyList+0xb8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d110      	bne.n	800529a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005278:	f000 fad8 	bl	800582c <prvInitialiseTaskLists>
 800527c:	e00d      	b.n	800529a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <prvAddNewTaskToReadyList+0xc0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005286:	4b20      	ldr	r3, [pc, #128]	; (8005308 <prvAddNewTaskToReadyList+0xbc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	429a      	cmp	r2, r3
 8005292:	d802      	bhi.n	800529a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <prvAddNewTaskToReadyList+0xbc>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <prvAddNewTaskToReadyList+0xc4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <prvAddNewTaskToReadyList+0xc4>)
 80052a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	2201      	movs	r2, #1
 80052aa:	409a      	lsls	r2, r3
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <prvAddNewTaskToReadyList+0xc8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <prvAddNewTaskToReadyList+0xc8>)
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <prvAddNewTaskToReadyList+0xcc>)
 80052c4:	441a      	add	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f7ff fdee 	bl	8004eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052d2:	f000 fd17 	bl	8005d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <prvAddNewTaskToReadyList+0xc0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00e      	beq.n	80052fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <prvAddNewTaskToReadyList+0xbc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d207      	bcs.n	80052fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <prvAddNewTaskToReadyList+0xd0>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	200007b4 	.word	0x200007b4
 8005308:	200006b4 	.word	0x200006b4
 800530c:	200007c0 	.word	0x200007c0
 8005310:	200007d0 	.word	0x200007d0
 8005314:	200007bc 	.word	0x200007bc
 8005318:	200006b8 	.word	0x200006b8
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <vTaskDelay+0x64>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <vTaskDelay+0x34>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	b672      	cpsid	i
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	b662      	cpsie	i
 800534e:	60bb      	str	r3, [r7, #8]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005354:	f000 f888 	bl	8005468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005358:	2100      	movs	r1, #0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fb2a 	bl	80059b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005360:	f000 f890 	bl	8005484 <xTaskResumeAll>
 8005364:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <vTaskDelay+0x68>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200007dc 	.word	0x200007dc
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	; 0x28
 8005390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800539a:	463a      	mov	r2, r7
 800539c:	1d39      	adds	r1, r7, #4
 800539e:	f107 0308 	add.w	r3, r7, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb f926 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	9202      	str	r2, [sp, #8]
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	460a      	mov	r2, r1
 80053ba:	4923      	ldr	r1, [pc, #140]	; (8005448 <vTaskStartScheduler+0xbc>)
 80053bc:	4823      	ldr	r0, [pc, #140]	; (800544c <vTaskStartScheduler+0xc0>)
 80053be:	f7ff fdfd 	bl	8004fbc <xTaskCreateStatic>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <vTaskStartScheduler+0xc4>)
 80053c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053c8:	4b21      	ldr	r3, [pc, #132]	; (8005450 <vTaskStartScheduler+0xc4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e001      	b.n	80053da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d11d      	bne.n	800541c <vTaskStartScheduler+0x90>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	b672      	cpsid	i
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	b662      	cpsie	i
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <vTaskStartScheduler+0xc8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	334c      	adds	r3, #76	; 0x4c
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <vTaskStartScheduler+0xcc>)
 8005400:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <vTaskStartScheduler+0xd0>)
 8005404:	f04f 32ff 	mov.w	r2, #4294967295
 8005408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <vTaskStartScheduler+0xd4>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005410:	4b14      	ldr	r3, [pc, #80]	; (8005464 <vTaskStartScheduler+0xd8>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005416:	f000 fbc3 	bl	8005ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800541a:	e010      	b.n	800543e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d10c      	bne.n	800543e <vTaskStartScheduler+0xb2>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	b672      	cpsid	i
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	b662      	cpsie	i
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vTaskStartScheduler+0xb0>
}
 800543e:	bf00      	nop
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	08008d00 	.word	0x08008d00
 800544c:	080057fd 	.word	0x080057fd
 8005450:	200007d8 	.word	0x200007d8
 8005454:	200006b4 	.word	0x200006b4
 8005458:	20000010 	.word	0x20000010
 800545c:	200007d4 	.word	0x200007d4
 8005460:	200007c0 	.word	0x200007c0
 8005464:	200007b8 	.word	0x200007b8

08005468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <vTaskSuspendAll+0x18>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	4a03      	ldr	r2, [pc, #12]	; (8005480 <vTaskSuspendAll+0x18>)
 8005474:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	200007dc 	.word	0x200007dc

08005484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <xTaskResumeAll+0x118>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10c      	bne.n	80054b4 <xTaskResumeAll+0x30>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	b672      	cpsid	i
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	b662      	cpsie	i
 80054ae:	603b      	str	r3, [r7, #0]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054b4:	f000 fbf2 	bl	8005c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054b8:	4b38      	ldr	r3, [pc, #224]	; (800559c <xTaskResumeAll+0x118>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <xTaskResumeAll+0x118>)
 80054c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <xTaskResumeAll+0x118>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d161      	bne.n	800558e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <xTaskResumeAll+0x11c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05d      	beq.n	800558e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054d2:	e02e      	b.n	8005532 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <xTaskResumeAll+0x120>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3318      	adds	r3, #24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fd41 	bl	8004f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fd3c 	bl	8004f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <xTaskResumeAll+0x124>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <xTaskResumeAll+0x124>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <xTaskResumeAll+0x128>)
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7ff fcc8 	bl	8004eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <xTaskResumeAll+0x12c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <xTaskResumeAll+0x130>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <xTaskResumeAll+0x120>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1cc      	bne.n	80054d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005540:	f000 fa18 	bl	8005974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <xTaskResumeAll+0x134>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005550:	f000 f836 	bl	80055c0 <xTaskIncrementTick>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <xTaskResumeAll+0x130>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f1      	bne.n	8005550 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800556c:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <xTaskResumeAll+0x134>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <xTaskResumeAll+0x130>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <xTaskResumeAll+0x138>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f000 fbb9 	bl	8005d04 <vPortExitCritical>

	return xAlreadyYielded;
 8005592:	68bb      	ldr	r3, [r7, #8]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200007dc 	.word	0x200007dc
 80055a0:	200007b4 	.word	0x200007b4
 80055a4:	20000774 	.word	0x20000774
 80055a8:	200007bc 	.word	0x200007bc
 80055ac:	200006b8 	.word	0x200006b8
 80055b0:	200006b4 	.word	0x200006b4
 80055b4:	200007c8 	.word	0x200007c8
 80055b8:	200007c4 	.word	0x200007c4
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ca:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <xTaskIncrementTick+0x148>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 808a 	bne.w	80056e8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d4:	4b4d      	ldr	r3, [pc, #308]	; (800570c <xTaskIncrementTick+0x14c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055dc:	4a4b      	ldr	r2, [pc, #300]	; (800570c <xTaskIncrementTick+0x14c>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d122      	bne.n	800562e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e8:	4b49      	ldr	r3, [pc, #292]	; (8005710 <xTaskIncrementTick+0x150>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <xTaskIncrementTick+0x4c>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	b672      	cpsid	i
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	b662      	cpsie	i
 8005606:	603b      	str	r3, [r7, #0]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <xTaskIncrementTick+0x4a>
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <xTaskIncrementTick+0x150>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	4b40      	ldr	r3, [pc, #256]	; (8005714 <xTaskIncrementTick+0x154>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a3e      	ldr	r2, [pc, #248]	; (8005710 <xTaskIncrementTick+0x150>)
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4a3e      	ldr	r2, [pc, #248]	; (8005714 <xTaskIncrementTick+0x154>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <xTaskIncrementTick+0x158>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a3c      	ldr	r2, [pc, #240]	; (8005718 <xTaskIncrementTick+0x158>)
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	f000 f9a3 	bl	8005974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800562e:	4b3b      	ldr	r3, [pc, #236]	; (800571c <xTaskIncrementTick+0x15c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d348      	bcc.n	80056ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005638:	4b35      	ldr	r3, [pc, #212]	; (8005710 <xTaskIncrementTick+0x150>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005642:	4b36      	ldr	r3, [pc, #216]	; (800571c <xTaskIncrementTick+0x15c>)
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	601a      	str	r2, [r3, #0]
					break;
 800564a:	e03e      	b.n	80056ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564c:	4b30      	ldr	r3, [pc, #192]	; (8005710 <xTaskIncrementTick+0x150>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d203      	bcs.n	800566c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005664:	4a2d      	ldr	r2, [pc, #180]	; (800571c <xTaskIncrementTick+0x15c>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800566a:	e02e      	b.n	80056ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fc79 	bl	8004f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3318      	adds	r3, #24
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fc70 	bl	8004f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <xTaskIncrementTick+0x160>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4313      	orrs	r3, r2
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <xTaskIncrementTick+0x160>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <xTaskIncrementTick+0x164>)
 80056a8:	441a      	add	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7ff fbfc 	bl	8004eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <xTaskIncrementTick+0x168>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d3b9      	bcc.n	8005638 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c8:	e7b6      	b.n	8005638 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056ca:	4b17      	ldr	r3, [pc, #92]	; (8005728 <xTaskIncrementTick+0x168>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4914      	ldr	r1, [pc, #80]	; (8005724 <xTaskIncrementTick+0x164>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d907      	bls.n	80056f2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e004      	b.n	80056f2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <xTaskIncrementTick+0x16c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	4a0f      	ldr	r2, [pc, #60]	; (800572c <xTaskIncrementTick+0x16c>)
 80056f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <xTaskIncrementTick+0x170>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056fe:	697b      	ldr	r3, [r7, #20]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200007dc 	.word	0x200007dc
 800570c:	200007b8 	.word	0x200007b8
 8005710:	2000076c 	.word	0x2000076c
 8005714:	20000770 	.word	0x20000770
 8005718:	200007cc 	.word	0x200007cc
 800571c:	200007d4 	.word	0x200007d4
 8005720:	200007bc 	.word	0x200007bc
 8005724:	200006b8 	.word	0x200006b8
 8005728:	200006b4 	.word	0x200006b4
 800572c:	200007c4 	.word	0x200007c4
 8005730:	200007c8 	.word	0x200007c8

08005734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800573a:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <vTaskSwitchContext+0xb0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <vTaskSwitchContext+0xb4>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005748:	e046      	b.n	80057d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800574a:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <vTaskSwitchContext+0xb4>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005750:	4b26      	ldr	r3, [pc, #152]	; (80057ec <vTaskSwitchContext+0xb8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	fab3 f383 	clz	r3, r3
 800575c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	f1c3 031f 	rsb	r3, r3, #31
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	4922      	ldr	r1, [pc, #136]	; (80057f0 <vTaskSwitchContext+0xbc>)
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10c      	bne.n	8005794 <vTaskSwitchContext+0x60>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	b672      	cpsid	i
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	b662      	cpsie	i
 800578e:	607b      	str	r3, [r7, #4]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vTaskSwitchContext+0x5e>
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <vTaskSwitchContext+0xbc>)
 80057a0:	4413      	add	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3308      	adds	r3, #8
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d104      	bne.n	80057c4 <vTaskSwitchContext+0x90>
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <vTaskSwitchContext+0xc0>)
 80057cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <vTaskSwitchContext+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	334c      	adds	r3, #76	; 0x4c
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <vTaskSwitchContext+0xc4>)
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	200007dc 	.word	0x200007dc
 80057e8:	200007c8 	.word	0x200007c8
 80057ec:	200007bc 	.word	0x200007bc
 80057f0:	200006b8 	.word	0x200006b8
 80057f4:	200006b4 	.word	0x200006b4
 80057f8:	20000010 	.word	0x20000010

080057fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005804:	f000 f852 	bl	80058ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <prvIdleTask+0x28>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d9f9      	bls.n	8005804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <prvIdleTask+0x2c>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005820:	e7f0      	b.n	8005804 <prvIdleTask+0x8>
 8005822:	bf00      	nop
 8005824:	200006b8 	.word	0x200006b8
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	e00c      	b.n	8005852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <prvInitialiseTaskLists+0x60>)
 8005844:	4413      	add	r3, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fb04 	bl	8004e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3301      	adds	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b06      	cmp	r3, #6
 8005856:	d9ef      	bls.n	8005838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800585a:	f7ff fafb 	bl	8004e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800585e:	480d      	ldr	r0, [pc, #52]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005860:	f7ff faf8 	bl	8004e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005864:	480c      	ldr	r0, [pc, #48]	; (8005898 <prvInitialiseTaskLists+0x6c>)
 8005866:	f7ff faf5 	bl	8004e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800586a:	480c      	ldr	r0, [pc, #48]	; (800589c <prvInitialiseTaskLists+0x70>)
 800586c:	f7ff faf2 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <prvInitialiseTaskLists+0x74>)
 8005872:	f7ff faef 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <prvInitialiseTaskLists+0x78>)
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800587a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <prvInitialiseTaskLists+0x7c>)
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200006b8 	.word	0x200006b8
 8005890:	20000744 	.word	0x20000744
 8005894:	20000758 	.word	0x20000758
 8005898:	20000774 	.word	0x20000774
 800589c:	20000788 	.word	0x20000788
 80058a0:	200007a0 	.word	0x200007a0
 80058a4:	2000076c 	.word	0x2000076c
 80058a8:	20000770 	.word	0x20000770

080058ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b2:	e019      	b.n	80058e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b4:	f000 f9f2 	bl	8005c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b10      	ldr	r3, [pc, #64]	; (80058fc <prvCheckTasksWaitingTermination+0x50>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fb4f 	bl	8004f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3b01      	subs	r3, #1
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058de:	f000 fa11 	bl	8005d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f810 	bl	8005908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e1      	bne.n	80058b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000788 	.word	0x20000788
 8005900:	200007b4 	.word	0x200007b4
 8005904:	2000079c 	.word	0x2000079c

08005908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	334c      	adds	r3, #76	; 0x4c
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fac3 	bl	8006ea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d108      	bne.n	8005936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fb69 	bl	8006000 <vPortFree>
				vPortFree( pxTCB );
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb66 	bl	8006000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005934:	e01a      	b.n	800596c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d103      	bne.n	8005948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fb5d 	bl	8006000 <vPortFree>
	}
 8005946:	e011      	b.n	800596c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800594e:	2b02      	cmp	r3, #2
 8005950:	d00c      	beq.n	800596c <prvDeleteTCB+0x64>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	60fb      	str	r3, [r7, #12]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <prvDeleteTCB+0x62>
	}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800598c:	e008      	b.n	80059a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	2000076c 	.word	0x2000076c
 80059b0:	200007d4 	.word	0x200007d4

080059b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3304      	adds	r3, #4
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff facc 	bl	8004f68 <uxListRemove>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	2201      	movs	r2, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4013      	ands	r3, r2
 80059ea:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d10a      	bne.n	8005a0c <prvAddCurrentTaskToDelayedList+0x58>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059fc:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	481a      	ldr	r0, [pc, #104]	; (8005a70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a06:	f7ff fa52 	bl	8004eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a0a:	e026      	b.n	8005a5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d209      	bcs.n	8005a38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7ff fa60 	bl	8004ef6 <vListInsert>
}
 8005a36:	e010      	b.n	8005a5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7ff fa56 	bl	8004ef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d202      	bcs.n	8005a5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6013      	str	r3, [r2, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200007b8 	.word	0x200007b8
 8005a68:	200006b4 	.word	0x200006b4
 8005a6c:	200007bc 	.word	0x200007bc
 8005a70:	200007a0 	.word	0x200007a0
 8005a74:	20000770 	.word	0x20000770
 8005a78:	2000076c 	.word	0x2000076c
 8005a7c:	200007d4 	.word	0x200007d4

08005a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b04      	subs	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <pxPortInitialiseStack+0x64>)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b14      	subs	r3, #20
 8005aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f06f 0202 	mvn.w	r2, #2
 8005ace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b20      	subs	r3, #32
 8005ad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	08005ae9 	.word	0x08005ae9

08005ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvTaskExitError+0x5c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d00c      	beq.n	8005b16 <prvTaskExitError+0x2e>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	b672      	cpsid	i
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	b662      	cpsie	i
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <prvTaskExitError+0x2c>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	b672      	cpsid	i
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	b662      	cpsie	i
 8005b2a:	60bb      	str	r3, [r7, #8]
}
 8005b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b2e:	bf00      	nop
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0fc      	beq.n	8005b30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	2000000c 	.word	0x2000000c
	...

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	200006b4 	.word	0x200006b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed08 	.word	0xe000ed08

08005ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ba6:	4b37      	ldr	r3, [pc, #220]	; (8005c84 <xPortStartScheduler+0xe4>)
 8005ba8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b2f      	ldr	r3, [pc, #188]	; (8005c88 <xPortStartScheduler+0xe8>)
 8005bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <xPortStartScheduler+0xec>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bd4:	e009      	b.n	8005bea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bd6:	4b2d      	ldr	r3, [pc, #180]	; (8005c8c <xPortStartScheduler+0xec>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <xPortStartScheduler+0xec>)
 8005bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d0ef      	beq.n	8005bd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <xPortStartScheduler+0xec>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f1c3 0307 	rsb	r3, r3, #7
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00c      	beq.n	8005c1c <xPortStartScheduler+0x7c>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	b672      	cpsid	i
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	b662      	cpsie	i
 8005c16:	60bb      	str	r3, [r7, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <xPortStartScheduler+0xec>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <xPortStartScheduler+0xec>)
 8005c24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <xPortStartScheduler+0xec>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <xPortStartScheduler+0xec>)
 8005c30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <xPortStartScheduler+0xf0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a14      	ldr	r2, [pc, #80]	; (8005c90 <xPortStartScheduler+0xf0>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c46:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <xPortStartScheduler+0xf0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <xPortStartScheduler+0xf0>)
 8005c4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c52:	f000 f8dd 	bl	8005e10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c56:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <xPortStartScheduler+0xf4>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c5c:	f000 f8fc 	bl	8005e58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c60:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <xPortStartScheduler+0xf8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <xPortStartScheduler+0xf8>)
 8005c66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c6c:	f7ff ff84 	bl	8005b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c70:	f7ff fd60 	bl	8005734 <vTaskSwitchContext>
	prvTaskExitError();
 8005c74:	f7ff ff38 	bl	8005ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000e400 	.word	0xe000e400
 8005c88:	200007e0 	.word	0x200007e0
 8005c8c:	200007e4 	.word	0x200007e4
 8005c90:	e000ed20 	.word	0xe000ed20
 8005c94:	2000000c 	.word	0x2000000c
 8005c98:	e000ef34 	.word	0xe000ef34

08005c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	b672      	cpsid	i
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	b662      	cpsie	i
 8005cb6:	607b      	str	r3, [r7, #4]
}
 8005cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <vPortEnterCritical+0x60>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	4a0e      	ldr	r2, [pc, #56]	; (8005cfc <vPortEnterCritical+0x60>)
 8005cc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <vPortEnterCritical+0x60>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d111      	bne.n	8005cf0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <vPortEnterCritical+0x64>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <vPortEnterCritical+0x54>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	b672      	cpsid	i
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	b662      	cpsie	i
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <vPortEnterCritical+0x52>
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	2000000c 	.word	0x2000000c
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <vPortExitCritical+0x54>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <vPortExitCritical+0x28>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	b672      	cpsid	i
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	b662      	cpsie	i
 8005d26:	607b      	str	r3, [r7, #4]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <vPortExitCritical+0x54>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <vPortExitCritical+0x54>)
 8005d34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d36:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <vPortExitCritical+0x54>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <vPortExitCritical+0x46>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	00000000 	.word	0x00000000

08005d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d60:	f3ef 8009 	mrs	r0, PSP
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <pxCurrentTCBConst>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f01e 0f10 	tst.w	lr, #16
 8005d70:	bf08      	it	eq
 8005d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d84:	b672      	cpsid	i
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	b662      	cpsie	i
 8005d94:	f7ff fcce 	bl	8005734 <vTaskSwitchContext>
 8005d98:	f04f 0000 	mov.w	r0, #0
 8005d9c:	f380 8811 	msr	BASEPRI, r0
 8005da0:	bc09      	pop	{r0, r3}
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	f01e 0f10 	tst.w	lr, #16
 8005dae:	bf08      	it	eq
 8005db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005db4:	f380 8809 	msr	PSP, r0
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <pxCurrentTCBConst>:
 8005dc0:	200006b4 	.word	0x200006b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	b672      	cpsid	i
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	b662      	cpsie	i
 8005de2:	607b      	str	r3, [r7, #4]
}
 8005de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005de6:	f7ff fbeb 	bl	80055c0 <xTaskIncrementTick>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <SysTick_Handler+0x44>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f383 8811 	msr	BASEPRI, r3
}
 8005e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <vPortSetupTimerInterrupt+0x34>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <vPortSetupTimerInterrupt+0x38>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <vPortSetupTimerInterrupt+0x3c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <vPortSetupTimerInterrupt+0x40>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	099b      	lsrs	r3, r3, #6
 8005e2c:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <vPortSetupTimerInterrupt+0x44>)
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <vPortSetupTimerInterrupt+0x34>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	e000e010 	.word	0xe000e010
 8005e48:	e000e018 	.word	0xe000e018
 8005e4c:	20000000 	.word	0x20000000
 8005e50:	10624dd3 	.word	0x10624dd3
 8005e54:	e000e014 	.word	0xe000e014

08005e58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e68 <vPortEnableVFP+0x10>
 8005e5c:	6801      	ldr	r1, [r0, #0]
 8005e5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e62:	6001      	str	r1, [r0, #0]
 8005e64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e66:	bf00      	nop
 8005e68:	e000ed88 	.word	0xe000ed88

08005e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e78:	f7ff faf6 	bl	8005468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e7c:	4b5b      	ldr	r3, [pc, #364]	; (8005fec <pvPortMalloc+0x180>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e84:	f000 f91a 	bl	80060bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e88:	4b59      	ldr	r3, [pc, #356]	; (8005ff0 <pvPortMalloc+0x184>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8092 	bne.w	8005fba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01f      	beq.n	8005edc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <pvPortMalloc+0x70>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	b672      	cpsid	i
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	b662      	cpsie	i
 8005ed6:	617b      	str	r3, [r7, #20]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d06b      	beq.n	8005fba <pvPortMalloc+0x14e>
 8005ee2:	4b44      	ldr	r3, [pc, #272]	; (8005ff4 <pvPortMalloc+0x188>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d866      	bhi.n	8005fba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eec:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <pvPortMalloc+0x18c>)
 8005eee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ef0:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <pvPortMalloc+0x18c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef6:	e004      	b.n	8005f02 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d903      	bls.n	8005f14 <pvPortMalloc+0xa8>
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f1      	bne.n	8005ef8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <pvPortMalloc+0x180>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d04d      	beq.n	8005fba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2208      	movs	r2, #8
 8005f24:	4413      	add	r3, r2
 8005f26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	2308      	movs	r3, #8
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d921      	bls.n	8005f84 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <pvPortMalloc+0x100>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	b672      	cpsid	i
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	b662      	cpsie	i
 8005f66:	613b      	str	r3, [r7, #16]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f7e:	69b8      	ldr	r0, [r7, #24]
 8005f80:	f000 f8fe 	bl	8006180 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <pvPortMalloc+0x188>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <pvPortMalloc+0x188>)
 8005f90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f92:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <pvPortMalloc+0x188>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <pvPortMalloc+0x190>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d203      	bcs.n	8005fa6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <pvPortMalloc+0x188>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <pvPortMalloc+0x190>)
 8005fa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <pvPortMalloc+0x184>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fba:	f7ff fa63 	bl	8005484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00c      	beq.n	8005fe2 <pvPortMalloc+0x176>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	b672      	cpsid	i
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	b662      	cpsie	i
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <pvPortMalloc+0x174>
	return pvReturn;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3728      	adds	r7, #40	; 0x28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200043f0 	.word	0x200043f0
 8005ff0:	200043fc 	.word	0x200043fc
 8005ff4:	200043f4 	.word	0x200043f4
 8005ff8:	200043e8 	.word	0x200043e8
 8005ffc:	200043f8 	.word	0x200043f8

08006000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04c      	beq.n	80060ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006012:	2308      	movs	r3, #8
 8006014:	425b      	negs	r3, r3
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <vPortFree+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <vPortFree+0x48>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	b672      	cpsid	i
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	b662      	cpsie	i
 8006042:	60fb      	str	r3, [r7, #12]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <vPortFree+0x6a>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	b672      	cpsid	i
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	b662      	cpsie	i
 8006064:	60bb      	str	r3, [r7, #8]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <vPortFree+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d019      	beq.n	80060ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d115      	bne.n	80060ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortFree+0xb4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006090:	f7ff f9ea 	bl	8005468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <vPortFree+0xb8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4413      	add	r3, r2
 800609e:	4a06      	ldr	r2, [pc, #24]	; (80060b8 <vPortFree+0xb8>)
 80060a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060a2:	6938      	ldr	r0, [r7, #16]
 80060a4:	f000 f86c 	bl	8006180 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060a8:	f7ff f9ec 	bl	8005484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060ac:	bf00      	nop
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	200043fc 	.word	0x200043fc
 80060b8:	200043f4 	.word	0x200043f4

080060bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060c8:	4b27      	ldr	r3, [pc, #156]	; (8006168 <prvHeapInit+0xac>)
 80060ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3307      	adds	r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <prvHeapInit+0xac>)
 80060ec:	4413      	add	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <prvHeapInit+0xb0>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060fa:	4b1c      	ldr	r3, [pc, #112]	; (800616c <prvHeapInit+0xb0>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4413      	add	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006108:	2208      	movs	r2, #8
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0307 	bic.w	r3, r3, #7
 8006116:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a15      	ldr	r2, [pc, #84]	; (8006170 <prvHeapInit+0xb4>)
 800611c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <prvHeapInit+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <prvHeapInit+0xb4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <prvHeapInit+0xb4>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <prvHeapInit+0xb8>)
 800614a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <prvHeapInit+0xbc>)
 8006152:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <prvHeapInit+0xc0>)
 8006156:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800615a:	601a      	str	r2, [r3, #0]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	200007e8 	.word	0x200007e8
 800616c:	200043e8 	.word	0x200043e8
 8006170:	200043f0 	.word	0x200043f0
 8006174:	200043f8 	.word	0x200043f8
 8006178:	200043f4 	.word	0x200043f4
 800617c:	200043fc 	.word	0x200043fc

08006180 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <prvInsertBlockIntoFreeList+0xac>)
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e002      	b.n	8006194 <prvInsertBlockIntoFreeList+0x14>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	d8f7      	bhi.n	800618e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d108      	bne.n	80061c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d118      	bne.n	8006208 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <prvInsertBlockIntoFreeList+0xb0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d00d      	beq.n	80061fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	441a      	add	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e008      	b.n	8006210 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvInsertBlockIntoFreeList+0xb0>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e003      	b.n	8006210 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d002      	beq.n	800621e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	200043e8 	.word	0x200043e8
 8006230:	200043f0 	.word	0x200043f0

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000010 	.word	0x20000010

08006240 <std>:
 8006240:	2300      	movs	r3, #0
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	e9c0 3300 	strd	r3, r3, [r0]
 800624a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800624e:	6083      	str	r3, [r0, #8]
 8006250:	8181      	strh	r1, [r0, #12]
 8006252:	6643      	str	r3, [r0, #100]	; 0x64
 8006254:	81c2      	strh	r2, [r0, #14]
 8006256:	6183      	str	r3, [r0, #24]
 8006258:	4619      	mov	r1, r3
 800625a:	2208      	movs	r2, #8
 800625c:	305c      	adds	r0, #92	; 0x5c
 800625e:	f000 f91a 	bl	8006496 <memset>
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <std+0x38>)
 8006264:	6263      	str	r3, [r4, #36]	; 0x24
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <std+0x3c>)
 8006268:	62a3      	str	r3, [r4, #40]	; 0x28
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <std+0x40>)
 800626c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <std+0x44>)
 8006270:	6224      	str	r4, [r4, #32]
 8006272:	6323      	str	r3, [r4, #48]	; 0x30
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	08006f79 	.word	0x08006f79
 800627c:	08006f9b 	.word	0x08006f9b
 8006280:	08006fd3 	.word	0x08006fd3
 8006284:	08006ff7 	.word	0x08006ff7

08006288 <_cleanup_r>:
 8006288:	4901      	ldr	r1, [pc, #4]	; (8006290 <_cleanup_r+0x8>)
 800628a:	f000 b8af 	b.w	80063ec <_fwalk_reent>
 800628e:	bf00      	nop
 8006290:	08007d49 	.word	0x08007d49

08006294 <__sfmoreglue>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	2268      	movs	r2, #104	; 0x68
 8006298:	1e4d      	subs	r5, r1, #1
 800629a:	4355      	muls	r5, r2
 800629c:	460e      	mov	r6, r1
 800629e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062a2:	f000 f921 	bl	80064e8 <_malloc_r>
 80062a6:	4604      	mov	r4, r0
 80062a8:	b140      	cbz	r0, 80062bc <__sfmoreglue+0x28>
 80062aa:	2100      	movs	r1, #0
 80062ac:	e9c0 1600 	strd	r1, r6, [r0]
 80062b0:	300c      	adds	r0, #12
 80062b2:	60a0      	str	r0, [r4, #8]
 80062b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062b8:	f000 f8ed 	bl	8006496 <memset>
 80062bc:	4620      	mov	r0, r4
 80062be:	bd70      	pop	{r4, r5, r6, pc}

080062c0 <__sfp_lock_acquire>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__sfp_lock_acquire+0x8>)
 80062c2:	f000 b8d8 	b.w	8006476 <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	20004401 	.word	0x20004401

080062cc <__sfp_lock_release>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__sfp_lock_release+0x8>)
 80062ce:	f000 b8d3 	b.w	8006478 <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	20004401 	.word	0x20004401

080062d8 <__sinit_lock_acquire>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__sinit_lock_acquire+0x8>)
 80062da:	f000 b8cc 	b.w	8006476 <__retarget_lock_acquire_recursive>
 80062de:	bf00      	nop
 80062e0:	20004402 	.word	0x20004402

080062e4 <__sinit_lock_release>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__sinit_lock_release+0x8>)
 80062e6:	f000 b8c7 	b.w	8006478 <__retarget_lock_release_recursive>
 80062ea:	bf00      	nop
 80062ec:	20004402 	.word	0x20004402

080062f0 <__sinit>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4604      	mov	r4, r0
 80062f4:	f7ff fff0 	bl	80062d8 <__sinit_lock_acquire>
 80062f8:	69a3      	ldr	r3, [r4, #24]
 80062fa:	b11b      	cbz	r3, 8006304 <__sinit+0x14>
 80062fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006300:	f7ff bff0 	b.w	80062e4 <__sinit_lock_release>
 8006304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006308:	6523      	str	r3, [r4, #80]	; 0x50
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <__sinit+0x68>)
 800630c:	4a13      	ldr	r2, [pc, #76]	; (800635c <__sinit+0x6c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	62a2      	str	r2, [r4, #40]	; 0x28
 8006312:	42a3      	cmp	r3, r4
 8006314:	bf04      	itt	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	61a3      	streq	r3, [r4, #24]
 800631a:	4620      	mov	r0, r4
 800631c:	f000 f820 	bl	8006360 <__sfp>
 8006320:	6060      	str	r0, [r4, #4]
 8006322:	4620      	mov	r0, r4
 8006324:	f000 f81c 	bl	8006360 <__sfp>
 8006328:	60a0      	str	r0, [r4, #8]
 800632a:	4620      	mov	r0, r4
 800632c:	f000 f818 	bl	8006360 <__sfp>
 8006330:	2200      	movs	r2, #0
 8006332:	60e0      	str	r0, [r4, #12]
 8006334:	2104      	movs	r1, #4
 8006336:	6860      	ldr	r0, [r4, #4]
 8006338:	f7ff ff82 	bl	8006240 <std>
 800633c:	68a0      	ldr	r0, [r4, #8]
 800633e:	2201      	movs	r2, #1
 8006340:	2109      	movs	r1, #9
 8006342:	f7ff ff7d 	bl	8006240 <std>
 8006346:	68e0      	ldr	r0, [r4, #12]
 8006348:	2202      	movs	r2, #2
 800634a:	2112      	movs	r1, #18
 800634c:	f7ff ff78 	bl	8006240 <std>
 8006350:	2301      	movs	r3, #1
 8006352:	61a3      	str	r3, [r4, #24]
 8006354:	e7d2      	b.n	80062fc <__sinit+0xc>
 8006356:	bf00      	nop
 8006358:	08008d80 	.word	0x08008d80
 800635c:	08006289 	.word	0x08006289

08006360 <__sfp>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	4607      	mov	r7, r0
 8006364:	f7ff ffac 	bl	80062c0 <__sfp_lock_acquire>
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <__sfp+0x84>)
 800636a:	681e      	ldr	r6, [r3, #0]
 800636c:	69b3      	ldr	r3, [r6, #24]
 800636e:	b913      	cbnz	r3, 8006376 <__sfp+0x16>
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff ffbd 	bl	80062f0 <__sinit>
 8006376:	3648      	adds	r6, #72	; 0x48
 8006378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800637c:	3b01      	subs	r3, #1
 800637e:	d503      	bpl.n	8006388 <__sfp+0x28>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	b30b      	cbz	r3, 80063c8 <__sfp+0x68>
 8006384:	6836      	ldr	r6, [r6, #0]
 8006386:	e7f7      	b.n	8006378 <__sfp+0x18>
 8006388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800638c:	b9d5      	cbnz	r5, 80063c4 <__sfp+0x64>
 800638e:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <__sfp+0x88>)
 8006390:	60e3      	str	r3, [r4, #12]
 8006392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006396:	6665      	str	r5, [r4, #100]	; 0x64
 8006398:	f000 f86c 	bl	8006474 <__retarget_lock_init_recursive>
 800639c:	f7ff ff96 	bl	80062cc <__sfp_lock_release>
 80063a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	61a5      	str	r5, [r4, #24]
 80063ac:	2208      	movs	r2, #8
 80063ae:	4629      	mov	r1, r5
 80063b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063b4:	f000 f86f 	bl	8006496 <memset>
 80063b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063c0:	4620      	mov	r0, r4
 80063c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c4:	3468      	adds	r4, #104	; 0x68
 80063c6:	e7d9      	b.n	800637c <__sfp+0x1c>
 80063c8:	2104      	movs	r1, #4
 80063ca:	4638      	mov	r0, r7
 80063cc:	f7ff ff62 	bl	8006294 <__sfmoreglue>
 80063d0:	4604      	mov	r4, r0
 80063d2:	6030      	str	r0, [r6, #0]
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d1d5      	bne.n	8006384 <__sfp+0x24>
 80063d8:	f7ff ff78 	bl	80062cc <__sfp_lock_release>
 80063dc:	230c      	movs	r3, #12
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	e7ee      	b.n	80063c0 <__sfp+0x60>
 80063e2:	bf00      	nop
 80063e4:	08008d80 	.word	0x08008d80
 80063e8:	ffff0001 	.word	0xffff0001

080063ec <_fwalk_reent>:
 80063ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f0:	4606      	mov	r6, r0
 80063f2:	4688      	mov	r8, r1
 80063f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063f8:	2700      	movs	r7, #0
 80063fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063fe:	f1b9 0901 	subs.w	r9, r9, #1
 8006402:	d505      	bpl.n	8006410 <_fwalk_reent+0x24>
 8006404:	6824      	ldr	r4, [r4, #0]
 8006406:	2c00      	cmp	r4, #0
 8006408:	d1f7      	bne.n	80063fa <_fwalk_reent+0xe>
 800640a:	4638      	mov	r0, r7
 800640c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006410:	89ab      	ldrh	r3, [r5, #12]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d907      	bls.n	8006426 <_fwalk_reent+0x3a>
 8006416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800641a:	3301      	adds	r3, #1
 800641c:	d003      	beq.n	8006426 <_fwalk_reent+0x3a>
 800641e:	4629      	mov	r1, r5
 8006420:	4630      	mov	r0, r6
 8006422:	47c0      	blx	r8
 8006424:	4307      	orrs	r7, r0
 8006426:	3568      	adds	r5, #104	; 0x68
 8006428:	e7e9      	b.n	80063fe <_fwalk_reent+0x12>
	...

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4d0d      	ldr	r5, [pc, #52]	; (8006464 <__libc_init_array+0x38>)
 8006430:	4c0d      	ldr	r4, [pc, #52]	; (8006468 <__libc_init_array+0x3c>)
 8006432:	1b64      	subs	r4, r4, r5
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	2600      	movs	r6, #0
 8006438:	42a6      	cmp	r6, r4
 800643a:	d109      	bne.n	8006450 <__libc_init_array+0x24>
 800643c:	4d0b      	ldr	r5, [pc, #44]	; (800646c <__libc_init_array+0x40>)
 800643e:	4c0c      	ldr	r4, [pc, #48]	; (8006470 <__libc_init_array+0x44>)
 8006440:	f002 fc1c 	bl	8008c7c <_init>
 8006444:	1b64      	subs	r4, r4, r5
 8006446:	10a4      	asrs	r4, r4, #2
 8006448:	2600      	movs	r6, #0
 800644a:	42a6      	cmp	r6, r4
 800644c:	d105      	bne.n	800645a <__libc_init_array+0x2e>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	f855 3b04 	ldr.w	r3, [r5], #4
 8006454:	4798      	blx	r3
 8006456:	3601      	adds	r6, #1
 8006458:	e7ee      	b.n	8006438 <__libc_init_array+0xc>
 800645a:	f855 3b04 	ldr.w	r3, [r5], #4
 800645e:	4798      	blx	r3
 8006460:	3601      	adds	r6, #1
 8006462:	e7f2      	b.n	800644a <__libc_init_array+0x1e>
 8006464:	08009104 	.word	0x08009104
 8006468:	08009104 	.word	0x08009104
 800646c:	08009104 	.word	0x08009104
 8006470:	08009108 	.word	0x08009108

08006474 <__retarget_lock_init_recursive>:
 8006474:	4770      	bx	lr

08006476 <__retarget_lock_acquire_recursive>:
 8006476:	4770      	bx	lr

08006478 <__retarget_lock_release_recursive>:
 8006478:	4770      	bx	lr

0800647a <memcpy>:
 800647a:	440a      	add	r2, r1
 800647c:	4291      	cmp	r1, r2
 800647e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006482:	d100      	bne.n	8006486 <memcpy+0xc>
 8006484:	4770      	bx	lr
 8006486:	b510      	push	{r4, lr}
 8006488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006490:	4291      	cmp	r1, r2
 8006492:	d1f9      	bne.n	8006488 <memcpy+0xe>
 8006494:	bd10      	pop	{r4, pc}

08006496 <memset>:
 8006496:	4402      	add	r2, r0
 8006498:	4603      	mov	r3, r0
 800649a:	4293      	cmp	r3, r2
 800649c:	d100      	bne.n	80064a0 <memset+0xa>
 800649e:	4770      	bx	lr
 80064a0:	f803 1b01 	strb.w	r1, [r3], #1
 80064a4:	e7f9      	b.n	800649a <memset+0x4>
	...

080064a8 <sbrk_aligned>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0e      	ldr	r6, [pc, #56]	; (80064e4 <sbrk_aligned+0x3c>)
 80064ac:	460c      	mov	r4, r1
 80064ae:	6831      	ldr	r1, [r6, #0]
 80064b0:	4605      	mov	r5, r0
 80064b2:	b911      	cbnz	r1, 80064ba <sbrk_aligned+0x12>
 80064b4:	f000 fd50 	bl	8006f58 <_sbrk_r>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fd4b 	bl	8006f58 <_sbrk_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <sbrk_aligned+0x34>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d007      	beq.n	80064e0 <sbrk_aligned+0x38>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 fd40 	bl	8006f58 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d101      	bne.n	80064e0 <sbrk_aligned+0x38>
 80064dc:	f04f 34ff 	mov.w	r4, #4294967295
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	20004408 	.word	0x20004408

080064e8 <_malloc_r>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4607      	mov	r7, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d905      	bls.n	8006510 <_malloc_r+0x28>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	2600      	movs	r6, #0
 800650a:	4630      	mov	r0, r6
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	4e2e      	ldr	r6, [pc, #184]	; (80065cc <_malloc_r+0xe4>)
 8006512:	f001 fc73 	bl	8007dfc <__malloc_lock>
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	461c      	mov	r4, r3
 800651a:	bb34      	cbnz	r4, 800656a <_malloc_r+0x82>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	f7ff ffc2 	bl	80064a8 <sbrk_aligned>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	4604      	mov	r4, r0
 8006528:	d14d      	bne.n	80065c6 <_malloc_r+0xde>
 800652a:	6834      	ldr	r4, [r6, #0]
 800652c:	4626      	mov	r6, r4
 800652e:	2e00      	cmp	r6, #0
 8006530:	d140      	bne.n	80065b4 <_malloc_r+0xcc>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4631      	mov	r1, r6
 8006536:	4638      	mov	r0, r7
 8006538:	eb04 0803 	add.w	r8, r4, r3
 800653c:	f000 fd0c 	bl	8006f58 <_sbrk_r>
 8006540:	4580      	cmp	r8, r0
 8006542:	d13a      	bne.n	80065ba <_malloc_r+0xd2>
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	3503      	adds	r5, #3
 8006548:	1a6d      	subs	r5, r5, r1
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	4629      	mov	r1, r5
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <sbrk_aligned>
 800655e:	3001      	adds	r0, #1
 8006560:	d02b      	beq.n	80065ba <_malloc_r+0xd2>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	442b      	add	r3, r5
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	e00e      	b.n	8006588 <_malloc_r+0xa0>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	1b52      	subs	r2, r2, r5
 800656e:	d41e      	bmi.n	80065ae <_malloc_r+0xc6>
 8006570:	2a0b      	cmp	r2, #11
 8006572:	d916      	bls.n	80065a2 <_malloc_r+0xba>
 8006574:	1961      	adds	r1, r4, r5
 8006576:	42a3      	cmp	r3, r4
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	bf18      	it	ne
 800657c:	6059      	strne	r1, [r3, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	bf08      	it	eq
 8006582:	6031      	streq	r1, [r6, #0]
 8006584:	5162      	str	r2, [r4, r5]
 8006586:	604b      	str	r3, [r1, #4]
 8006588:	4638      	mov	r0, r7
 800658a:	f104 060b 	add.w	r6, r4, #11
 800658e:	f001 fc3b 	bl	8007e08 <__malloc_unlock>
 8006592:	f026 0607 	bic.w	r6, r6, #7
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	1af2      	subs	r2, r6, r3
 800659a:	d0b6      	beq.n	800650a <_malloc_r+0x22>
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	50a3      	str	r3, [r4, r2]
 80065a0:	e7b3      	b.n	800650a <_malloc_r+0x22>
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bf0c      	ite	eq
 80065a8:	6032      	streq	r2, [r6, #0]
 80065aa:	605a      	strne	r2, [r3, #4]
 80065ac:	e7ec      	b.n	8006588 <_malloc_r+0xa0>
 80065ae:	4623      	mov	r3, r4
 80065b0:	6864      	ldr	r4, [r4, #4]
 80065b2:	e7b2      	b.n	800651a <_malloc_r+0x32>
 80065b4:	4634      	mov	r4, r6
 80065b6:	6876      	ldr	r6, [r6, #4]
 80065b8:	e7b9      	b.n	800652e <_malloc_r+0x46>
 80065ba:	230c      	movs	r3, #12
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4638      	mov	r0, r7
 80065c0:	f001 fc22 	bl	8007e08 <__malloc_unlock>
 80065c4:	e7a1      	b.n	800650a <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7de      	b.n	8006588 <_malloc_r+0xa0>
 80065ca:	bf00      	nop
 80065cc:	20004404 	.word	0x20004404

080065d0 <__cvt>:
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d2:	ed2d 8b02 	vpush	{d8}
 80065d6:	eeb0 8b40 	vmov.f64	d8, d0
 80065da:	b085      	sub	sp, #20
 80065dc:	4617      	mov	r7, r2
 80065de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065e2:	ee18 2a90 	vmov	r2, s17
 80065e6:	f025 0520 	bic.w	r5, r5, #32
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	bfb6      	itet	lt
 80065ee:	222d      	movlt	r2, #45	; 0x2d
 80065f0:	2200      	movge	r2, #0
 80065f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80065f6:	2d46      	cmp	r5, #70	; 0x46
 80065f8:	460c      	mov	r4, r1
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	d004      	beq.n	8006608 <__cvt+0x38>
 80065fe:	2d45      	cmp	r5, #69	; 0x45
 8006600:	d100      	bne.n	8006604 <__cvt+0x34>
 8006602:	3401      	adds	r4, #1
 8006604:	2102      	movs	r1, #2
 8006606:	e000      	b.n	800660a <__cvt+0x3a>
 8006608:	2103      	movs	r1, #3
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	ab02      	add	r3, sp, #8
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4622      	mov	r2, r4
 8006614:	4633      	mov	r3, r6
 8006616:	eeb0 0b48 	vmov.f64	d0, d8
 800661a:	f000 fda1 	bl	8007160 <_dtoa_r>
 800661e:	2d47      	cmp	r5, #71	; 0x47
 8006620:	d101      	bne.n	8006626 <__cvt+0x56>
 8006622:	07fb      	lsls	r3, r7, #31
 8006624:	d51a      	bpl.n	800665c <__cvt+0x8c>
 8006626:	2d46      	cmp	r5, #70	; 0x46
 8006628:	eb00 0204 	add.w	r2, r0, r4
 800662c:	d10c      	bne.n	8006648 <__cvt+0x78>
 800662e:	7803      	ldrb	r3, [r0, #0]
 8006630:	2b30      	cmp	r3, #48	; 0x30
 8006632:	d107      	bne.n	8006644 <__cvt+0x74>
 8006634:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	bf1c      	itt	ne
 800663e:	f1c4 0401 	rsbne	r4, r4, #1
 8006642:	6034      	strne	r4, [r6, #0]
 8006644:	6833      	ldr	r3, [r6, #0]
 8006646:	441a      	add	r2, r3
 8006648:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	bf08      	it	eq
 8006652:	9203      	streq	r2, [sp, #12]
 8006654:	2130      	movs	r1, #48	; 0x30
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	4293      	cmp	r3, r2
 800665a:	d307      	bcc.n	800666c <__cvt+0x9c>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006660:	1a1b      	subs	r3, r3, r0
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	b005      	add	sp, #20
 8006666:	ecbd 8b02 	vpop	{d8}
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	1c5c      	adds	r4, r3, #1
 800666e:	9403      	str	r4, [sp, #12]
 8006670:	7019      	strb	r1, [r3, #0]
 8006672:	e7f0      	b.n	8006656 <__cvt+0x86>

08006674 <__exponent>:
 8006674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006676:	4603      	mov	r3, r0
 8006678:	2900      	cmp	r1, #0
 800667a:	bfb8      	it	lt
 800667c:	4249      	neglt	r1, r1
 800667e:	f803 2b02 	strb.w	r2, [r3], #2
 8006682:	bfb4      	ite	lt
 8006684:	222d      	movlt	r2, #45	; 0x2d
 8006686:	222b      	movge	r2, #43	; 0x2b
 8006688:	2909      	cmp	r1, #9
 800668a:	7042      	strb	r2, [r0, #1]
 800668c:	dd2a      	ble.n	80066e4 <__exponent+0x70>
 800668e:	f10d 0407 	add.w	r4, sp, #7
 8006692:	46a4      	mov	ip, r4
 8006694:	270a      	movs	r7, #10
 8006696:	46a6      	mov	lr, r4
 8006698:	460a      	mov	r2, r1
 800669a:	fb91 f6f7 	sdiv	r6, r1, r7
 800669e:	fb07 1516 	mls	r5, r7, r6, r1
 80066a2:	3530      	adds	r5, #48	; 0x30
 80066a4:	2a63      	cmp	r2, #99	; 0x63
 80066a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80066aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066ae:	4631      	mov	r1, r6
 80066b0:	dcf1      	bgt.n	8006696 <__exponent+0x22>
 80066b2:	3130      	adds	r1, #48	; 0x30
 80066b4:	f1ae 0502 	sub.w	r5, lr, #2
 80066b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066bc:	1c44      	adds	r4, r0, #1
 80066be:	4629      	mov	r1, r5
 80066c0:	4561      	cmp	r1, ip
 80066c2:	d30a      	bcc.n	80066da <__exponent+0x66>
 80066c4:	f10d 0209 	add.w	r2, sp, #9
 80066c8:	eba2 020e 	sub.w	r2, r2, lr
 80066cc:	4565      	cmp	r5, ip
 80066ce:	bf88      	it	hi
 80066d0:	2200      	movhi	r2, #0
 80066d2:	4413      	add	r3, r2
 80066d4:	1a18      	subs	r0, r3, r0
 80066d6:	b003      	add	sp, #12
 80066d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066e2:	e7ed      	b.n	80066c0 <__exponent+0x4c>
 80066e4:	2330      	movs	r3, #48	; 0x30
 80066e6:	3130      	adds	r1, #48	; 0x30
 80066e8:	7083      	strb	r3, [r0, #2]
 80066ea:	70c1      	strb	r1, [r0, #3]
 80066ec:	1d03      	adds	r3, r0, #4
 80066ee:	e7f1      	b.n	80066d4 <__exponent+0x60>

080066f0 <_printf_float>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	b08b      	sub	sp, #44	; 0x2c
 80066f6:	460c      	mov	r4, r1
 80066f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80066fc:	4616      	mov	r6, r2
 80066fe:	461f      	mov	r7, r3
 8006700:	4605      	mov	r5, r0
 8006702:	f001 fb5d 	bl	8007dc0 <_localeconv_r>
 8006706:	f8d0 b000 	ldr.w	fp, [r0]
 800670a:	4658      	mov	r0, fp
 800670c:	f7f9 fd98 	bl	8000240 <strlen>
 8006710:	2300      	movs	r3, #0
 8006712:	9308      	str	r3, [sp, #32]
 8006714:	f8d8 3000 	ldr.w	r3, [r8]
 8006718:	f894 9018 	ldrb.w	r9, [r4, #24]
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	3307      	adds	r3, #7
 8006720:	f023 0307 	bic.w	r3, r3, #7
 8006724:	f103 0108 	add.w	r1, r3, #8
 8006728:	f8c8 1000 	str.w	r1, [r8]
 800672c:	4682      	mov	sl, r0
 800672e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006732:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006736:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006998 <_printf_float+0x2a8>
 800673a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800673e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006742:	eeb4 6b47 	vcmp.f64	d6, d7
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	dd24      	ble.n	8006796 <_printf_float+0xa6>
 800674c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	d502      	bpl.n	800675c <_printf_float+0x6c>
 8006756:	232d      	movs	r3, #45	; 0x2d
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675c:	4b90      	ldr	r3, [pc, #576]	; (80069a0 <_printf_float+0x2b0>)
 800675e:	4891      	ldr	r0, [pc, #580]	; (80069a4 <_printf_float+0x2b4>)
 8006760:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006764:	bf94      	ite	ls
 8006766:	4698      	movls	r8, r3
 8006768:	4680      	movhi	r8, r0
 800676a:	2303      	movs	r3, #3
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	2300      	movs	r3, #0
 8006774:	6022      	str	r2, [r4, #0]
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	9700      	str	r7, [sp, #0]
 800677a:	4633      	mov	r3, r6
 800677c:	aa09      	add	r2, sp, #36	; 0x24
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f000 f9d3 	bl	8006b2c <_printf_common>
 8006786:	3001      	adds	r0, #1
 8006788:	f040 808a 	bne.w	80068a0 <_printf_float+0x1b0>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b00b      	add	sp, #44	; 0x2c
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	eeb4 0b40 	vcmp.f64	d0, d0
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	d709      	bvc.n	80067b4 <_printf_float+0xc4>
 80067a0:	ee10 3a90 	vmov	r3, s1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bfbc      	itt	lt
 80067a8:	232d      	movlt	r3, #45	; 0x2d
 80067aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067ae:	487e      	ldr	r0, [pc, #504]	; (80069a8 <_printf_float+0x2b8>)
 80067b0:	4b7e      	ldr	r3, [pc, #504]	; (80069ac <_printf_float+0x2bc>)
 80067b2:	e7d5      	b.n	8006760 <_printf_float+0x70>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067ba:	9104      	str	r1, [sp, #16]
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	d13c      	bne.n	800683a <_printf_float+0x14a>
 80067c0:	2306      	movs	r3, #6
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	2300      	movs	r3, #0
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	ab08      	add	r3, sp, #32
 80067ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80067ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067d2:	ab07      	add	r3, sp, #28
 80067d4:	6861      	ldr	r1, [r4, #4]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	6022      	str	r2, [r4, #0]
 80067da:	f10d 031b 	add.w	r3, sp, #27
 80067de:	4628      	mov	r0, r5
 80067e0:	f7ff fef6 	bl	80065d0 <__cvt>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9907      	ldr	r1, [sp, #28]
 80067e8:	2b47      	cmp	r3, #71	; 0x47
 80067ea:	4680      	mov	r8, r0
 80067ec:	d108      	bne.n	8006800 <_printf_float+0x110>
 80067ee:	1cc8      	adds	r0, r1, #3
 80067f0:	db02      	blt.n	80067f8 <_printf_float+0x108>
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	4299      	cmp	r1, r3
 80067f6:	dd41      	ble.n	800687c <_printf_float+0x18c>
 80067f8:	f1a9 0902 	sub.w	r9, r9, #2
 80067fc:	fa5f f989 	uxtb.w	r9, r9
 8006800:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006804:	d820      	bhi.n	8006848 <_printf_float+0x158>
 8006806:	3901      	subs	r1, #1
 8006808:	464a      	mov	r2, r9
 800680a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800680e:	9107      	str	r1, [sp, #28]
 8006810:	f7ff ff30 	bl	8006674 <__exponent>
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	9004      	str	r0, [sp, #16]
 8006818:	1813      	adds	r3, r2, r0
 800681a:	2a01      	cmp	r2, #1
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	dc02      	bgt.n	8006826 <_printf_float+0x136>
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	07d2      	lsls	r2, r2, #31
 8006824:	d501      	bpl.n	800682a <_printf_float+0x13a>
 8006826:	3301      	adds	r3, #1
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0a2      	beq.n	8006778 <_printf_float+0x88>
 8006832:	232d      	movs	r3, #45	; 0x2d
 8006834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006838:	e79e      	b.n	8006778 <_printf_float+0x88>
 800683a:	9904      	ldr	r1, [sp, #16]
 800683c:	2947      	cmp	r1, #71	; 0x47
 800683e:	d1c1      	bne.n	80067c4 <_printf_float+0xd4>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1bf      	bne.n	80067c4 <_printf_float+0xd4>
 8006844:	2301      	movs	r3, #1
 8006846:	e7bc      	b.n	80067c2 <_printf_float+0xd2>
 8006848:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800684c:	d118      	bne.n	8006880 <_printf_float+0x190>
 800684e:	2900      	cmp	r1, #0
 8006850:	6863      	ldr	r3, [r4, #4]
 8006852:	dd0b      	ble.n	800686c <_printf_float+0x17c>
 8006854:	6121      	str	r1, [r4, #16]
 8006856:	b913      	cbnz	r3, 800685e <_printf_float+0x16e>
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	07d0      	lsls	r0, r2, #31
 800685c:	d502      	bpl.n	8006864 <_printf_float+0x174>
 800685e:	3301      	adds	r3, #1
 8006860:	440b      	add	r3, r1
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	2300      	movs	r3, #0
 8006866:	65a1      	str	r1, [r4, #88]	; 0x58
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	e7de      	b.n	800682a <_printf_float+0x13a>
 800686c:	b913      	cbnz	r3, 8006874 <_printf_float+0x184>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	07d2      	lsls	r2, r2, #31
 8006872:	d501      	bpl.n	8006878 <_printf_float+0x188>
 8006874:	3302      	adds	r3, #2
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x172>
 8006878:	2301      	movs	r3, #1
 800687a:	e7f2      	b.n	8006862 <_printf_float+0x172>
 800687c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	4299      	cmp	r1, r3
 8006884:	db05      	blt.n	8006892 <_printf_float+0x1a2>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6121      	str	r1, [r4, #16]
 800688a:	07d8      	lsls	r0, r3, #31
 800688c:	d5ea      	bpl.n	8006864 <_printf_float+0x174>
 800688e:	1c4b      	adds	r3, r1, #1
 8006890:	e7e7      	b.n	8006862 <_printf_float+0x172>
 8006892:	2900      	cmp	r1, #0
 8006894:	bfd4      	ite	le
 8006896:	f1c1 0202 	rsble	r2, r1, #2
 800689a:	2201      	movgt	r2, #1
 800689c:	4413      	add	r3, r2
 800689e:	e7e0      	b.n	8006862 <_printf_float+0x172>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	055a      	lsls	r2, r3, #21
 80068a4:	d407      	bmi.n	80068b6 <_printf_float+0x1c6>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	4642      	mov	r2, r8
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d12a      	bne.n	800690a <_printf_float+0x21a>
 80068b4:	e76a      	b.n	800678c <_printf_float+0x9c>
 80068b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068ba:	f240 80e2 	bls.w	8006a82 <_printf_float+0x392>
 80068be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80068c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	d133      	bne.n	8006934 <_printf_float+0x244>
 80068cc:	4a38      	ldr	r2, [pc, #224]	; (80069b0 <_printf_float+0x2c0>)
 80068ce:	2301      	movs	r3, #1
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f af58 	beq.w	800678c <_printf_float+0x9c>
 80068dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	db02      	blt.n	80068ea <_printf_float+0x1fa>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07d8      	lsls	r0, r3, #31
 80068e8:	d50f      	bpl.n	800690a <_printf_float+0x21a>
 80068ea:	4653      	mov	r3, sl
 80068ec:	465a      	mov	r2, fp
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f af49 	beq.w	800678c <_printf_float+0x9c>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	f104 091a 	add.w	r9, r4, #26
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	3b01      	subs	r3, #1
 8006906:	4543      	cmp	r3, r8
 8006908:	dc09      	bgt.n	800691e <_printf_float+0x22e>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	079b      	lsls	r3, r3, #30
 800690e:	f100 8108 	bmi.w	8006b22 <_printf_float+0x432>
 8006912:	68e0      	ldr	r0, [r4, #12]
 8006914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006916:	4298      	cmp	r0, r3
 8006918:	bfb8      	it	lt
 800691a:	4618      	movlt	r0, r3
 800691c:	e738      	b.n	8006790 <_printf_float+0xa0>
 800691e:	2301      	movs	r3, #1
 8006920:	464a      	mov	r2, r9
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f af2f 	beq.w	800678c <_printf_float+0x9c>
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	e7e6      	b.n	8006902 <_printf_float+0x212>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	dc3c      	bgt.n	80069b4 <_printf_float+0x2c4>
 800693a:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <_printf_float+0x2c0>)
 800693c:	2301      	movs	r3, #1
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f af21 	beq.w	800678c <_printf_float+0x9c>
 800694a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800694e:	4313      	orrs	r3, r2
 8006950:	d102      	bne.n	8006958 <_printf_float+0x268>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	07d9      	lsls	r1, r3, #31
 8006956:	d5d8      	bpl.n	800690a <_printf_float+0x21a>
 8006958:	4653      	mov	r3, sl
 800695a:	465a      	mov	r2, fp
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f af12 	beq.w	800678c <_printf_float+0x9c>
 8006968:	f04f 0900 	mov.w	r9, #0
 800696c:	f104 0a1a 	add.w	sl, r4, #26
 8006970:	9b07      	ldr	r3, [sp, #28]
 8006972:	425b      	negs	r3, r3
 8006974:	454b      	cmp	r3, r9
 8006976:	dc01      	bgt.n	800697c <_printf_float+0x28c>
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	e795      	b.n	80068a8 <_printf_float+0x1b8>
 800697c:	2301      	movs	r3, #1
 800697e:	4652      	mov	r2, sl
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f af00 	beq.w	800678c <_printf_float+0x9c>
 800698c:	f109 0901 	add.w	r9, r9, #1
 8006990:	e7ee      	b.n	8006970 <_printf_float+0x280>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
 8006998:	ffffffff 	.word	0xffffffff
 800699c:	7fefffff 	.word	0x7fefffff
 80069a0:	08008d84 	.word	0x08008d84
 80069a4:	08008d88 	.word	0x08008d88
 80069a8:	08008d90 	.word	0x08008d90
 80069ac:	08008d8c 	.word	0x08008d8c
 80069b0:	08008d94 	.word	0x08008d94
 80069b4:	9a08      	ldr	r2, [sp, #32]
 80069b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069b8:	429a      	cmp	r2, r3
 80069ba:	bfa8      	it	ge
 80069bc:	461a      	movge	r2, r3
 80069be:	2a00      	cmp	r2, #0
 80069c0:	4691      	mov	r9, r2
 80069c2:	dc38      	bgt.n	8006a36 <_printf_float+0x346>
 80069c4:	2300      	movs	r3, #0
 80069c6:	9305      	str	r3, [sp, #20]
 80069c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069cc:	f104 021a 	add.w	r2, r4, #26
 80069d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069d2:	9905      	ldr	r1, [sp, #20]
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	eba3 0309 	sub.w	r3, r3, r9
 80069da:	428b      	cmp	r3, r1
 80069dc:	dc33      	bgt.n	8006a46 <_printf_float+0x356>
 80069de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	db3c      	blt.n	8006a60 <_printf_float+0x370>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	07da      	lsls	r2, r3, #31
 80069ea:	d439      	bmi.n	8006a60 <_printf_float+0x370>
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	9a04      	ldr	r2, [sp, #16]
 80069f0:	9907      	ldr	r1, [sp, #28]
 80069f2:	1a9a      	subs	r2, r3, r2
 80069f4:	eba3 0901 	sub.w	r9, r3, r1
 80069f8:	4591      	cmp	r9, r2
 80069fa:	bfa8      	it	ge
 80069fc:	4691      	movge	r9, r2
 80069fe:	f1b9 0f00 	cmp.w	r9, #0
 8006a02:	dc35      	bgt.n	8006a70 <_printf_float+0x380>
 8006a04:	f04f 0800 	mov.w	r8, #0
 8006a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0c:	f104 0a1a 	add.w	sl, r4, #26
 8006a10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	eba3 0309 	sub.w	r3, r3, r9
 8006a1a:	4543      	cmp	r3, r8
 8006a1c:	f77f af75 	ble.w	800690a <_printf_float+0x21a>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4652      	mov	r2, sl
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f aeae 	beq.w	800678c <_printf_float+0x9c>
 8006a30:	f108 0801 	add.w	r8, r8, #1
 8006a34:	e7ec      	b.n	8006a10 <_printf_float+0x320>
 8006a36:	4613      	mov	r3, r2
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	d1bf      	bne.n	80069c4 <_printf_float+0x2d4>
 8006a44:	e6a2      	b.n	800678c <_printf_float+0x9c>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	9204      	str	r2, [sp, #16]
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f ae9b 	beq.w	800678c <_printf_float+0x9c>
 8006a56:	9b05      	ldr	r3, [sp, #20]
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	9305      	str	r3, [sp, #20]
 8006a5e:	e7b7      	b.n	80069d0 <_printf_float+0x2e0>
 8006a60:	4653      	mov	r3, sl
 8006a62:	465a      	mov	r2, fp
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1be      	bne.n	80069ec <_printf_float+0x2fc>
 8006a6e:	e68d      	b.n	800678c <_printf_float+0x9c>
 8006a70:	9a04      	ldr	r2, [sp, #16]
 8006a72:	464b      	mov	r3, r9
 8006a74:	4442      	add	r2, r8
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1c1      	bne.n	8006a04 <_printf_float+0x314>
 8006a80:	e684      	b.n	800678c <_printf_float+0x9c>
 8006a82:	9a08      	ldr	r2, [sp, #32]
 8006a84:	2a01      	cmp	r2, #1
 8006a86:	dc01      	bgt.n	8006a8c <_printf_float+0x39c>
 8006a88:	07db      	lsls	r3, r3, #31
 8006a8a:	d537      	bpl.n	8006afc <_printf_float+0x40c>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4642      	mov	r2, r8
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae78 	beq.w	800678c <_printf_float+0x9c>
 8006a9c:	4653      	mov	r3, sl
 8006a9e:	465a      	mov	r2, fp
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f ae70 	beq.w	800678c <_printf_float+0x9c>
 8006aac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ab0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab8:	d01b      	beq.n	8006af2 <_printf_float+0x402>
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	f108 0201 	add.w	r2, r8, #1
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d10e      	bne.n	8006aea <_printf_float+0x3fa>
 8006acc:	e65e      	b.n	800678c <_printf_float+0x9c>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	464a      	mov	r2, r9
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f43f ae57 	beq.w	800678c <_printf_float+0x9c>
 8006ade:	f108 0801 	add.w	r8, r8, #1
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4543      	cmp	r3, r8
 8006ae8:	dcf1      	bgt.n	8006ace <_printf_float+0x3de>
 8006aea:	9b04      	ldr	r3, [sp, #16]
 8006aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006af0:	e6db      	b.n	80068aa <_printf_float+0x1ba>
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	f104 091a 	add.w	r9, r4, #26
 8006afa:	e7f2      	b.n	8006ae2 <_printf_float+0x3f2>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4642      	mov	r2, r8
 8006b00:	e7df      	b.n	8006ac2 <_printf_float+0x3d2>
 8006b02:	2301      	movs	r3, #1
 8006b04:	464a      	mov	r2, r9
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae3d 	beq.w	800678c <_printf_float+0x9c>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1a:	1a5b      	subs	r3, r3, r1
 8006b1c:	4543      	cmp	r3, r8
 8006b1e:	dcf0      	bgt.n	8006b02 <_printf_float+0x412>
 8006b20:	e6f7      	b.n	8006912 <_printf_float+0x222>
 8006b22:	f04f 0800 	mov.w	r8, #0
 8006b26:	f104 0919 	add.w	r9, r4, #25
 8006b2a:	e7f4      	b.n	8006b16 <_printf_float+0x426>

08006b2c <_printf_common>:
 8006b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	4616      	mov	r6, r2
 8006b32:	4699      	mov	r9, r3
 8006b34:	688a      	ldr	r2, [r1, #8]
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	bfb8      	it	lt
 8006b40:	4613      	movlt	r3, r2
 8006b42:	6033      	str	r3, [r6, #0]
 8006b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b48:	4607      	mov	r7, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	b10a      	cbz	r2, 8006b52 <_printf_common+0x26>
 8006b4e:	3301      	adds	r3, #1
 8006b50:	6033      	str	r3, [r6, #0]
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	0699      	lsls	r1, r3, #26
 8006b56:	bf42      	ittt	mi
 8006b58:	6833      	ldrmi	r3, [r6, #0]
 8006b5a:	3302      	addmi	r3, #2
 8006b5c:	6033      	strmi	r3, [r6, #0]
 8006b5e:	6825      	ldr	r5, [r4, #0]
 8006b60:	f015 0506 	ands.w	r5, r5, #6
 8006b64:	d106      	bne.n	8006b74 <_printf_common+0x48>
 8006b66:	f104 0a19 	add.w	sl, r4, #25
 8006b6a:	68e3      	ldr	r3, [r4, #12]
 8006b6c:	6832      	ldr	r2, [r6, #0]
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	dc26      	bgt.n	8006bc2 <_printf_common+0x96>
 8006b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b78:	1e13      	subs	r3, r2, #0
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	bf18      	it	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	0692      	lsls	r2, r2, #26
 8006b82:	d42b      	bmi.n	8006bdc <_printf_common+0xb0>
 8006b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c0      	blx	r8
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d01e      	beq.n	8006bd0 <_printf_common+0xa4>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	68e5      	ldr	r5, [r4, #12]
 8006b96:	6832      	ldr	r2, [r6, #0]
 8006b98:	f003 0306 	and.w	r3, r3, #6
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	bf08      	it	eq
 8006ba0:	1aad      	subeq	r5, r5, r2
 8006ba2:	68a3      	ldr	r3, [r4, #8]
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	bf0c      	ite	eq
 8006ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bac:	2500      	movne	r5, #0
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	bfc4      	itt	gt
 8006bb2:	1a9b      	subgt	r3, r3, r2
 8006bb4:	18ed      	addgt	r5, r5, r3
 8006bb6:	2600      	movs	r6, #0
 8006bb8:	341a      	adds	r4, #26
 8006bba:	42b5      	cmp	r5, r6
 8006bbc:	d11a      	bne.n	8006bf4 <_printf_common+0xc8>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e008      	b.n	8006bd4 <_printf_common+0xa8>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	4638      	mov	r0, r7
 8006bca:	47c0      	blx	r8
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d103      	bne.n	8006bd8 <_printf_common+0xac>
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd8:	3501      	adds	r5, #1
 8006bda:	e7c6      	b.n	8006b6a <_printf_common+0x3e>
 8006bdc:	18e1      	adds	r1, r4, r3
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	2030      	movs	r0, #48	; 0x30
 8006be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006be6:	4422      	add	r2, r4
 8006be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	e7c7      	b.n	8006b84 <_printf_common+0x58>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	47c0      	blx	r8
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d0e6      	beq.n	8006bd0 <_printf_common+0xa4>
 8006c02:	3601      	adds	r6, #1
 8006c04:	e7d9      	b.n	8006bba <_printf_common+0x8e>
	...

08006c08 <_printf_i>:
 8006c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	7e0f      	ldrb	r7, [r1, #24]
 8006c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c10:	2f78      	cmp	r7, #120	; 0x78
 8006c12:	4691      	mov	r9, r2
 8006c14:	4680      	mov	r8, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	469a      	mov	sl, r3
 8006c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c1e:	d807      	bhi.n	8006c30 <_printf_i+0x28>
 8006c20:	2f62      	cmp	r7, #98	; 0x62
 8006c22:	d80a      	bhi.n	8006c3a <_printf_i+0x32>
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	f000 80d8 	beq.w	8006dda <_printf_i+0x1d2>
 8006c2a:	2f58      	cmp	r7, #88	; 0x58
 8006c2c:	f000 80a3 	beq.w	8006d76 <_printf_i+0x16e>
 8006c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c38:	e03a      	b.n	8006cb0 <_printf_i+0xa8>
 8006c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c3e:	2b15      	cmp	r3, #21
 8006c40:	d8f6      	bhi.n	8006c30 <_printf_i+0x28>
 8006c42:	a101      	add	r1, pc, #4	; (adr r1, 8006c48 <_printf_i+0x40>)
 8006c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006c31 	.word	0x08006c31
 8006c54:	08006c31 	.word	0x08006c31
 8006c58:	08006c31 	.word	0x08006c31
 8006c5c:	08006c31 	.word	0x08006c31
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006c31 	.word	0x08006c31
 8006c68:	08006c31 	.word	0x08006c31
 8006c6c:	08006c31 	.word	0x08006c31
 8006c70:	08006c31 	.word	0x08006c31
 8006c74:	08006dc1 	.word	0x08006dc1
 8006c78:	08006ce5 	.word	0x08006ce5
 8006c7c:	08006da3 	.word	0x08006da3
 8006c80:	08006c31 	.word	0x08006c31
 8006c84:	08006c31 	.word	0x08006c31
 8006c88:	08006de3 	.word	0x08006de3
 8006c8c:	08006c31 	.word	0x08006c31
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006c31 	.word	0x08006c31
 8006c98:	08006c31 	.word	0x08006c31
 8006c9c:	08006dab 	.word	0x08006dab
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	602a      	str	r2, [r5, #0]
 8006ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0a3      	b.n	8006dfc <_printf_i+0x1f4>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	6829      	ldr	r1, [r5, #0]
 8006cb8:	0606      	lsls	r6, r0, #24
 8006cba:	f101 0304 	add.w	r3, r1, #4
 8006cbe:	d50a      	bpl.n	8006cd6 <_printf_i+0xce>
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	2e00      	cmp	r6, #0
 8006cc6:	da03      	bge.n	8006cd0 <_printf_i+0xc8>
 8006cc8:	232d      	movs	r3, #45	; 0x2d
 8006cca:	4276      	negs	r6, r6
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd0:	485e      	ldr	r0, [pc, #376]	; (8006e4c <_printf_i+0x244>)
 8006cd2:	230a      	movs	r3, #10
 8006cd4:	e019      	b.n	8006d0a <_printf_i+0x102>
 8006cd6:	680e      	ldr	r6, [r1, #0]
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cde:	bf18      	it	ne
 8006ce0:	b236      	sxthne	r6, r6
 8006ce2:	e7ef      	b.n	8006cc4 <_printf_i+0xbc>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	1d19      	adds	r1, r3, #4
 8006cea:	6029      	str	r1, [r5, #0]
 8006cec:	0601      	lsls	r1, r0, #24
 8006cee:	d501      	bpl.n	8006cf4 <_printf_i+0xec>
 8006cf0:	681e      	ldr	r6, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <_printf_i+0xf2>
 8006cf4:	0646      	lsls	r6, r0, #25
 8006cf6:	d5fb      	bpl.n	8006cf0 <_printf_i+0xe8>
 8006cf8:	881e      	ldrh	r6, [r3, #0]
 8006cfa:	4854      	ldr	r0, [pc, #336]	; (8006e4c <_printf_i+0x244>)
 8006cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cfe:	bf0c      	ite	eq
 8006d00:	2308      	moveq	r3, #8
 8006d02:	230a      	movne	r3, #10
 8006d04:	2100      	movs	r1, #0
 8006d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d0a:	6865      	ldr	r5, [r4, #4]
 8006d0c:	60a5      	str	r5, [r4, #8]
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	bfa2      	ittt	ge
 8006d12:	6821      	ldrge	r1, [r4, #0]
 8006d14:	f021 0104 	bicge.w	r1, r1, #4
 8006d18:	6021      	strge	r1, [r4, #0]
 8006d1a:	b90e      	cbnz	r6, 8006d20 <_printf_i+0x118>
 8006d1c:	2d00      	cmp	r5, #0
 8006d1e:	d04d      	beq.n	8006dbc <_printf_i+0x1b4>
 8006d20:	4615      	mov	r5, r2
 8006d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d26:	fb03 6711 	mls	r7, r3, r1, r6
 8006d2a:	5dc7      	ldrb	r7, [r0, r7]
 8006d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d30:	4637      	mov	r7, r6
 8006d32:	42bb      	cmp	r3, r7
 8006d34:	460e      	mov	r6, r1
 8006d36:	d9f4      	bls.n	8006d22 <_printf_i+0x11a>
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d10b      	bne.n	8006d54 <_printf_i+0x14c>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	07de      	lsls	r6, r3, #31
 8006d40:	d508      	bpl.n	8006d54 <_printf_i+0x14c>
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	6861      	ldr	r1, [r4, #4]
 8006d46:	4299      	cmp	r1, r3
 8006d48:	bfde      	ittt	le
 8006d4a:	2330      	movle	r3, #48	; 0x30
 8006d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d54:	1b52      	subs	r2, r2, r5
 8006d56:	6122      	str	r2, [r4, #16]
 8006d58:	f8cd a000 	str.w	sl, [sp]
 8006d5c:	464b      	mov	r3, r9
 8006d5e:	aa03      	add	r2, sp, #12
 8006d60:	4621      	mov	r1, r4
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7ff fee2 	bl	8006b2c <_printf_common>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d14c      	bne.n	8006e06 <_printf_i+0x1fe>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b004      	add	sp, #16
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	4835      	ldr	r0, [pc, #212]	; (8006e4c <_printf_i+0x244>)
 8006d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d84:	6029      	str	r1, [r5, #0]
 8006d86:	061d      	lsls	r5, r3, #24
 8006d88:	d514      	bpl.n	8006db4 <_printf_i+0x1ac>
 8006d8a:	07df      	lsls	r7, r3, #31
 8006d8c:	bf44      	itt	mi
 8006d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d92:	6023      	strmi	r3, [r4, #0]
 8006d94:	b91e      	cbnz	r6, 8006d9e <_printf_i+0x196>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f023 0320 	bic.w	r3, r3, #32
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	2310      	movs	r3, #16
 8006da0:	e7b0      	b.n	8006d04 <_printf_i+0xfc>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	f043 0320 	orr.w	r3, r3, #32
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	2378      	movs	r3, #120	; 0x78
 8006dac:	4828      	ldr	r0, [pc, #160]	; (8006e50 <_printf_i+0x248>)
 8006dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006db2:	e7e3      	b.n	8006d7c <_printf_i+0x174>
 8006db4:	0659      	lsls	r1, r3, #25
 8006db6:	bf48      	it	mi
 8006db8:	b2b6      	uxthmi	r6, r6
 8006dba:	e7e6      	b.n	8006d8a <_printf_i+0x182>
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	e7bb      	b.n	8006d38 <_printf_i+0x130>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	6826      	ldr	r6, [r4, #0]
 8006dc4:	6961      	ldr	r1, [r4, #20]
 8006dc6:	1d18      	adds	r0, r3, #4
 8006dc8:	6028      	str	r0, [r5, #0]
 8006dca:	0635      	lsls	r5, r6, #24
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0x1cc>
 8006dd0:	6019      	str	r1, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0x1d2>
 8006dd4:	0670      	lsls	r0, r6, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0x1c8>
 8006dd8:	8019      	strh	r1, [r3, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	4615      	mov	r5, r2
 8006de0:	e7ba      	b.n	8006d58 <_printf_i+0x150>
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	602a      	str	r2, [r5, #0]
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	2100      	movs	r1, #0
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7f9 fa2e 	bl	8000250 <memchr>
 8006df4:	b108      	cbz	r0, 8006dfa <_printf_i+0x1f2>
 8006df6:	1b40      	subs	r0, r0, r5
 8006df8:	6060      	str	r0, [r4, #4]
 8006dfa:	6863      	ldr	r3, [r4, #4]
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e04:	e7a8      	b.n	8006d58 <_printf_i+0x150>
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d0ab      	beq.n	8006d6c <_printf_i+0x164>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	079b      	lsls	r3, r3, #30
 8006e18:	d413      	bmi.n	8006e42 <_printf_i+0x23a>
 8006e1a:	68e0      	ldr	r0, [r4, #12]
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	bfb8      	it	lt
 8006e22:	4618      	movlt	r0, r3
 8006e24:	e7a4      	b.n	8006d70 <_printf_i+0x168>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4632      	mov	r2, r6
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	47d0      	blx	sl
 8006e30:	3001      	adds	r0, #1
 8006e32:	d09b      	beq.n	8006d6c <_printf_i+0x164>
 8006e34:	3501      	adds	r5, #1
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	9903      	ldr	r1, [sp, #12]
 8006e3a:	1a5b      	subs	r3, r3, r1
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dcf2      	bgt.n	8006e26 <_printf_i+0x21e>
 8006e40:	e7eb      	b.n	8006e1a <_printf_i+0x212>
 8006e42:	2500      	movs	r5, #0
 8006e44:	f104 0619 	add.w	r6, r4, #25
 8006e48:	e7f5      	b.n	8006e36 <_printf_i+0x22e>
 8006e4a:	bf00      	nop
 8006e4c:	08008d96 	.word	0x08008d96
 8006e50:	08008da7 	.word	0x08008da7

08006e54 <iprintf>:
 8006e54:	b40f      	push	{r0, r1, r2, r3}
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <iprintf+0x2c>)
 8006e58:	b513      	push	{r0, r1, r4, lr}
 8006e5a:	681c      	ldr	r4, [r3, #0]
 8006e5c:	b124      	cbz	r4, 8006e68 <iprintf+0x14>
 8006e5e:	69a3      	ldr	r3, [r4, #24]
 8006e60:	b913      	cbnz	r3, 8006e68 <iprintf+0x14>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7ff fa44 	bl	80062f0 <__sinit>
 8006e68:	ab05      	add	r3, sp, #20
 8006e6a:	9a04      	ldr	r2, [sp, #16]
 8006e6c:	68a1      	ldr	r1, [r4, #8]
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	4620      	mov	r0, r4
 8006e72:	f001 fbdf 	bl	8008634 <_vfiprintf_r>
 8006e76:	b002      	add	sp, #8
 8006e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7c:	b004      	add	sp, #16
 8006e7e:	4770      	bx	lr
 8006e80:	20000010 	.word	0x20000010

08006e84 <cleanup_glue>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	460c      	mov	r4, r1
 8006e88:	6809      	ldr	r1, [r1, #0]
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b109      	cbz	r1, 8006e92 <cleanup_glue+0xe>
 8006e8e:	f7ff fff9 	bl	8006e84 <cleanup_glue>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e9a:	f001 bb55 	b.w	8008548 <_free_r>
	...

08006ea0 <_reclaim_reent>:
 8006ea0:	4b2c      	ldr	r3, [pc, #176]	; (8006f54 <_reclaim_reent+0xb4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4283      	cmp	r3, r0
 8006ea6:	b570      	push	{r4, r5, r6, lr}
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	d051      	beq.n	8006f50 <_reclaim_reent+0xb0>
 8006eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006eae:	b143      	cbz	r3, 8006ec2 <_reclaim_reent+0x22>
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d14a      	bne.n	8006f4c <_reclaim_reent+0xac>
 8006eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	b111      	cbz	r1, 8006ec2 <_reclaim_reent+0x22>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f001 fb43 	bl	8008548 <_free_r>
 8006ec2:	6961      	ldr	r1, [r4, #20]
 8006ec4:	b111      	cbz	r1, 8006ecc <_reclaim_reent+0x2c>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 fb3e 	bl	8008548 <_free_r>
 8006ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ece:	b111      	cbz	r1, 8006ed6 <_reclaim_reent+0x36>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f001 fb39 	bl	8008548 <_free_r>
 8006ed6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ed8:	b111      	cbz	r1, 8006ee0 <_reclaim_reent+0x40>
 8006eda:	4620      	mov	r0, r4
 8006edc:	f001 fb34 	bl	8008548 <_free_r>
 8006ee0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ee2:	b111      	cbz	r1, 8006eea <_reclaim_reent+0x4a>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f001 fb2f 	bl	8008548 <_free_r>
 8006eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006eec:	b111      	cbz	r1, 8006ef4 <_reclaim_reent+0x54>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f001 fb2a 	bl	8008548 <_free_r>
 8006ef4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006ef6:	b111      	cbz	r1, 8006efe <_reclaim_reent+0x5e>
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f001 fb25 	bl	8008548 <_free_r>
 8006efe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f00:	b111      	cbz	r1, 8006f08 <_reclaim_reent+0x68>
 8006f02:	4620      	mov	r0, r4
 8006f04:	f001 fb20 	bl	8008548 <_free_r>
 8006f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0a:	b111      	cbz	r1, 8006f12 <_reclaim_reent+0x72>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f001 fb1b 	bl	8008548 <_free_r>
 8006f12:	69a3      	ldr	r3, [r4, #24]
 8006f14:	b1e3      	cbz	r3, 8006f50 <_reclaim_reent+0xb0>
 8006f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f18:	4620      	mov	r0, r4
 8006f1a:	4798      	blx	r3
 8006f1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f1e:	b1b9      	cbz	r1, 8006f50 <_reclaim_reent+0xb0>
 8006f20:	4620      	mov	r0, r4
 8006f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f26:	f7ff bfad 	b.w	8006e84 <cleanup_glue>
 8006f2a:	5949      	ldr	r1, [r1, r5]
 8006f2c:	b941      	cbnz	r1, 8006f40 <_reclaim_reent+0xa0>
 8006f2e:	3504      	adds	r5, #4
 8006f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f32:	2d80      	cmp	r5, #128	; 0x80
 8006f34:	68d9      	ldr	r1, [r3, #12]
 8006f36:	d1f8      	bne.n	8006f2a <_reclaim_reent+0x8a>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 fb05 	bl	8008548 <_free_r>
 8006f3e:	e7ba      	b.n	8006eb6 <_reclaim_reent+0x16>
 8006f40:	680e      	ldr	r6, [r1, #0]
 8006f42:	4620      	mov	r0, r4
 8006f44:	f001 fb00 	bl	8008548 <_free_r>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	e7ef      	b.n	8006f2c <_reclaim_reent+0x8c>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	e7ef      	b.n	8006f30 <_reclaim_reent+0x90>
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	bf00      	nop
 8006f54:	20000010 	.word	0x20000010

08006f58 <_sbrk_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d06      	ldr	r5, [pc, #24]	; (8006f74 <_sbrk_r+0x1c>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fa fa9e 	bl	80014a4 <_sbrk>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_sbrk_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_sbrk_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000440c 	.word	0x2000440c

08006f78 <__sread>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f80:	f001 fc88 	bl	8008894 <_read_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	bfab      	itete	ge
 8006f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f8c:	181b      	addge	r3, r3, r0
 8006f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f92:	bfac      	ite	ge
 8006f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f96:	81a3      	strhlt	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__swrite>:
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	898b      	ldrh	r3, [r1, #12]
 8006fa2:	05db      	lsls	r3, r3, #23
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4616      	mov	r6, r2
 8006faa:	d505      	bpl.n	8006fb8 <__swrite+0x1e>
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f000 ff08 	bl	8007dc8 <_lseek_r>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	4628      	mov	r0, r5
 8006fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fce:	f000 b817 	b.w	8007000 <_write_r>

08006fd2 <__sseek>:
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 fef5 	bl	8007dc8 <_lseek_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	bf15      	itete	ne
 8006fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fee:	81a3      	strheq	r3, [r4, #12]
 8006ff0:	bf18      	it	ne
 8006ff2:	81a3      	strhne	r3, [r4, #12]
 8006ff4:	bd10      	pop	{r4, pc}

08006ff6 <__sclose>:
 8006ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffa:	f000 b813 	b.w	8007024 <_close_r>
	...

08007000 <_write_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_write_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa f9f7 	bl	8001402 <_write>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_write_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_write_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	2000440c 	.word	0x2000440c

08007024 <_close_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d06      	ldr	r5, [pc, #24]	; (8007040 <_close_r+0x1c>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	f7fa fa03 	bl	800143a <_close>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_close_r+0x1a>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_close_r+0x1a>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	2000440c 	.word	0x2000440c

08007044 <quorem>:
 8007044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	6903      	ldr	r3, [r0, #16]
 800704a:	690c      	ldr	r4, [r1, #16]
 800704c:	42a3      	cmp	r3, r4
 800704e:	4607      	mov	r7, r0
 8007050:	f2c0 8081 	blt.w	8007156 <quorem+0x112>
 8007054:	3c01      	subs	r4, #1
 8007056:	f101 0814 	add.w	r8, r1, #20
 800705a:	f100 0514 	add.w	r5, r0, #20
 800705e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800706c:	3301      	adds	r3, #1
 800706e:	429a      	cmp	r2, r3
 8007070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007078:	fbb2 f6f3 	udiv	r6, r2, r3
 800707c:	d331      	bcc.n	80070e2 <quorem+0x9e>
 800707e:	f04f 0e00 	mov.w	lr, #0
 8007082:	4640      	mov	r0, r8
 8007084:	46ac      	mov	ip, r5
 8007086:	46f2      	mov	sl, lr
 8007088:	f850 2b04 	ldr.w	r2, [r0], #4
 800708c:	b293      	uxth	r3, r2
 800708e:	fb06 e303 	mla	r3, r6, r3, lr
 8007092:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007096:	b29b      	uxth	r3, r3
 8007098:	ebaa 0303 	sub.w	r3, sl, r3
 800709c:	f8dc a000 	ldr.w	sl, [ip]
 80070a0:	0c12      	lsrs	r2, r2, #16
 80070a2:	fa13 f38a 	uxtah	r3, r3, sl
 80070a6:	fb06 e202 	mla	r2, r6, r2, lr
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	9b00      	ldr	r3, [sp, #0]
 80070ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070b2:	b292      	uxth	r2, r2
 80070b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80070c0:	4581      	cmp	r9, r0
 80070c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070c6:	f84c 3b04 	str.w	r3, [ip], #4
 80070ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ce:	d2db      	bcs.n	8007088 <quorem+0x44>
 80070d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80070d4:	b92b      	cbnz	r3, 80070e2 <quorem+0x9e>
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	3b04      	subs	r3, #4
 80070da:	429d      	cmp	r5, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	d32e      	bcc.n	800713e <quorem+0xfa>
 80070e0:	613c      	str	r4, [r7, #16]
 80070e2:	4638      	mov	r0, r7
 80070e4:	f001 f918 	bl	8008318 <__mcmp>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	db24      	blt.n	8007136 <quorem+0xf2>
 80070ec:	3601      	adds	r6, #1
 80070ee:	4628      	mov	r0, r5
 80070f0:	f04f 0c00 	mov.w	ip, #0
 80070f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80070f8:	f8d0 e000 	ldr.w	lr, [r0]
 80070fc:	b293      	uxth	r3, r2
 80070fe:	ebac 0303 	sub.w	r3, ip, r3
 8007102:	0c12      	lsrs	r2, r2, #16
 8007104:	fa13 f38e 	uxtah	r3, r3, lr
 8007108:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800710c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007110:	b29b      	uxth	r3, r3
 8007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007116:	45c1      	cmp	r9, r8
 8007118:	f840 3b04 	str.w	r3, [r0], #4
 800711c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007120:	d2e8      	bcs.n	80070f4 <quorem+0xb0>
 8007122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800712a:	b922      	cbnz	r2, 8007136 <quorem+0xf2>
 800712c:	3b04      	subs	r3, #4
 800712e:	429d      	cmp	r5, r3
 8007130:	461a      	mov	r2, r3
 8007132:	d30a      	bcc.n	800714a <quorem+0x106>
 8007134:	613c      	str	r4, [r7, #16]
 8007136:	4630      	mov	r0, r6
 8007138:	b003      	add	sp, #12
 800713a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	3b04      	subs	r3, #4
 8007142:	2a00      	cmp	r2, #0
 8007144:	d1cc      	bne.n	80070e0 <quorem+0x9c>
 8007146:	3c01      	subs	r4, #1
 8007148:	e7c7      	b.n	80070da <quorem+0x96>
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	3b04      	subs	r3, #4
 800714e:	2a00      	cmp	r2, #0
 8007150:	d1f0      	bne.n	8007134 <quorem+0xf0>
 8007152:	3c01      	subs	r4, #1
 8007154:	e7eb      	b.n	800712e <quorem+0xea>
 8007156:	2000      	movs	r0, #0
 8007158:	e7ee      	b.n	8007138 <quorem+0xf4>
 800715a:	0000      	movs	r0, r0
 800715c:	0000      	movs	r0, r0
	...

08007160 <_dtoa_r>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	ed2d 8b02 	vpush	{d8}
 8007168:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800716a:	b091      	sub	sp, #68	; 0x44
 800716c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007170:	ec59 8b10 	vmov	r8, r9, d0
 8007174:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007176:	9106      	str	r1, [sp, #24]
 8007178:	4606      	mov	r6, r0
 800717a:	9208      	str	r2, [sp, #32]
 800717c:	930c      	str	r3, [sp, #48]	; 0x30
 800717e:	b975      	cbnz	r5, 800719e <_dtoa_r+0x3e>
 8007180:	2010      	movs	r0, #16
 8007182:	f000 fe33 	bl	8007dec <malloc>
 8007186:	4602      	mov	r2, r0
 8007188:	6270      	str	r0, [r6, #36]	; 0x24
 800718a:	b920      	cbnz	r0, 8007196 <_dtoa_r+0x36>
 800718c:	4baa      	ldr	r3, [pc, #680]	; (8007438 <_dtoa_r+0x2d8>)
 800718e:	21ea      	movs	r1, #234	; 0xea
 8007190:	48aa      	ldr	r0, [pc, #680]	; (800743c <_dtoa_r+0x2dc>)
 8007192:	f001 fc51 	bl	8008a38 <__assert_func>
 8007196:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800719a:	6005      	str	r5, [r0, #0]
 800719c:	60c5      	str	r5, [r0, #12]
 800719e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80071a0:	6819      	ldr	r1, [r3, #0]
 80071a2:	b151      	cbz	r1, 80071ba <_dtoa_r+0x5a>
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	604a      	str	r2, [r1, #4]
 80071a8:	2301      	movs	r3, #1
 80071aa:	4093      	lsls	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
 80071ae:	4630      	mov	r0, r6
 80071b0:	f000 fe70 	bl	8007e94 <_Bfree>
 80071b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f1b9 0300 	subs.w	r3, r9, #0
 80071be:	bfbb      	ittet	lt
 80071c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071c4:	9303      	strlt	r3, [sp, #12]
 80071c6:	2300      	movge	r3, #0
 80071c8:	2201      	movlt	r2, #1
 80071ca:	bfac      	ite	ge
 80071cc:	6023      	strge	r3, [r4, #0]
 80071ce:	6022      	strlt	r2, [r4, #0]
 80071d0:	4b9b      	ldr	r3, [pc, #620]	; (8007440 <_dtoa_r+0x2e0>)
 80071d2:	9c03      	ldr	r4, [sp, #12]
 80071d4:	43a3      	bics	r3, r4
 80071d6:	d11c      	bne.n	8007212 <_dtoa_r+0xb2>
 80071d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071da:	f242 730f 	movw	r3, #9999	; 0x270f
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80071e4:	ea53 0308 	orrs.w	r3, r3, r8
 80071e8:	f000 84fd 	beq.w	8007be6 <_dtoa_r+0xa86>
 80071ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071ee:	b963      	cbnz	r3, 800720a <_dtoa_r+0xaa>
 80071f0:	4b94      	ldr	r3, [pc, #592]	; (8007444 <_dtoa_r+0x2e4>)
 80071f2:	e01f      	b.n	8007234 <_dtoa_r+0xd4>
 80071f4:	4b94      	ldr	r3, [pc, #592]	; (8007448 <_dtoa_r+0x2e8>)
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	3308      	adds	r3, #8
 80071fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	9801      	ldr	r0, [sp, #4]
 8007200:	b011      	add	sp, #68	; 0x44
 8007202:	ecbd 8b02 	vpop	{d8}
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	4b8e      	ldr	r3, [pc, #568]	; (8007444 <_dtoa_r+0x2e4>)
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	3303      	adds	r3, #3
 8007210:	e7f3      	b.n	80071fa <_dtoa_r+0x9a>
 8007212:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007216:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	d10b      	bne.n	8007238 <_dtoa_r+0xd8>
 8007220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007222:	2301      	movs	r3, #1
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 84d9 	beq.w	8007be0 <_dtoa_r+0xa80>
 800722e:	4887      	ldr	r0, [pc, #540]	; (800744c <_dtoa_r+0x2ec>)
 8007230:	6018      	str	r0, [r3, #0]
 8007232:	1e43      	subs	r3, r0, #1
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	e7e2      	b.n	80071fe <_dtoa_r+0x9e>
 8007238:	a90f      	add	r1, sp, #60	; 0x3c
 800723a:	aa0e      	add	r2, sp, #56	; 0x38
 800723c:	4630      	mov	r0, r6
 800723e:	eeb0 0b48 	vmov.f64	d0, d8
 8007242:	f001 f90f 	bl	8008464 <__d2b>
 8007246:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800724a:	4605      	mov	r5, r0
 800724c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800724e:	2900      	cmp	r1, #0
 8007250:	d046      	beq.n	80072e0 <_dtoa_r+0x180>
 8007252:	ee18 4a90 	vmov	r4, s17
 8007256:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800725a:	ec53 2b18 	vmov	r2, r3, d8
 800725e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007262:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007266:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800726a:	2400      	movs	r4, #0
 800726c:	ec43 2b16 	vmov	d6, r2, r3
 8007270:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007274:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007420 <_dtoa_r+0x2c0>
 8007278:	ee36 7b47 	vsub.f64	d7, d6, d7
 800727c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007428 <_dtoa_r+0x2c8>
 8007280:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007284:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007430 <_dtoa_r+0x2d0>
 8007288:	ee07 1a90 	vmov	s15, r1
 800728c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007290:	eeb0 7b46 	vmov.f64	d7, d6
 8007294:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007298:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800729c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a4:	ee16 ba90 	vmov	fp, s13
 80072a8:	940a      	str	r4, [sp, #40]	; 0x28
 80072aa:	d508      	bpl.n	80072be <_dtoa_r+0x15e>
 80072ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80072b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80072b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b8:	bf18      	it	ne
 80072ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80072be:	f1bb 0f16 	cmp.w	fp, #22
 80072c2:	d82f      	bhi.n	8007324 <_dtoa_r+0x1c4>
 80072c4:	4b62      	ldr	r3, [pc, #392]	; (8007450 <_dtoa_r+0x2f0>)
 80072c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072ca:	ed93 7b00 	vldr	d7, [r3]
 80072ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	d501      	bpl.n	80072dc <_dtoa_r+0x17c>
 80072d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072dc:	2300      	movs	r3, #0
 80072de:	e022      	b.n	8007326 <_dtoa_r+0x1c6>
 80072e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072e2:	4401      	add	r1, r0
 80072e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	bfc1      	itttt	gt
 80072ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072f0:	fa04 f303 	lslgt.w	r3, r4, r3
 80072f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80072f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80072fc:	bfd6      	itet	le
 80072fe:	f1c3 0320 	rsble	r3, r3, #32
 8007302:	ea43 0808 	orrgt.w	r8, r3, r8
 8007306:	fa08 f803 	lslle.w	r8, r8, r3
 800730a:	ee07 8a90 	vmov	s15, r8
 800730e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007312:	3901      	subs	r1, #1
 8007314:	ee17 4a90 	vmov	r4, s15
 8007318:	ec53 2b17 	vmov	r2, r3, d7
 800731c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007320:	2401      	movs	r4, #1
 8007322:	e7a3      	b.n	800726c <_dtoa_r+0x10c>
 8007324:	2301      	movs	r3, #1
 8007326:	930b      	str	r3, [sp, #44]	; 0x2c
 8007328:	1a43      	subs	r3, r0, r1
 800732a:	1e5a      	subs	r2, r3, #1
 800732c:	bf45      	ittet	mi
 800732e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007332:	9304      	strmi	r3, [sp, #16]
 8007334:	2300      	movpl	r3, #0
 8007336:	2300      	movmi	r3, #0
 8007338:	9205      	str	r2, [sp, #20]
 800733a:	bf54      	ite	pl
 800733c:	9304      	strpl	r3, [sp, #16]
 800733e:	9305      	strmi	r3, [sp, #20]
 8007340:	f1bb 0f00 	cmp.w	fp, #0
 8007344:	db18      	blt.n	8007378 <_dtoa_r+0x218>
 8007346:	9b05      	ldr	r3, [sp, #20]
 8007348:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800734c:	445b      	add	r3, fp
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	2300      	movs	r3, #0
 8007352:	9a06      	ldr	r2, [sp, #24]
 8007354:	2a09      	cmp	r2, #9
 8007356:	d849      	bhi.n	80073ec <_dtoa_r+0x28c>
 8007358:	2a05      	cmp	r2, #5
 800735a:	bfc4      	itt	gt
 800735c:	3a04      	subgt	r2, #4
 800735e:	9206      	strgt	r2, [sp, #24]
 8007360:	9a06      	ldr	r2, [sp, #24]
 8007362:	f1a2 0202 	sub.w	r2, r2, #2
 8007366:	bfcc      	ite	gt
 8007368:	2400      	movgt	r4, #0
 800736a:	2401      	movle	r4, #1
 800736c:	2a03      	cmp	r2, #3
 800736e:	d848      	bhi.n	8007402 <_dtoa_r+0x2a2>
 8007370:	e8df f002 	tbb	[pc, r2]
 8007374:	3a2c2e0b 	.word	0x3a2c2e0b
 8007378:	9b04      	ldr	r3, [sp, #16]
 800737a:	2200      	movs	r2, #0
 800737c:	eba3 030b 	sub.w	r3, r3, fp
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	9209      	str	r2, [sp, #36]	; 0x24
 8007384:	f1cb 0300 	rsb	r3, fp, #0
 8007388:	e7e3      	b.n	8007352 <_dtoa_r+0x1f2>
 800738a:	2200      	movs	r2, #0
 800738c:	9207      	str	r2, [sp, #28]
 800738e:	9a08      	ldr	r2, [sp, #32]
 8007390:	2a00      	cmp	r2, #0
 8007392:	dc39      	bgt.n	8007408 <_dtoa_r+0x2a8>
 8007394:	f04f 0a01 	mov.w	sl, #1
 8007398:	46d1      	mov	r9, sl
 800739a:	4652      	mov	r2, sl
 800739c:	f8cd a020 	str.w	sl, [sp, #32]
 80073a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80073a2:	2100      	movs	r1, #0
 80073a4:	6079      	str	r1, [r7, #4]
 80073a6:	2004      	movs	r0, #4
 80073a8:	f100 0c14 	add.w	ip, r0, #20
 80073ac:	4594      	cmp	ip, r2
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	d92f      	bls.n	8007412 <_dtoa_r+0x2b2>
 80073b2:	4630      	mov	r0, r6
 80073b4:	930d      	str	r3, [sp, #52]	; 0x34
 80073b6:	f000 fd2d 	bl	8007e14 <_Balloc>
 80073ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073bc:	9001      	str	r0, [sp, #4]
 80073be:	4602      	mov	r2, r0
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d149      	bne.n	8007458 <_dtoa_r+0x2f8>
 80073c4:	4b23      	ldr	r3, [pc, #140]	; (8007454 <_dtoa_r+0x2f4>)
 80073c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073ca:	e6e1      	b.n	8007190 <_dtoa_r+0x30>
 80073cc:	2201      	movs	r2, #1
 80073ce:	e7dd      	b.n	800738c <_dtoa_r+0x22c>
 80073d0:	2200      	movs	r2, #0
 80073d2:	9207      	str	r2, [sp, #28]
 80073d4:	9a08      	ldr	r2, [sp, #32]
 80073d6:	eb0b 0a02 	add.w	sl, fp, r2
 80073da:	f10a 0901 	add.w	r9, sl, #1
 80073de:	464a      	mov	r2, r9
 80073e0:	2a01      	cmp	r2, #1
 80073e2:	bfb8      	it	lt
 80073e4:	2201      	movlt	r2, #1
 80073e6:	e7db      	b.n	80073a0 <_dtoa_r+0x240>
 80073e8:	2201      	movs	r2, #1
 80073ea:	e7f2      	b.n	80073d2 <_dtoa_r+0x272>
 80073ec:	2401      	movs	r4, #1
 80073ee:	2200      	movs	r2, #0
 80073f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80073f4:	f04f 3aff 	mov.w	sl, #4294967295
 80073f8:	2100      	movs	r1, #0
 80073fa:	46d1      	mov	r9, sl
 80073fc:	2212      	movs	r2, #18
 80073fe:	9108      	str	r1, [sp, #32]
 8007400:	e7ce      	b.n	80073a0 <_dtoa_r+0x240>
 8007402:	2201      	movs	r2, #1
 8007404:	9207      	str	r2, [sp, #28]
 8007406:	e7f5      	b.n	80073f4 <_dtoa_r+0x294>
 8007408:	f8dd a020 	ldr.w	sl, [sp, #32]
 800740c:	46d1      	mov	r9, sl
 800740e:	4652      	mov	r2, sl
 8007410:	e7c6      	b.n	80073a0 <_dtoa_r+0x240>
 8007412:	3101      	adds	r1, #1
 8007414:	6079      	str	r1, [r7, #4]
 8007416:	0040      	lsls	r0, r0, #1
 8007418:	e7c6      	b.n	80073a8 <_dtoa_r+0x248>
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	08008dc5 	.word	0x08008dc5
 800743c:	08008ddc 	.word	0x08008ddc
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	08008dc1 	.word	0x08008dc1
 8007448:	08008db8 	.word	0x08008db8
 800744c:	08008d95 	.word	0x08008d95
 8007450:	08008ed0 	.word	0x08008ed0
 8007454:	08008e37 	.word	0x08008e37
 8007458:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800745a:	9901      	ldr	r1, [sp, #4]
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	f1b9 0f0e 	cmp.w	r9, #14
 8007462:	d86c      	bhi.n	800753e <_dtoa_r+0x3de>
 8007464:	2c00      	cmp	r4, #0
 8007466:	d06a      	beq.n	800753e <_dtoa_r+0x3de>
 8007468:	f1bb 0f00 	cmp.w	fp, #0
 800746c:	f340 80a0 	ble.w	80075b0 <_dtoa_r+0x450>
 8007470:	49c1      	ldr	r1, [pc, #772]	; (8007778 <_dtoa_r+0x618>)
 8007472:	f00b 020f 	and.w	r2, fp, #15
 8007476:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800747a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800747e:	ed92 7b00 	vldr	d7, [r2]
 8007482:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007486:	f000 8087 	beq.w	8007598 <_dtoa_r+0x438>
 800748a:	4abc      	ldr	r2, [pc, #752]	; (800777c <_dtoa_r+0x61c>)
 800748c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007490:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007494:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007498:	f001 010f 	and.w	r1, r1, #15
 800749c:	2203      	movs	r2, #3
 800749e:	48b7      	ldr	r0, [pc, #732]	; (800777c <_dtoa_r+0x61c>)
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d17b      	bne.n	800759c <_dtoa_r+0x43c>
 80074a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80074a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80074ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074b2:	2900      	cmp	r1, #0
 80074b4:	f000 80a2 	beq.w	80075fc <_dtoa_r+0x49c>
 80074b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80074bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	f140 8098 	bpl.w	80075fc <_dtoa_r+0x49c>
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	f000 8094 	beq.w	80075fc <_dtoa_r+0x49c>
 80074d4:	f1ba 0f00 	cmp.w	sl, #0
 80074d8:	dd2f      	ble.n	800753a <_dtoa_r+0x3da>
 80074da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80074de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80074ea:	3201      	adds	r2, #1
 80074ec:	4650      	mov	r0, sl
 80074ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80074f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80074f6:	ee07 2a90 	vmov	s15, r2
 80074fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007502:	ee15 4a90 	vmov	r4, s11
 8007506:	ec52 1b15 	vmov	r1, r2, d5
 800750a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800750e:	2800      	cmp	r0, #0
 8007510:	d177      	bne.n	8007602 <_dtoa_r+0x4a2>
 8007512:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007516:	ee36 6b47 	vsub.f64	d6, d6, d7
 800751a:	ec42 1b17 	vmov	d7, r1, r2
 800751e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007526:	f300 8263 	bgt.w	80079f0 <_dtoa_r+0x890>
 800752a:	eeb1 7b47 	vneg.f64	d7, d7
 800752e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	f100 8258 	bmi.w	80079ea <_dtoa_r+0x88a>
 800753a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800753e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007540:	2a00      	cmp	r2, #0
 8007542:	f2c0 811d 	blt.w	8007780 <_dtoa_r+0x620>
 8007546:	f1bb 0f0e 	cmp.w	fp, #14
 800754a:	f300 8119 	bgt.w	8007780 <_dtoa_r+0x620>
 800754e:	4b8a      	ldr	r3, [pc, #552]	; (8007778 <_dtoa_r+0x618>)
 8007550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007554:	ed93 6b00 	vldr	d6, [r3]
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f280 80b7 	bge.w	80076ce <_dtoa_r+0x56e>
 8007560:	f1b9 0f00 	cmp.w	r9, #0
 8007564:	f300 80b3 	bgt.w	80076ce <_dtoa_r+0x56e>
 8007568:	f040 823f 	bne.w	80079ea <_dtoa_r+0x88a>
 800756c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007570:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007578:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	464c      	mov	r4, r9
 8007582:	464f      	mov	r7, r9
 8007584:	f280 8215 	bge.w	80079b2 <_dtoa_r+0x852>
 8007588:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800758c:	2331      	movs	r3, #49	; 0x31
 800758e:	f808 3b01 	strb.w	r3, [r8], #1
 8007592:	f10b 0b01 	add.w	fp, fp, #1
 8007596:	e211      	b.n	80079bc <_dtoa_r+0x85c>
 8007598:	2202      	movs	r2, #2
 800759a:	e780      	b.n	800749e <_dtoa_r+0x33e>
 800759c:	07cc      	lsls	r4, r1, #31
 800759e:	d504      	bpl.n	80075aa <_dtoa_r+0x44a>
 80075a0:	ed90 6b00 	vldr	d6, [r0]
 80075a4:	3201      	adds	r2, #1
 80075a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075aa:	1049      	asrs	r1, r1, #1
 80075ac:	3008      	adds	r0, #8
 80075ae:	e777      	b.n	80074a0 <_dtoa_r+0x340>
 80075b0:	d022      	beq.n	80075f8 <_dtoa_r+0x498>
 80075b2:	f1cb 0100 	rsb	r1, fp, #0
 80075b6:	4a70      	ldr	r2, [pc, #448]	; (8007778 <_dtoa_r+0x618>)
 80075b8:	f001 000f 	and.w	r0, r1, #15
 80075bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80075c0:	ed92 7b00 	vldr	d7, [r2]
 80075c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80075c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075cc:	486b      	ldr	r0, [pc, #428]	; (800777c <_dtoa_r+0x61c>)
 80075ce:	1109      	asrs	r1, r1, #4
 80075d0:	2400      	movs	r4, #0
 80075d2:	2202      	movs	r2, #2
 80075d4:	b929      	cbnz	r1, 80075e2 <_dtoa_r+0x482>
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	f43f af6a 	beq.w	80074b0 <_dtoa_r+0x350>
 80075dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075e0:	e766      	b.n	80074b0 <_dtoa_r+0x350>
 80075e2:	07cf      	lsls	r7, r1, #31
 80075e4:	d505      	bpl.n	80075f2 <_dtoa_r+0x492>
 80075e6:	ed90 6b00 	vldr	d6, [r0]
 80075ea:	3201      	adds	r2, #1
 80075ec:	2401      	movs	r4, #1
 80075ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075f2:	1049      	asrs	r1, r1, #1
 80075f4:	3008      	adds	r0, #8
 80075f6:	e7ed      	b.n	80075d4 <_dtoa_r+0x474>
 80075f8:	2202      	movs	r2, #2
 80075fa:	e759      	b.n	80074b0 <_dtoa_r+0x350>
 80075fc:	465f      	mov	r7, fp
 80075fe:	4648      	mov	r0, r9
 8007600:	e775      	b.n	80074ee <_dtoa_r+0x38e>
 8007602:	ec42 1b17 	vmov	d7, r1, r2
 8007606:	4a5c      	ldr	r2, [pc, #368]	; (8007778 <_dtoa_r+0x618>)
 8007608:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800760c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007610:	9a01      	ldr	r2, [sp, #4]
 8007612:	1814      	adds	r4, r2, r0
 8007614:	9a07      	ldr	r2, [sp, #28]
 8007616:	b352      	cbz	r2, 800766e <_dtoa_r+0x50e>
 8007618:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800761c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007620:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007624:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007628:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800762c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007630:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007634:	ee14 2a90 	vmov	r2, s9
 8007638:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800763c:	3230      	adds	r2, #48	; 0x30
 800763e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007642:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764a:	f808 2b01 	strb.w	r2, [r8], #1
 800764e:	d439      	bmi.n	80076c4 <_dtoa_r+0x564>
 8007650:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007654:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765c:	d472      	bmi.n	8007744 <_dtoa_r+0x5e4>
 800765e:	45a0      	cmp	r8, r4
 8007660:	f43f af6b 	beq.w	800753a <_dtoa_r+0x3da>
 8007664:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007668:	ee26 6b03 	vmul.f64	d6, d6, d3
 800766c:	e7e0      	b.n	8007630 <_dtoa_r+0x4d0>
 800766e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007672:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007676:	4621      	mov	r1, r4
 8007678:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800767c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007680:	ee14 2a90 	vmov	r2, s9
 8007684:	3230      	adds	r2, #48	; 0x30
 8007686:	f808 2b01 	strb.w	r2, [r8], #1
 800768a:	45a0      	cmp	r8, r4
 800768c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007690:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007694:	d118      	bne.n	80076c8 <_dtoa_r+0x568>
 8007696:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800769a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800769e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80076a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a6:	dc4d      	bgt.n	8007744 <_dtoa_r+0x5e4>
 80076a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	f57f af41 	bpl.w	800753a <_dtoa_r+0x3da>
 80076b8:	4688      	mov	r8, r1
 80076ba:	3901      	subs	r1, #1
 80076bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80076c0:	2b30      	cmp	r3, #48	; 0x30
 80076c2:	d0f9      	beq.n	80076b8 <_dtoa_r+0x558>
 80076c4:	46bb      	mov	fp, r7
 80076c6:	e02a      	b.n	800771e <_dtoa_r+0x5be>
 80076c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80076cc:	e7d6      	b.n	800767c <_dtoa_r+0x51c>
 80076ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80076d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80076de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80076e2:	ee15 3a10 	vmov	r3, s10
 80076e6:	3330      	adds	r3, #48	; 0x30
 80076e8:	f808 3b01 	strb.w	r3, [r8], #1
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	eba8 0303 	sub.w	r3, r8, r3
 80076f2:	4599      	cmp	r9, r3
 80076f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80076f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80076fc:	d133      	bne.n	8007766 <_dtoa_r+0x606>
 80076fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007702:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	dc1a      	bgt.n	8007742 <_dtoa_r+0x5e2>
 800770c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007714:	d103      	bne.n	800771e <_dtoa_r+0x5be>
 8007716:	ee15 3a10 	vmov	r3, s10
 800771a:	07d9      	lsls	r1, r3, #31
 800771c:	d411      	bmi.n	8007742 <_dtoa_r+0x5e2>
 800771e:	4629      	mov	r1, r5
 8007720:	4630      	mov	r0, r6
 8007722:	f000 fbb7 	bl	8007e94 <_Bfree>
 8007726:	2300      	movs	r3, #0
 8007728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800772a:	f888 3000 	strb.w	r3, [r8]
 800772e:	f10b 0301 	add.w	r3, fp, #1
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007736:	2b00      	cmp	r3, #0
 8007738:	f43f ad61 	beq.w	80071fe <_dtoa_r+0x9e>
 800773c:	f8c3 8000 	str.w	r8, [r3]
 8007740:	e55d      	b.n	80071fe <_dtoa_r+0x9e>
 8007742:	465f      	mov	r7, fp
 8007744:	4643      	mov	r3, r8
 8007746:	4698      	mov	r8, r3
 8007748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774c:	2a39      	cmp	r2, #57	; 0x39
 800774e:	d106      	bne.n	800775e <_dtoa_r+0x5fe>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d1f7      	bne.n	8007746 <_dtoa_r+0x5e6>
 8007756:	9901      	ldr	r1, [sp, #4]
 8007758:	2230      	movs	r2, #48	; 0x30
 800775a:	3701      	adds	r7, #1
 800775c:	700a      	strb	r2, [r1, #0]
 800775e:	781a      	ldrb	r2, [r3, #0]
 8007760:	3201      	adds	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e7ae      	b.n	80076c4 <_dtoa_r+0x564>
 8007766:	ee27 7b04 	vmul.f64	d7, d7, d4
 800776a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007772:	d1b2      	bne.n	80076da <_dtoa_r+0x57a>
 8007774:	e7d3      	b.n	800771e <_dtoa_r+0x5be>
 8007776:	bf00      	nop
 8007778:	08008ed0 	.word	0x08008ed0
 800777c:	08008ea8 	.word	0x08008ea8
 8007780:	9907      	ldr	r1, [sp, #28]
 8007782:	2900      	cmp	r1, #0
 8007784:	f000 80d0 	beq.w	8007928 <_dtoa_r+0x7c8>
 8007788:	9906      	ldr	r1, [sp, #24]
 800778a:	2901      	cmp	r1, #1
 800778c:	f300 80b4 	bgt.w	80078f8 <_dtoa_r+0x798>
 8007790:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007792:	2900      	cmp	r1, #0
 8007794:	f000 80ac 	beq.w	80078f0 <_dtoa_r+0x790>
 8007798:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800779c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80077a0:	461c      	mov	r4, r3
 80077a2:	930a      	str	r3, [sp, #40]	; 0x28
 80077a4:	9b04      	ldr	r3, [sp, #16]
 80077a6:	4413      	add	r3, r2
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	2101      	movs	r1, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	4630      	mov	r0, r6
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	f000 fc26 	bl	8008004 <__i2b>
 80077b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ba:	4607      	mov	r7, r0
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	dd0d      	ble.n	80077de <_dtoa_r+0x67e>
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	dd0a      	ble.n	80077de <_dtoa_r+0x67e>
 80077c8:	4542      	cmp	r2, r8
 80077ca:	9904      	ldr	r1, [sp, #16]
 80077cc:	bfa8      	it	ge
 80077ce:	4642      	movge	r2, r8
 80077d0:	1a89      	subs	r1, r1, r2
 80077d2:	9104      	str	r1, [sp, #16]
 80077d4:	9905      	ldr	r1, [sp, #20]
 80077d6:	eba8 0802 	sub.w	r8, r8, r2
 80077da:	1a8a      	subs	r2, r1, r2
 80077dc:	9205      	str	r2, [sp, #20]
 80077de:	b303      	cbz	r3, 8007822 <_dtoa_r+0x6c2>
 80077e0:	9a07      	ldr	r2, [sp, #28]
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	f000 80a5 	beq.w	8007932 <_dtoa_r+0x7d2>
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	dd13      	ble.n	8007814 <_dtoa_r+0x6b4>
 80077ec:	4639      	mov	r1, r7
 80077ee:	4622      	mov	r2, r4
 80077f0:	4630      	mov	r0, r6
 80077f2:	930d      	str	r3, [sp, #52]	; 0x34
 80077f4:	f000 fcc6 	bl	8008184 <__pow5mult>
 80077f8:	462a      	mov	r2, r5
 80077fa:	4601      	mov	r1, r0
 80077fc:	4607      	mov	r7, r0
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 fc16 	bl	8008030 <__multiply>
 8007804:	4629      	mov	r1, r5
 8007806:	900a      	str	r0, [sp, #40]	; 0x28
 8007808:	4630      	mov	r0, r6
 800780a:	f000 fb43 	bl	8007e94 <_Bfree>
 800780e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007812:	4615      	mov	r5, r2
 8007814:	1b1a      	subs	r2, r3, r4
 8007816:	d004      	beq.n	8007822 <_dtoa_r+0x6c2>
 8007818:	4629      	mov	r1, r5
 800781a:	4630      	mov	r0, r6
 800781c:	f000 fcb2 	bl	8008184 <__pow5mult>
 8007820:	4605      	mov	r5, r0
 8007822:	2101      	movs	r1, #1
 8007824:	4630      	mov	r0, r6
 8007826:	f000 fbed 	bl	8008004 <__i2b>
 800782a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	f340 8081 	ble.w	8007936 <_dtoa_r+0x7d6>
 8007834:	461a      	mov	r2, r3
 8007836:	4601      	mov	r1, r0
 8007838:	4630      	mov	r0, r6
 800783a:	f000 fca3 	bl	8008184 <__pow5mult>
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	2b01      	cmp	r3, #1
 8007842:	4604      	mov	r4, r0
 8007844:	dd7a      	ble.n	800793c <_dtoa_r+0x7dc>
 8007846:	2300      	movs	r3, #0
 8007848:	930a      	str	r3, [sp, #40]	; 0x28
 800784a:	6922      	ldr	r2, [r4, #16]
 800784c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007850:	6910      	ldr	r0, [r2, #16]
 8007852:	f000 fb87 	bl	8007f64 <__hi0bits>
 8007856:	f1c0 0020 	rsb	r0, r0, #32
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	4418      	add	r0, r3
 800785e:	f010 001f 	ands.w	r0, r0, #31
 8007862:	f000 808c 	beq.w	800797e <_dtoa_r+0x81e>
 8007866:	f1c0 0220 	rsb	r2, r0, #32
 800786a:	2a04      	cmp	r2, #4
 800786c:	f340 8085 	ble.w	800797a <_dtoa_r+0x81a>
 8007870:	f1c0 001c 	rsb	r0, r0, #28
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	4403      	add	r3, r0
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	4403      	add	r3, r0
 800787e:	4480      	add	r8, r0
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	9b04      	ldr	r3, [sp, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	dd05      	ble.n	8007894 <_dtoa_r+0x734>
 8007888:	4629      	mov	r1, r5
 800788a:	461a      	mov	r2, r3
 800788c:	4630      	mov	r0, r6
 800788e:	f000 fcd3 	bl	8008238 <__lshift>
 8007892:	4605      	mov	r5, r0
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	dd05      	ble.n	80078a6 <_dtoa_r+0x746>
 800789a:	4621      	mov	r1, r4
 800789c:	461a      	mov	r2, r3
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 fcca 	bl	8008238 <__lshift>
 80078a4:	4604      	mov	r4, r0
 80078a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d06a      	beq.n	8007982 <_dtoa_r+0x822>
 80078ac:	4621      	mov	r1, r4
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 fd32 	bl	8008318 <__mcmp>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	da64      	bge.n	8007982 <_dtoa_r+0x822>
 80078b8:	2300      	movs	r3, #0
 80078ba:	4629      	mov	r1, r5
 80078bc:	220a      	movs	r2, #10
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 fb0a 	bl	8007ed8 <__multadd>
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078ca:	4605      	mov	r5, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8191 	beq.w	8007bf4 <_dtoa_r+0xa94>
 80078d2:	4639      	mov	r1, r7
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 fafd 	bl	8007ed8 <__multadd>
 80078de:	f1ba 0f00 	cmp.w	sl, #0
 80078e2:	4607      	mov	r7, r0
 80078e4:	f300 808d 	bgt.w	8007a02 <_dtoa_r+0x8a2>
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	dc50      	bgt.n	8007990 <_dtoa_r+0x830>
 80078ee:	e088      	b.n	8007a02 <_dtoa_r+0x8a2>
 80078f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078f6:	e751      	b.n	800779c <_dtoa_r+0x63c>
 80078f8:	f109 34ff 	add.w	r4, r9, #4294967295
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	bfbf      	itttt	lt
 8007900:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007902:	1ae3      	sublt	r3, r4, r3
 8007904:	18d2      	addlt	r2, r2, r3
 8007906:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007908:	bfb6      	itet	lt
 800790a:	4623      	movlt	r3, r4
 800790c:	1b1c      	subge	r4, r3, r4
 800790e:	2400      	movlt	r4, #0
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	bfb5      	itete	lt
 8007916:	9a04      	ldrlt	r2, [sp, #16]
 8007918:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800791c:	eba2 0809 	sublt.w	r8, r2, r9
 8007920:	464a      	movge	r2, r9
 8007922:	bfb8      	it	lt
 8007924:	2200      	movlt	r2, #0
 8007926:	e73c      	b.n	80077a2 <_dtoa_r+0x642>
 8007928:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800792c:	9f07      	ldr	r7, [sp, #28]
 800792e:	461c      	mov	r4, r3
 8007930:	e744      	b.n	80077bc <_dtoa_r+0x65c>
 8007932:	461a      	mov	r2, r3
 8007934:	e770      	b.n	8007818 <_dtoa_r+0x6b8>
 8007936:	9b06      	ldr	r3, [sp, #24]
 8007938:	2b01      	cmp	r3, #1
 800793a:	dc18      	bgt.n	800796e <_dtoa_r+0x80e>
 800793c:	9b02      	ldr	r3, [sp, #8]
 800793e:	b9b3      	cbnz	r3, 800796e <_dtoa_r+0x80e>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007946:	b9a2      	cbnz	r2, 8007972 <_dtoa_r+0x812>
 8007948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794c:	0d12      	lsrs	r2, r2, #20
 800794e:	0512      	lsls	r2, r2, #20
 8007950:	b18a      	cbz	r2, 8007976 <_dtoa_r+0x816>
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	9b05      	ldr	r3, [sp, #20]
 800795a:	3301      	adds	r3, #1
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	2301      	movs	r3, #1
 8007960:	930a      	str	r3, [sp, #40]	; 0x28
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	f47f af70 	bne.w	800784a <_dtoa_r+0x6ea>
 800796a:	2001      	movs	r0, #1
 800796c:	e775      	b.n	800785a <_dtoa_r+0x6fa>
 800796e:	2300      	movs	r3, #0
 8007970:	e7f6      	b.n	8007960 <_dtoa_r+0x800>
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	e7f4      	b.n	8007960 <_dtoa_r+0x800>
 8007976:	920a      	str	r2, [sp, #40]	; 0x28
 8007978:	e7f3      	b.n	8007962 <_dtoa_r+0x802>
 800797a:	d082      	beq.n	8007882 <_dtoa_r+0x722>
 800797c:	4610      	mov	r0, r2
 800797e:	301c      	adds	r0, #28
 8007980:	e778      	b.n	8007874 <_dtoa_r+0x714>
 8007982:	f1b9 0f00 	cmp.w	r9, #0
 8007986:	dc37      	bgt.n	80079f8 <_dtoa_r+0x898>
 8007988:	9b06      	ldr	r3, [sp, #24]
 800798a:	2b02      	cmp	r3, #2
 800798c:	dd34      	ble.n	80079f8 <_dtoa_r+0x898>
 800798e:	46ca      	mov	sl, r9
 8007990:	f1ba 0f00 	cmp.w	sl, #0
 8007994:	d10d      	bne.n	80079b2 <_dtoa_r+0x852>
 8007996:	4621      	mov	r1, r4
 8007998:	4653      	mov	r3, sl
 800799a:	2205      	movs	r2, #5
 800799c:	4630      	mov	r0, r6
 800799e:	f000 fa9b 	bl	8007ed8 <__multadd>
 80079a2:	4601      	mov	r1, r0
 80079a4:	4604      	mov	r4, r0
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 fcb6 	bl	8008318 <__mcmp>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f73f adeb 	bgt.w	8007588 <_dtoa_r+0x428>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079b8:	ea6f 0b03 	mvn.w	fp, r3
 80079bc:	f04f 0900 	mov.w	r9, #0
 80079c0:	4621      	mov	r1, r4
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 fa66 	bl	8007e94 <_Bfree>
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	f43f aea8 	beq.w	800771e <_dtoa_r+0x5be>
 80079ce:	f1b9 0f00 	cmp.w	r9, #0
 80079d2:	d005      	beq.n	80079e0 <_dtoa_r+0x880>
 80079d4:	45b9      	cmp	r9, r7
 80079d6:	d003      	beq.n	80079e0 <_dtoa_r+0x880>
 80079d8:	4649      	mov	r1, r9
 80079da:	4630      	mov	r0, r6
 80079dc:	f000 fa5a 	bl	8007e94 <_Bfree>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 fa56 	bl	8007e94 <_Bfree>
 80079e8:	e699      	b.n	800771e <_dtoa_r+0x5be>
 80079ea:	2400      	movs	r4, #0
 80079ec:	4627      	mov	r7, r4
 80079ee:	e7e0      	b.n	80079b2 <_dtoa_r+0x852>
 80079f0:	46bb      	mov	fp, r7
 80079f2:	4604      	mov	r4, r0
 80079f4:	4607      	mov	r7, r0
 80079f6:	e5c7      	b.n	8007588 <_dtoa_r+0x428>
 80079f8:	9b07      	ldr	r3, [sp, #28]
 80079fa:	46ca      	mov	sl, r9
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8100 	beq.w	8007c02 <_dtoa_r+0xaa2>
 8007a02:	f1b8 0f00 	cmp.w	r8, #0
 8007a06:	dd05      	ble.n	8007a14 <_dtoa_r+0x8b4>
 8007a08:	4639      	mov	r1, r7
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 fc13 	bl	8008238 <__lshift>
 8007a12:	4607      	mov	r7, r0
 8007a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d05d      	beq.n	8007ad6 <_dtoa_r+0x976>
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f000 f9f9 	bl	8007e14 <_Balloc>
 8007a22:	4680      	mov	r8, r0
 8007a24:	b928      	cbnz	r0, 8007a32 <_dtoa_r+0x8d2>
 8007a26:	4b82      	ldr	r3, [pc, #520]	; (8007c30 <_dtoa_r+0xad0>)
 8007a28:	4602      	mov	r2, r0
 8007a2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a2e:	f7ff bbaf 	b.w	8007190 <_dtoa_r+0x30>
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	3202      	adds	r2, #2
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	f107 010c 	add.w	r1, r7, #12
 8007a3c:	300c      	adds	r0, #12
 8007a3e:	f7fe fd1c 	bl	800647a <memcpy>
 8007a42:	2201      	movs	r2, #1
 8007a44:	4641      	mov	r1, r8
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 fbf6 	bl	8008238 <__lshift>
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	4453      	add	r3, sl
 8007a56:	9308      	str	r3, [sp, #32]
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	46b9      	mov	r9, r7
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	4607      	mov	r7, r0
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	4621      	mov	r1, r4
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	f7ff fae9 	bl	8007044 <quorem>
 8007a72:	4603      	mov	r3, r0
 8007a74:	3330      	adds	r3, #48	; 0x30
 8007a76:	9005      	str	r0, [sp, #20]
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a7e:	f000 fc4b 	bl	8008318 <__mcmp>
 8007a82:	463a      	mov	r2, r7
 8007a84:	4682      	mov	sl, r0
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 fc61 	bl	8008350 <__mdiff>
 8007a8e:	68c2      	ldr	r2, [r0, #12]
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	4680      	mov	r8, r0
 8007a94:	bb0a      	cbnz	r2, 8007ada <_dtoa_r+0x97a>
 8007a96:	4601      	mov	r1, r0
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 fc3d 	bl	8008318 <__mcmp>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007aaa:	f000 f9f3 	bl	8007e94 <_Bfree>
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ab6:	ea43 0102 	orr.w	r1, r3, r2
 8007aba:	9b07      	ldr	r3, [sp, #28]
 8007abc:	430b      	orrs	r3, r1
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	d10d      	bne.n	8007ade <_dtoa_r+0x97e>
 8007ac2:	2b39      	cmp	r3, #57	; 0x39
 8007ac4:	d029      	beq.n	8007b1a <_dtoa_r+0x9ba>
 8007ac6:	f1ba 0f00 	cmp.w	sl, #0
 8007aca:	dd01      	ble.n	8007ad0 <_dtoa_r+0x970>
 8007acc:	9b05      	ldr	r3, [sp, #20]
 8007ace:	3331      	adds	r3, #49	; 0x31
 8007ad0:	9a02      	ldr	r2, [sp, #8]
 8007ad2:	7013      	strb	r3, [r2, #0]
 8007ad4:	e774      	b.n	80079c0 <_dtoa_r+0x860>
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	e7b8      	b.n	8007a4c <_dtoa_r+0x8ec>
 8007ada:	2201      	movs	r2, #1
 8007adc:	e7e1      	b.n	8007aa2 <_dtoa_r+0x942>
 8007ade:	f1ba 0f00 	cmp.w	sl, #0
 8007ae2:	db06      	blt.n	8007af2 <_dtoa_r+0x992>
 8007ae4:	9906      	ldr	r1, [sp, #24]
 8007ae6:	ea41 0a0a 	orr.w	sl, r1, sl
 8007aea:	9907      	ldr	r1, [sp, #28]
 8007aec:	ea5a 0101 	orrs.w	r1, sl, r1
 8007af0:	d120      	bne.n	8007b34 <_dtoa_r+0x9d4>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	ddec      	ble.n	8007ad0 <_dtoa_r+0x970>
 8007af6:	4629      	mov	r1, r5
 8007af8:	2201      	movs	r2, #1
 8007afa:	4630      	mov	r0, r6
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	f000 fb9b 	bl	8008238 <__lshift>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4605      	mov	r5, r0
 8007b06:	f000 fc07 	bl	8008318 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	dc02      	bgt.n	8007b16 <_dtoa_r+0x9b6>
 8007b10:	d1de      	bne.n	8007ad0 <_dtoa_r+0x970>
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d5dc      	bpl.n	8007ad0 <_dtoa_r+0x970>
 8007b16:	2b39      	cmp	r3, #57	; 0x39
 8007b18:	d1d8      	bne.n	8007acc <_dtoa_r+0x96c>
 8007b1a:	9a02      	ldr	r2, [sp, #8]
 8007b1c:	2339      	movs	r3, #57	; 0x39
 8007b1e:	7013      	strb	r3, [r2, #0]
 8007b20:	4643      	mov	r3, r8
 8007b22:	4698      	mov	r8, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007b2a:	2a39      	cmp	r2, #57	; 0x39
 8007b2c:	d051      	beq.n	8007bd2 <_dtoa_r+0xa72>
 8007b2e:	3201      	adds	r2, #1
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	e745      	b.n	80079c0 <_dtoa_r+0x860>
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	dd03      	ble.n	8007b40 <_dtoa_r+0x9e0>
 8007b38:	2b39      	cmp	r3, #57	; 0x39
 8007b3a:	d0ee      	beq.n	8007b1a <_dtoa_r+0x9ba>
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	e7c7      	b.n	8007ad0 <_dtoa_r+0x970>
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	9908      	ldr	r1, [sp, #32]
 8007b44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b48:	428a      	cmp	r2, r1
 8007b4a:	d02b      	beq.n	8007ba4 <_dtoa_r+0xa44>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220a      	movs	r2, #10
 8007b52:	4630      	mov	r0, r6
 8007b54:	f000 f9c0 	bl	8007ed8 <__multadd>
 8007b58:	45b9      	cmp	r9, r7
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	f04f 020a 	mov.w	r2, #10
 8007b64:	4649      	mov	r1, r9
 8007b66:	4630      	mov	r0, r6
 8007b68:	d107      	bne.n	8007b7a <_dtoa_r+0xa1a>
 8007b6a:	f000 f9b5 	bl	8007ed8 <__multadd>
 8007b6e:	4681      	mov	r9, r0
 8007b70:	4607      	mov	r7, r0
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	e774      	b.n	8007a64 <_dtoa_r+0x904>
 8007b7a:	f000 f9ad 	bl	8007ed8 <__multadd>
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4681      	mov	r9, r0
 8007b82:	2300      	movs	r3, #0
 8007b84:	220a      	movs	r2, #10
 8007b86:	4630      	mov	r0, r6
 8007b88:	f000 f9a6 	bl	8007ed8 <__multadd>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	e7f0      	b.n	8007b72 <_dtoa_r+0xa12>
 8007b90:	f1ba 0f00 	cmp.w	sl, #0
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	bfcc      	ite	gt
 8007b98:	46d0      	movgt	r8, sl
 8007b9a:	f04f 0801 	movle.w	r8, #1
 8007b9e:	4490      	add	r8, r2
 8007ba0:	f04f 0900 	mov.w	r9, #0
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4630      	mov	r0, r6
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	f000 fb44 	bl	8008238 <__lshift>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	f000 fbb0 	bl	8008318 <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	dcb1      	bgt.n	8007b20 <_dtoa_r+0x9c0>
 8007bbc:	d102      	bne.n	8007bc4 <_dtoa_r+0xa64>
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	07db      	lsls	r3, r3, #31
 8007bc2:	d4ad      	bmi.n	8007b20 <_dtoa_r+0x9c0>
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bcc:	2a30      	cmp	r2, #48	; 0x30
 8007bce:	d0fa      	beq.n	8007bc6 <_dtoa_r+0xa66>
 8007bd0:	e6f6      	b.n	80079c0 <_dtoa_r+0x860>
 8007bd2:	9a01      	ldr	r2, [sp, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d1a4      	bne.n	8007b22 <_dtoa_r+0x9c2>
 8007bd8:	f10b 0b01 	add.w	fp, fp, #1
 8007bdc:	2331      	movs	r3, #49	; 0x31
 8007bde:	e778      	b.n	8007ad2 <_dtoa_r+0x972>
 8007be0:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <_dtoa_r+0xad4>)
 8007be2:	f7ff bb27 	b.w	8007234 <_dtoa_r+0xd4>
 8007be6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f47f ab03 	bne.w	80071f4 <_dtoa_r+0x94>
 8007bee:	4b12      	ldr	r3, [pc, #72]	; (8007c38 <_dtoa_r+0xad8>)
 8007bf0:	f7ff bb20 	b.w	8007234 <_dtoa_r+0xd4>
 8007bf4:	f1ba 0f00 	cmp.w	sl, #0
 8007bf8:	dc03      	bgt.n	8007c02 <_dtoa_r+0xaa2>
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	f73f aec7 	bgt.w	8007990 <_dtoa_r+0x830>
 8007c02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7ff fa1b 	bl	8007044 <quorem>
 8007c0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c12:	f808 3b01 	strb.w	r3, [r8], #1
 8007c16:	9a01      	ldr	r2, [sp, #4]
 8007c18:	eba8 0202 	sub.w	r2, r8, r2
 8007c1c:	4592      	cmp	sl, r2
 8007c1e:	ddb7      	ble.n	8007b90 <_dtoa_r+0xa30>
 8007c20:	4629      	mov	r1, r5
 8007c22:	2300      	movs	r3, #0
 8007c24:	220a      	movs	r2, #10
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 f956 	bl	8007ed8 <__multadd>
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	e7ea      	b.n	8007c06 <_dtoa_r+0xaa6>
 8007c30:	08008e37 	.word	0x08008e37
 8007c34:	08008d94 	.word	0x08008d94
 8007c38:	08008db8 	.word	0x08008db8

08007c3c <__sflush_r>:
 8007c3c:	898a      	ldrh	r2, [r1, #12]
 8007c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c42:	4605      	mov	r5, r0
 8007c44:	0710      	lsls	r0, r2, #28
 8007c46:	460c      	mov	r4, r1
 8007c48:	d458      	bmi.n	8007cfc <__sflush_r+0xc0>
 8007c4a:	684b      	ldr	r3, [r1, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dc05      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dc02      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	d0f9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c68:	682f      	ldr	r7, [r5, #0]
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	d032      	beq.n	8007cd4 <__sflush_r+0x98>
 8007c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	075a      	lsls	r2, r3, #29
 8007c74:	d505      	bpl.n	8007c82 <__sflush_r+0x46>
 8007c76:	6863      	ldr	r3, [r4, #4]
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c7c:	b10b      	cbz	r3, 8007c82 <__sflush_r+0x46>
 8007c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c80:	1ac0      	subs	r0, r0, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	4602      	mov	r2, r0
 8007c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c88:	6a21      	ldr	r1, [r4, #32]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b0      	blx	r6
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	d106      	bne.n	8007ca2 <__sflush_r+0x66>
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	291d      	cmp	r1, #29
 8007c98:	d82c      	bhi.n	8007cf4 <__sflush_r+0xb8>
 8007c9a:	4a2a      	ldr	r2, [pc, #168]	; (8007d44 <__sflush_r+0x108>)
 8007c9c:	40ca      	lsrs	r2, r1
 8007c9e:	07d6      	lsls	r6, r2, #31
 8007ca0:	d528      	bpl.n	8007cf4 <__sflush_r+0xb8>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6062      	str	r2, [r4, #4]
 8007ca6:	04d9      	lsls	r1, r3, #19
 8007ca8:	6922      	ldr	r2, [r4, #16]
 8007caa:	6022      	str	r2, [r4, #0]
 8007cac:	d504      	bpl.n	8007cb8 <__sflush_r+0x7c>
 8007cae:	1c42      	adds	r2, r0, #1
 8007cb0:	d101      	bne.n	8007cb6 <__sflush_r+0x7a>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b903      	cbnz	r3, 8007cb8 <__sflush_r+0x7c>
 8007cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8007cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cba:	602f      	str	r7, [r5, #0]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d0ca      	beq.n	8007c56 <__sflush_r+0x1a>
 8007cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	d002      	beq.n	8007cce <__sflush_r+0x92>
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 fc3d 	bl	8008548 <_free_r>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd2:	e7c1      	b.n	8007c58 <__sflush_r+0x1c>
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b0      	blx	r6
 8007cdc:	1c41      	adds	r1, r0, #1
 8007cde:	d1c7      	bne.n	8007c70 <__sflush_r+0x34>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0c4      	beq.n	8007c70 <__sflush_r+0x34>
 8007ce6:	2b1d      	cmp	r3, #29
 8007ce8:	d001      	beq.n	8007cee <__sflush_r+0xb2>
 8007cea:	2b16      	cmp	r3, #22
 8007cec:	d101      	bne.n	8007cf2 <__sflush_r+0xb6>
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	e7b1      	b.n	8007c56 <__sflush_r+0x1a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7ad      	b.n	8007c58 <__sflush_r+0x1c>
 8007cfc:	690f      	ldr	r7, [r1, #16]
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d0a9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007d02:	0793      	lsls	r3, r2, #30
 8007d04:	680e      	ldr	r6, [r1, #0]
 8007d06:	bf08      	it	eq
 8007d08:	694b      	ldreq	r3, [r1, #20]
 8007d0a:	600f      	str	r7, [r1, #0]
 8007d0c:	bf18      	it	ne
 8007d0e:	2300      	movne	r3, #0
 8007d10:	eba6 0807 	sub.w	r8, r6, r7
 8007d14:	608b      	str	r3, [r1, #8]
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	dd9c      	ble.n	8007c56 <__sflush_r+0x1a>
 8007d1c:	6a21      	ldr	r1, [r4, #32]
 8007d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d20:	4643      	mov	r3, r8
 8007d22:	463a      	mov	r2, r7
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b0      	blx	r6
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dc06      	bgt.n	8007d3a <__sflush_r+0xfe>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	e78e      	b.n	8007c58 <__sflush_r+0x1c>
 8007d3a:	4407      	add	r7, r0
 8007d3c:	eba8 0800 	sub.w	r8, r8, r0
 8007d40:	e7e9      	b.n	8007d16 <__sflush_r+0xda>
 8007d42:	bf00      	nop
 8007d44:	20400001 	.word	0x20400001

08007d48 <_fflush_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	b913      	cbnz	r3, 8007d58 <_fflush_r+0x10>
 8007d52:	2500      	movs	r5, #0
 8007d54:	4628      	mov	r0, r5
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	b118      	cbz	r0, 8007d62 <_fflush_r+0x1a>
 8007d5a:	6983      	ldr	r3, [r0, #24]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <_fflush_r+0x1a>
 8007d5e:	f7fe fac7 	bl	80062f0 <__sinit>
 8007d62:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <_fflush_r+0x6c>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d11b      	bne.n	8007da0 <_fflush_r+0x58>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ef      	beq.n	8007d52 <_fflush_r+0xa>
 8007d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d74:	07d0      	lsls	r0, r2, #31
 8007d76:	d404      	bmi.n	8007d82 <_fflush_r+0x3a>
 8007d78:	0599      	lsls	r1, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_fflush_r+0x3a>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f7fe fb7a 	bl	8006476 <__retarget_lock_acquire_recursive>
 8007d82:	4628      	mov	r0, r5
 8007d84:	4621      	mov	r1, r4
 8007d86:	f7ff ff59 	bl	8007c3c <__sflush_r>
 8007d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d8c:	07da      	lsls	r2, r3, #31
 8007d8e:	4605      	mov	r5, r0
 8007d90:	d4e0      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	059b      	lsls	r3, r3, #22
 8007d96:	d4dd      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9a:	f7fe fb6d 	bl	8006478 <__retarget_lock_release_recursive>
 8007d9e:	e7d9      	b.n	8007d54 <_fflush_r+0xc>
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <_fflush_r+0x70>)
 8007da2:	429c      	cmp	r4, r3
 8007da4:	d101      	bne.n	8007daa <_fflush_r+0x62>
 8007da6:	68ac      	ldr	r4, [r5, #8]
 8007da8:	e7df      	b.n	8007d6a <_fflush_r+0x22>
 8007daa:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <_fflush_r+0x74>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	bf08      	it	eq
 8007db0:	68ec      	ldreq	r4, [r5, #12]
 8007db2:	e7da      	b.n	8007d6a <_fflush_r+0x22>
 8007db4:	08008d40 	.word	0x08008d40
 8007db8:	08008d60 	.word	0x08008d60
 8007dbc:	08008d20 	.word	0x08008d20

08007dc0 <_localeconv_r>:
 8007dc0:	4800      	ldr	r0, [pc, #0]	; (8007dc4 <_localeconv_r+0x4>)
 8007dc2:	4770      	bx	lr
 8007dc4:	20000164 	.word	0x20000164

08007dc8 <_lseek_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	; (8007de8 <_lseek_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7f9 fb56 	bl	8001488 <_lseek>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_lseek_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_lseek_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	2000440c 	.word	0x2000440c

08007dec <malloc>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <malloc+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f7fe bb79 	b.w	80064e8 <_malloc_r>
 8007df6:	bf00      	nop
 8007df8:	20000010 	.word	0x20000010

08007dfc <__malloc_lock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__malloc_lock+0x8>)
 8007dfe:	f7fe bb3a 	b.w	8006476 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	20004400 	.word	0x20004400

08007e08 <__malloc_unlock>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__malloc_unlock+0x8>)
 8007e0a:	f7fe bb35 	b.w	8006478 <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20004400 	.word	0x20004400

08007e14 <_Balloc>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e18:	4604      	mov	r4, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	b976      	cbnz	r6, 8007e3c <_Balloc+0x28>
 8007e1e:	2010      	movs	r0, #16
 8007e20:	f7ff ffe4 	bl	8007dec <malloc>
 8007e24:	4602      	mov	r2, r0
 8007e26:	6260      	str	r0, [r4, #36]	; 0x24
 8007e28:	b920      	cbnz	r0, 8007e34 <_Balloc+0x20>
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <_Balloc+0x78>)
 8007e2c:	4818      	ldr	r0, [pc, #96]	; (8007e90 <_Balloc+0x7c>)
 8007e2e:	2166      	movs	r1, #102	; 0x66
 8007e30:	f000 fe02 	bl	8008a38 <__assert_func>
 8007e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e38:	6006      	str	r6, [r0, #0]
 8007e3a:	60c6      	str	r6, [r0, #12]
 8007e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e3e:	68f3      	ldr	r3, [r6, #12]
 8007e40:	b183      	cbz	r3, 8007e64 <_Balloc+0x50>
 8007e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e4a:	b9b8      	cbnz	r0, 8007e7c <_Balloc+0x68>
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e52:	1d72      	adds	r2, r6, #5
 8007e54:	0092      	lsls	r2, r2, #2
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 fb60 	bl	800851c <_calloc_r>
 8007e5c:	b160      	cbz	r0, 8007e78 <_Balloc+0x64>
 8007e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e62:	e00e      	b.n	8007e82 <_Balloc+0x6e>
 8007e64:	2221      	movs	r2, #33	; 0x21
 8007e66:	2104      	movs	r1, #4
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fb57 	bl	800851c <_calloc_r>
 8007e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e70:	60f0      	str	r0, [r6, #12]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e4      	bne.n	8007e42 <_Balloc+0x2e>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	6802      	ldr	r2, [r0, #0]
 8007e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e82:	2300      	movs	r3, #0
 8007e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e88:	e7f7      	b.n	8007e7a <_Balloc+0x66>
 8007e8a:	bf00      	nop
 8007e8c:	08008dc5 	.word	0x08008dc5
 8007e90:	08008e48 	.word	0x08008e48

08007e94 <_Bfree>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e98:	4605      	mov	r5, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	b976      	cbnz	r6, 8007ebc <_Bfree+0x28>
 8007e9e:	2010      	movs	r0, #16
 8007ea0:	f7ff ffa4 	bl	8007dec <malloc>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ea8:	b920      	cbnz	r0, 8007eb4 <_Bfree+0x20>
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <_Bfree+0x3c>)
 8007eac:	4809      	ldr	r0, [pc, #36]	; (8007ed4 <_Bfree+0x40>)
 8007eae:	218a      	movs	r1, #138	; 0x8a
 8007eb0:	f000 fdc2 	bl	8008a38 <__assert_func>
 8007eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb8:	6006      	str	r6, [r0, #0]
 8007eba:	60c6      	str	r6, [r0, #12]
 8007ebc:	b13c      	cbz	r4, 8007ece <_Bfree+0x3a>
 8007ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ec0:	6862      	ldr	r2, [r4, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec8:	6021      	str	r1, [r4, #0]
 8007eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	08008dc5 	.word	0x08008dc5
 8007ed4:	08008e48 	.word	0x08008e48

08007ed8 <__multadd>:
 8007ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	690d      	ldr	r5, [r1, #16]
 8007ede:	4607      	mov	r7, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	461e      	mov	r6, r3
 8007ee4:	f101 0c14 	add.w	ip, r1, #20
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f8dc 3000 	ldr.w	r3, [ip]
 8007eee:	b299      	uxth	r1, r3
 8007ef0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ef4:	0c1e      	lsrs	r6, r3, #16
 8007ef6:	0c0b      	lsrs	r3, r1, #16
 8007ef8:	fb02 3306 	mla	r3, r2, r6, r3
 8007efc:	b289      	uxth	r1, r1
 8007efe:	3001      	adds	r0, #1
 8007f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f04:	4285      	cmp	r5, r0
 8007f06:	f84c 1b04 	str.w	r1, [ip], #4
 8007f0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f0e:	dcec      	bgt.n	8007eea <__multadd+0x12>
 8007f10:	b30e      	cbz	r6, 8007f56 <__multadd+0x7e>
 8007f12:	68a3      	ldr	r3, [r4, #8]
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dc19      	bgt.n	8007f4c <__multadd+0x74>
 8007f18:	6861      	ldr	r1, [r4, #4]
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	3101      	adds	r1, #1
 8007f1e:	f7ff ff79 	bl	8007e14 <_Balloc>
 8007f22:	4680      	mov	r8, r0
 8007f24:	b928      	cbnz	r0, 8007f32 <__multadd+0x5a>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <__multadd+0x84>)
 8007f2a:	480d      	ldr	r0, [pc, #52]	; (8007f60 <__multadd+0x88>)
 8007f2c:	21b5      	movs	r1, #181	; 0xb5
 8007f2e:	f000 fd83 	bl	8008a38 <__assert_func>
 8007f32:	6922      	ldr	r2, [r4, #16]
 8007f34:	3202      	adds	r2, #2
 8007f36:	f104 010c 	add.w	r1, r4, #12
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	300c      	adds	r0, #12
 8007f3e:	f7fe fa9c 	bl	800647a <memcpy>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4638      	mov	r0, r7
 8007f46:	f7ff ffa5 	bl	8007e94 <_Bfree>
 8007f4a:	4644      	mov	r4, r8
 8007f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f50:	3501      	adds	r5, #1
 8007f52:	615e      	str	r6, [r3, #20]
 8007f54:	6125      	str	r5, [r4, #16]
 8007f56:	4620      	mov	r0, r4
 8007f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5c:	08008e37 	.word	0x08008e37
 8007f60:	08008e48 	.word	0x08008e48

08007f64 <__hi0bits>:
 8007f64:	0c03      	lsrs	r3, r0, #16
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	b9d3      	cbnz	r3, 8007fa0 <__hi0bits+0x3c>
 8007f6a:	0400      	lsls	r0, r0, #16
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f72:	bf04      	itt	eq
 8007f74:	0200      	lsleq	r0, r0, #8
 8007f76:	3308      	addeq	r3, #8
 8007f78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f7c:	bf04      	itt	eq
 8007f7e:	0100      	lsleq	r0, r0, #4
 8007f80:	3304      	addeq	r3, #4
 8007f82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f86:	bf04      	itt	eq
 8007f88:	0080      	lsleq	r0, r0, #2
 8007f8a:	3302      	addeq	r3, #2
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	db05      	blt.n	8007f9c <__hi0bits+0x38>
 8007f90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f94:	f103 0301 	add.w	r3, r3, #1
 8007f98:	bf08      	it	eq
 8007f9a:	2320      	moveq	r3, #32
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4770      	bx	lr
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e7e4      	b.n	8007f6e <__hi0bits+0xa>

08007fa4 <__lo0bits>:
 8007fa4:	6803      	ldr	r3, [r0, #0]
 8007fa6:	f013 0207 	ands.w	r2, r3, #7
 8007faa:	4601      	mov	r1, r0
 8007fac:	d00b      	beq.n	8007fc6 <__lo0bits+0x22>
 8007fae:	07da      	lsls	r2, r3, #31
 8007fb0:	d423      	bmi.n	8007ffa <__lo0bits+0x56>
 8007fb2:	0798      	lsls	r0, r3, #30
 8007fb4:	bf49      	itett	mi
 8007fb6:	085b      	lsrmi	r3, r3, #1
 8007fb8:	089b      	lsrpl	r3, r3, #2
 8007fba:	2001      	movmi	r0, #1
 8007fbc:	600b      	strmi	r3, [r1, #0]
 8007fbe:	bf5c      	itt	pl
 8007fc0:	600b      	strpl	r3, [r1, #0]
 8007fc2:	2002      	movpl	r0, #2
 8007fc4:	4770      	bx	lr
 8007fc6:	b298      	uxth	r0, r3
 8007fc8:	b9a8      	cbnz	r0, 8007ff6 <__lo0bits+0x52>
 8007fca:	0c1b      	lsrs	r3, r3, #16
 8007fcc:	2010      	movs	r0, #16
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	b90a      	cbnz	r2, 8007fd6 <__lo0bits+0x32>
 8007fd2:	3008      	adds	r0, #8
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	071a      	lsls	r2, r3, #28
 8007fd8:	bf04      	itt	eq
 8007fda:	091b      	lsreq	r3, r3, #4
 8007fdc:	3004      	addeq	r0, #4
 8007fde:	079a      	lsls	r2, r3, #30
 8007fe0:	bf04      	itt	eq
 8007fe2:	089b      	lsreq	r3, r3, #2
 8007fe4:	3002      	addeq	r0, #2
 8007fe6:	07da      	lsls	r2, r3, #31
 8007fe8:	d403      	bmi.n	8007ff2 <__lo0bits+0x4e>
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	f100 0001 	add.w	r0, r0, #1
 8007ff0:	d005      	beq.n	8007ffe <__lo0bits+0x5a>
 8007ff2:	600b      	str	r3, [r1, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	e7e9      	b.n	8007fce <__lo0bits+0x2a>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4770      	bx	lr
 8007ffe:	2020      	movs	r0, #32
 8008000:	4770      	bx	lr
	...

08008004 <__i2b>:
 8008004:	b510      	push	{r4, lr}
 8008006:	460c      	mov	r4, r1
 8008008:	2101      	movs	r1, #1
 800800a:	f7ff ff03 	bl	8007e14 <_Balloc>
 800800e:	4602      	mov	r2, r0
 8008010:	b928      	cbnz	r0, 800801e <__i2b+0x1a>
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <__i2b+0x24>)
 8008014:	4805      	ldr	r0, [pc, #20]	; (800802c <__i2b+0x28>)
 8008016:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800801a:	f000 fd0d 	bl	8008a38 <__assert_func>
 800801e:	2301      	movs	r3, #1
 8008020:	6144      	str	r4, [r0, #20]
 8008022:	6103      	str	r3, [r0, #16]
 8008024:	bd10      	pop	{r4, pc}
 8008026:	bf00      	nop
 8008028:	08008e37 	.word	0x08008e37
 800802c:	08008e48 	.word	0x08008e48

08008030 <__multiply>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4691      	mov	r9, r2
 8008036:	690a      	ldr	r2, [r1, #16]
 8008038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800803c:	429a      	cmp	r2, r3
 800803e:	bfb8      	it	lt
 8008040:	460b      	movlt	r3, r1
 8008042:	460c      	mov	r4, r1
 8008044:	bfbc      	itt	lt
 8008046:	464c      	movlt	r4, r9
 8008048:	4699      	movlt	r9, r3
 800804a:	6927      	ldr	r7, [r4, #16]
 800804c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008050:	68a3      	ldr	r3, [r4, #8]
 8008052:	6861      	ldr	r1, [r4, #4]
 8008054:	eb07 060a 	add.w	r6, r7, sl
 8008058:	42b3      	cmp	r3, r6
 800805a:	b085      	sub	sp, #20
 800805c:	bfb8      	it	lt
 800805e:	3101      	addlt	r1, #1
 8008060:	f7ff fed8 	bl	8007e14 <_Balloc>
 8008064:	b930      	cbnz	r0, 8008074 <__multiply+0x44>
 8008066:	4602      	mov	r2, r0
 8008068:	4b44      	ldr	r3, [pc, #272]	; (800817c <__multiply+0x14c>)
 800806a:	4845      	ldr	r0, [pc, #276]	; (8008180 <__multiply+0x150>)
 800806c:	f240 115d 	movw	r1, #349	; 0x15d
 8008070:	f000 fce2 	bl	8008a38 <__assert_func>
 8008074:	f100 0514 	add.w	r5, r0, #20
 8008078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800807c:	462b      	mov	r3, r5
 800807e:	2200      	movs	r2, #0
 8008080:	4543      	cmp	r3, r8
 8008082:	d321      	bcc.n	80080c8 <__multiply+0x98>
 8008084:	f104 0314 	add.w	r3, r4, #20
 8008088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800808c:	f109 0314 	add.w	r3, r9, #20
 8008090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	1b3a      	subs	r2, r7, r4
 8008098:	3a15      	subs	r2, #21
 800809a:	f022 0203 	bic.w	r2, r2, #3
 800809e:	3204      	adds	r2, #4
 80080a0:	f104 0115 	add.w	r1, r4, #21
 80080a4:	428f      	cmp	r7, r1
 80080a6:	bf38      	it	cc
 80080a8:	2204      	movcc	r2, #4
 80080aa:	9201      	str	r2, [sp, #4]
 80080ac:	9a02      	ldr	r2, [sp, #8]
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d80c      	bhi.n	80080ce <__multiply+0x9e>
 80080b4:	2e00      	cmp	r6, #0
 80080b6:	dd03      	ble.n	80080c0 <__multiply+0x90>
 80080b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d05a      	beq.n	8008176 <__multiply+0x146>
 80080c0:	6106      	str	r6, [r0, #16]
 80080c2:	b005      	add	sp, #20
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	f843 2b04 	str.w	r2, [r3], #4
 80080cc:	e7d8      	b.n	8008080 <__multiply+0x50>
 80080ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80080d2:	f1ba 0f00 	cmp.w	sl, #0
 80080d6:	d024      	beq.n	8008122 <__multiply+0xf2>
 80080d8:	f104 0e14 	add.w	lr, r4, #20
 80080dc:	46a9      	mov	r9, r5
 80080de:	f04f 0c00 	mov.w	ip, #0
 80080e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080e6:	f8d9 1000 	ldr.w	r1, [r9]
 80080ea:	fa1f fb82 	uxth.w	fp, r2
 80080ee:	b289      	uxth	r1, r1
 80080f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80080f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080f8:	f8d9 2000 	ldr.w	r2, [r9]
 80080fc:	4461      	add	r1, ip
 80080fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008102:	fb0a c20b 	mla	r2, sl, fp, ip
 8008106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800810a:	b289      	uxth	r1, r1
 800810c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008110:	4577      	cmp	r7, lr
 8008112:	f849 1b04 	str.w	r1, [r9], #4
 8008116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800811a:	d8e2      	bhi.n	80080e2 <__multiply+0xb2>
 800811c:	9a01      	ldr	r2, [sp, #4]
 800811e:	f845 c002 	str.w	ip, [r5, r2]
 8008122:	9a03      	ldr	r2, [sp, #12]
 8008124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008128:	3304      	adds	r3, #4
 800812a:	f1b9 0f00 	cmp.w	r9, #0
 800812e:	d020      	beq.n	8008172 <__multiply+0x142>
 8008130:	6829      	ldr	r1, [r5, #0]
 8008132:	f104 0c14 	add.w	ip, r4, #20
 8008136:	46ae      	mov	lr, r5
 8008138:	f04f 0a00 	mov.w	sl, #0
 800813c:	f8bc b000 	ldrh.w	fp, [ip]
 8008140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008144:	fb09 220b 	mla	r2, r9, fp, r2
 8008148:	4492      	add	sl, r2
 800814a:	b289      	uxth	r1, r1
 800814c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008150:	f84e 1b04 	str.w	r1, [lr], #4
 8008154:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008158:	f8be 1000 	ldrh.w	r1, [lr]
 800815c:	0c12      	lsrs	r2, r2, #16
 800815e:	fb09 1102 	mla	r1, r9, r2, r1
 8008162:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008166:	4567      	cmp	r7, ip
 8008168:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800816c:	d8e6      	bhi.n	800813c <__multiply+0x10c>
 800816e:	9a01      	ldr	r2, [sp, #4]
 8008170:	50a9      	str	r1, [r5, r2]
 8008172:	3504      	adds	r5, #4
 8008174:	e79a      	b.n	80080ac <__multiply+0x7c>
 8008176:	3e01      	subs	r6, #1
 8008178:	e79c      	b.n	80080b4 <__multiply+0x84>
 800817a:	bf00      	nop
 800817c:	08008e37 	.word	0x08008e37
 8008180:	08008e48 	.word	0x08008e48

08008184 <__pow5mult>:
 8008184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008188:	4615      	mov	r5, r2
 800818a:	f012 0203 	ands.w	r2, r2, #3
 800818e:	4606      	mov	r6, r0
 8008190:	460f      	mov	r7, r1
 8008192:	d007      	beq.n	80081a4 <__pow5mult+0x20>
 8008194:	4c25      	ldr	r4, [pc, #148]	; (800822c <__pow5mult+0xa8>)
 8008196:	3a01      	subs	r2, #1
 8008198:	2300      	movs	r3, #0
 800819a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800819e:	f7ff fe9b 	bl	8007ed8 <__multadd>
 80081a2:	4607      	mov	r7, r0
 80081a4:	10ad      	asrs	r5, r5, #2
 80081a6:	d03d      	beq.n	8008224 <__pow5mult+0xa0>
 80081a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081aa:	b97c      	cbnz	r4, 80081cc <__pow5mult+0x48>
 80081ac:	2010      	movs	r0, #16
 80081ae:	f7ff fe1d 	bl	8007dec <malloc>
 80081b2:	4602      	mov	r2, r0
 80081b4:	6270      	str	r0, [r6, #36]	; 0x24
 80081b6:	b928      	cbnz	r0, 80081c4 <__pow5mult+0x40>
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <__pow5mult+0xac>)
 80081ba:	481e      	ldr	r0, [pc, #120]	; (8008234 <__pow5mult+0xb0>)
 80081bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081c0:	f000 fc3a 	bl	8008a38 <__assert_func>
 80081c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081c8:	6004      	str	r4, [r0, #0]
 80081ca:	60c4      	str	r4, [r0, #12]
 80081cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081d4:	b94c      	cbnz	r4, 80081ea <__pow5mult+0x66>
 80081d6:	f240 2171 	movw	r1, #625	; 0x271
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff ff12 	bl	8008004 <__i2b>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80081e6:	4604      	mov	r4, r0
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	f04f 0900 	mov.w	r9, #0
 80081ee:	07eb      	lsls	r3, r5, #31
 80081f0:	d50a      	bpl.n	8008208 <__pow5mult+0x84>
 80081f2:	4639      	mov	r1, r7
 80081f4:	4622      	mov	r2, r4
 80081f6:	4630      	mov	r0, r6
 80081f8:	f7ff ff1a 	bl	8008030 <__multiply>
 80081fc:	4639      	mov	r1, r7
 80081fe:	4680      	mov	r8, r0
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff fe47 	bl	8007e94 <_Bfree>
 8008206:	4647      	mov	r7, r8
 8008208:	106d      	asrs	r5, r5, #1
 800820a:	d00b      	beq.n	8008224 <__pow5mult+0xa0>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	b938      	cbnz	r0, 8008220 <__pow5mult+0x9c>
 8008210:	4622      	mov	r2, r4
 8008212:	4621      	mov	r1, r4
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff ff0b 	bl	8008030 <__multiply>
 800821a:	6020      	str	r0, [r4, #0]
 800821c:	f8c0 9000 	str.w	r9, [r0]
 8008220:	4604      	mov	r4, r0
 8008222:	e7e4      	b.n	80081ee <__pow5mult+0x6a>
 8008224:	4638      	mov	r0, r7
 8008226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822a:	bf00      	nop
 800822c:	08008f98 	.word	0x08008f98
 8008230:	08008dc5 	.word	0x08008dc5
 8008234:	08008e48 	.word	0x08008e48

08008238 <__lshift>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	460c      	mov	r4, r1
 800823e:	6849      	ldr	r1, [r1, #4]
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	4607      	mov	r7, r0
 800824a:	4691      	mov	r9, r2
 800824c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008250:	f108 0601 	add.w	r6, r8, #1
 8008254:	42b3      	cmp	r3, r6
 8008256:	db0b      	blt.n	8008270 <__lshift+0x38>
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff fddb 	bl	8007e14 <_Balloc>
 800825e:	4605      	mov	r5, r0
 8008260:	b948      	cbnz	r0, 8008276 <__lshift+0x3e>
 8008262:	4602      	mov	r2, r0
 8008264:	4b2a      	ldr	r3, [pc, #168]	; (8008310 <__lshift+0xd8>)
 8008266:	482b      	ldr	r0, [pc, #172]	; (8008314 <__lshift+0xdc>)
 8008268:	f240 11d9 	movw	r1, #473	; 0x1d9
 800826c:	f000 fbe4 	bl	8008a38 <__assert_func>
 8008270:	3101      	adds	r1, #1
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	e7ee      	b.n	8008254 <__lshift+0x1c>
 8008276:	2300      	movs	r3, #0
 8008278:	f100 0114 	add.w	r1, r0, #20
 800827c:	f100 0210 	add.w	r2, r0, #16
 8008280:	4618      	mov	r0, r3
 8008282:	4553      	cmp	r3, sl
 8008284:	db37      	blt.n	80082f6 <__lshift+0xbe>
 8008286:	6920      	ldr	r0, [r4, #16]
 8008288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800828c:	f104 0314 	add.w	r3, r4, #20
 8008290:	f019 091f 	ands.w	r9, r9, #31
 8008294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008298:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800829c:	d02f      	beq.n	80082fe <__lshift+0xc6>
 800829e:	f1c9 0e20 	rsb	lr, r9, #32
 80082a2:	468a      	mov	sl, r1
 80082a4:	f04f 0c00 	mov.w	ip, #0
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	fa02 f209 	lsl.w	r2, r2, r9
 80082ae:	ea42 020c 	orr.w	r2, r2, ip
 80082b2:	f84a 2b04 	str.w	r2, [sl], #4
 80082b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ba:	4298      	cmp	r0, r3
 80082bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082c0:	d8f2      	bhi.n	80082a8 <__lshift+0x70>
 80082c2:	1b03      	subs	r3, r0, r4
 80082c4:	3b15      	subs	r3, #21
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	3304      	adds	r3, #4
 80082cc:	f104 0215 	add.w	r2, r4, #21
 80082d0:	4290      	cmp	r0, r2
 80082d2:	bf38      	it	cc
 80082d4:	2304      	movcc	r3, #4
 80082d6:	f841 c003 	str.w	ip, [r1, r3]
 80082da:	f1bc 0f00 	cmp.w	ip, #0
 80082de:	d001      	beq.n	80082e4 <__lshift+0xac>
 80082e0:	f108 0602 	add.w	r6, r8, #2
 80082e4:	3e01      	subs	r6, #1
 80082e6:	4638      	mov	r0, r7
 80082e8:	612e      	str	r6, [r5, #16]
 80082ea:	4621      	mov	r1, r4
 80082ec:	f7ff fdd2 	bl	8007e94 <_Bfree>
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082fa:	3301      	adds	r3, #1
 80082fc:	e7c1      	b.n	8008282 <__lshift+0x4a>
 80082fe:	3904      	subs	r1, #4
 8008300:	f853 2b04 	ldr.w	r2, [r3], #4
 8008304:	f841 2f04 	str.w	r2, [r1, #4]!
 8008308:	4298      	cmp	r0, r3
 800830a:	d8f9      	bhi.n	8008300 <__lshift+0xc8>
 800830c:	e7ea      	b.n	80082e4 <__lshift+0xac>
 800830e:	bf00      	nop
 8008310:	08008e37 	.word	0x08008e37
 8008314:	08008e48 	.word	0x08008e48

08008318 <__mcmp>:
 8008318:	b530      	push	{r4, r5, lr}
 800831a:	6902      	ldr	r2, [r0, #16]
 800831c:	690c      	ldr	r4, [r1, #16]
 800831e:	1b12      	subs	r2, r2, r4
 8008320:	d10e      	bne.n	8008340 <__mcmp+0x28>
 8008322:	f100 0314 	add.w	r3, r0, #20
 8008326:	3114      	adds	r1, #20
 8008328:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800832c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008330:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008334:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008338:	42a5      	cmp	r5, r4
 800833a:	d003      	beq.n	8008344 <__mcmp+0x2c>
 800833c:	d305      	bcc.n	800834a <__mcmp+0x32>
 800833e:	2201      	movs	r2, #1
 8008340:	4610      	mov	r0, r2
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	4283      	cmp	r3, r0
 8008346:	d3f3      	bcc.n	8008330 <__mcmp+0x18>
 8008348:	e7fa      	b.n	8008340 <__mcmp+0x28>
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	e7f7      	b.n	8008340 <__mcmp+0x28>

08008350 <__mdiff>:
 8008350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	4606      	mov	r6, r0
 8008358:	4611      	mov	r1, r2
 800835a:	4620      	mov	r0, r4
 800835c:	4690      	mov	r8, r2
 800835e:	f7ff ffdb 	bl	8008318 <__mcmp>
 8008362:	1e05      	subs	r5, r0, #0
 8008364:	d110      	bne.n	8008388 <__mdiff+0x38>
 8008366:	4629      	mov	r1, r5
 8008368:	4630      	mov	r0, r6
 800836a:	f7ff fd53 	bl	8007e14 <_Balloc>
 800836e:	b930      	cbnz	r0, 800837e <__mdiff+0x2e>
 8008370:	4b3a      	ldr	r3, [pc, #232]	; (800845c <__mdiff+0x10c>)
 8008372:	4602      	mov	r2, r0
 8008374:	f240 2132 	movw	r1, #562	; 0x232
 8008378:	4839      	ldr	r0, [pc, #228]	; (8008460 <__mdiff+0x110>)
 800837a:	f000 fb5d 	bl	8008a38 <__assert_func>
 800837e:	2301      	movs	r3, #1
 8008380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008388:	bfa4      	itt	ge
 800838a:	4643      	movge	r3, r8
 800838c:	46a0      	movge	r8, r4
 800838e:	4630      	mov	r0, r6
 8008390:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008394:	bfa6      	itte	ge
 8008396:	461c      	movge	r4, r3
 8008398:	2500      	movge	r5, #0
 800839a:	2501      	movlt	r5, #1
 800839c:	f7ff fd3a 	bl	8007e14 <_Balloc>
 80083a0:	b920      	cbnz	r0, 80083ac <__mdiff+0x5c>
 80083a2:	4b2e      	ldr	r3, [pc, #184]	; (800845c <__mdiff+0x10c>)
 80083a4:	4602      	mov	r2, r0
 80083a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083aa:	e7e5      	b.n	8008378 <__mdiff+0x28>
 80083ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083b0:	6926      	ldr	r6, [r4, #16]
 80083b2:	60c5      	str	r5, [r0, #12]
 80083b4:	f104 0914 	add.w	r9, r4, #20
 80083b8:	f108 0514 	add.w	r5, r8, #20
 80083bc:	f100 0e14 	add.w	lr, r0, #20
 80083c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083c8:	f108 0210 	add.w	r2, r8, #16
 80083cc:	46f2      	mov	sl, lr
 80083ce:	2100      	movs	r1, #0
 80083d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80083d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083d8:	fa1f f883 	uxth.w	r8, r3
 80083dc:	fa11 f18b 	uxtah	r1, r1, fp
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	eba1 0808 	sub.w	r8, r1, r8
 80083e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ee:	fa1f f888 	uxth.w	r8, r8
 80083f2:	1419      	asrs	r1, r3, #16
 80083f4:	454e      	cmp	r6, r9
 80083f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083fa:	f84a 3b04 	str.w	r3, [sl], #4
 80083fe:	d8e7      	bhi.n	80083d0 <__mdiff+0x80>
 8008400:	1b33      	subs	r3, r6, r4
 8008402:	3b15      	subs	r3, #21
 8008404:	f023 0303 	bic.w	r3, r3, #3
 8008408:	3304      	adds	r3, #4
 800840a:	3415      	adds	r4, #21
 800840c:	42a6      	cmp	r6, r4
 800840e:	bf38      	it	cc
 8008410:	2304      	movcc	r3, #4
 8008412:	441d      	add	r5, r3
 8008414:	4473      	add	r3, lr
 8008416:	469e      	mov	lr, r3
 8008418:	462e      	mov	r6, r5
 800841a:	4566      	cmp	r6, ip
 800841c:	d30e      	bcc.n	800843c <__mdiff+0xec>
 800841e:	f10c 0203 	add.w	r2, ip, #3
 8008422:	1b52      	subs	r2, r2, r5
 8008424:	f022 0203 	bic.w	r2, r2, #3
 8008428:	3d03      	subs	r5, #3
 800842a:	45ac      	cmp	ip, r5
 800842c:	bf38      	it	cc
 800842e:	2200      	movcc	r2, #0
 8008430:	441a      	add	r2, r3
 8008432:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008436:	b17b      	cbz	r3, 8008458 <__mdiff+0x108>
 8008438:	6107      	str	r7, [r0, #16]
 800843a:	e7a3      	b.n	8008384 <__mdiff+0x34>
 800843c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008440:	fa11 f288 	uxtah	r2, r1, r8
 8008444:	1414      	asrs	r4, r2, #16
 8008446:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800844a:	b292      	uxth	r2, r2
 800844c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008450:	f84e 2b04 	str.w	r2, [lr], #4
 8008454:	1421      	asrs	r1, r4, #16
 8008456:	e7e0      	b.n	800841a <__mdiff+0xca>
 8008458:	3f01      	subs	r7, #1
 800845a:	e7ea      	b.n	8008432 <__mdiff+0xe2>
 800845c:	08008e37 	.word	0x08008e37
 8008460:	08008e48 	.word	0x08008e48

08008464 <__d2b>:
 8008464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008468:	4689      	mov	r9, r1
 800846a:	2101      	movs	r1, #1
 800846c:	ec57 6b10 	vmov	r6, r7, d0
 8008470:	4690      	mov	r8, r2
 8008472:	f7ff fccf 	bl	8007e14 <_Balloc>
 8008476:	4604      	mov	r4, r0
 8008478:	b930      	cbnz	r0, 8008488 <__d2b+0x24>
 800847a:	4602      	mov	r2, r0
 800847c:	4b25      	ldr	r3, [pc, #148]	; (8008514 <__d2b+0xb0>)
 800847e:	4826      	ldr	r0, [pc, #152]	; (8008518 <__d2b+0xb4>)
 8008480:	f240 310a 	movw	r1, #778	; 0x30a
 8008484:	f000 fad8 	bl	8008a38 <__assert_func>
 8008488:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800848c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008490:	bb35      	cbnz	r5, 80084e0 <__d2b+0x7c>
 8008492:	2e00      	cmp	r6, #0
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	d028      	beq.n	80084ea <__d2b+0x86>
 8008498:	4668      	mov	r0, sp
 800849a:	9600      	str	r6, [sp, #0]
 800849c:	f7ff fd82 	bl	8007fa4 <__lo0bits>
 80084a0:	9900      	ldr	r1, [sp, #0]
 80084a2:	b300      	cbz	r0, 80084e6 <__d2b+0x82>
 80084a4:	9a01      	ldr	r2, [sp, #4]
 80084a6:	f1c0 0320 	rsb	r3, r0, #32
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	430b      	orrs	r3, r1
 80084b0:	40c2      	lsrs	r2, r0
 80084b2:	6163      	str	r3, [r4, #20]
 80084b4:	9201      	str	r2, [sp, #4]
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	61a3      	str	r3, [r4, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bf14      	ite	ne
 80084be:	2202      	movne	r2, #2
 80084c0:	2201      	moveq	r2, #1
 80084c2:	6122      	str	r2, [r4, #16]
 80084c4:	b1d5      	cbz	r5, 80084fc <__d2b+0x98>
 80084c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084ca:	4405      	add	r5, r0
 80084cc:	f8c9 5000 	str.w	r5, [r9]
 80084d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084d4:	f8c8 0000 	str.w	r0, [r8]
 80084d8:	4620      	mov	r0, r4
 80084da:	b003      	add	sp, #12
 80084dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084e4:	e7d5      	b.n	8008492 <__d2b+0x2e>
 80084e6:	6161      	str	r1, [r4, #20]
 80084e8:	e7e5      	b.n	80084b6 <__d2b+0x52>
 80084ea:	a801      	add	r0, sp, #4
 80084ec:	f7ff fd5a 	bl	8007fa4 <__lo0bits>
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	6163      	str	r3, [r4, #20]
 80084f4:	2201      	movs	r2, #1
 80084f6:	6122      	str	r2, [r4, #16]
 80084f8:	3020      	adds	r0, #32
 80084fa:	e7e3      	b.n	80084c4 <__d2b+0x60>
 80084fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008504:	f8c9 0000 	str.w	r0, [r9]
 8008508:	6918      	ldr	r0, [r3, #16]
 800850a:	f7ff fd2b 	bl	8007f64 <__hi0bits>
 800850e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008512:	e7df      	b.n	80084d4 <__d2b+0x70>
 8008514:	08008e37 	.word	0x08008e37
 8008518:	08008e48 	.word	0x08008e48

0800851c <_calloc_r>:
 800851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851e:	fba1 2402 	umull	r2, r4, r1, r2
 8008522:	b94c      	cbnz	r4, 8008538 <_calloc_r+0x1c>
 8008524:	4611      	mov	r1, r2
 8008526:	9201      	str	r2, [sp, #4]
 8008528:	f7fd ffde 	bl	80064e8 <_malloc_r>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	4605      	mov	r5, r0
 8008530:	b930      	cbnz	r0, 8008540 <_calloc_r+0x24>
 8008532:	4628      	mov	r0, r5
 8008534:	b003      	add	sp, #12
 8008536:	bd30      	pop	{r4, r5, pc}
 8008538:	220c      	movs	r2, #12
 800853a:	6002      	str	r2, [r0, #0]
 800853c:	2500      	movs	r5, #0
 800853e:	e7f8      	b.n	8008532 <_calloc_r+0x16>
 8008540:	4621      	mov	r1, r4
 8008542:	f7fd ffa8 	bl	8006496 <memset>
 8008546:	e7f4      	b.n	8008532 <_calloc_r+0x16>

08008548 <_free_r>:
 8008548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854a:	2900      	cmp	r1, #0
 800854c:	d044      	beq.n	80085d8 <_free_r+0x90>
 800854e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008552:	9001      	str	r0, [sp, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f1a1 0404 	sub.w	r4, r1, #4
 800855a:	bfb8      	it	lt
 800855c:	18e4      	addlt	r4, r4, r3
 800855e:	f7ff fc4d 	bl	8007dfc <__malloc_lock>
 8008562:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <_free_r+0x94>)
 8008564:	9801      	ldr	r0, [sp, #4]
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	b933      	cbnz	r3, 8008578 <_free_r+0x30>
 800856a:	6063      	str	r3, [r4, #4]
 800856c:	6014      	str	r4, [r2, #0]
 800856e:	b003      	add	sp, #12
 8008570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008574:	f7ff bc48 	b.w	8007e08 <__malloc_unlock>
 8008578:	42a3      	cmp	r3, r4
 800857a:	d908      	bls.n	800858e <_free_r+0x46>
 800857c:	6825      	ldr	r5, [r4, #0]
 800857e:	1961      	adds	r1, r4, r5
 8008580:	428b      	cmp	r3, r1
 8008582:	bf01      	itttt	eq
 8008584:	6819      	ldreq	r1, [r3, #0]
 8008586:	685b      	ldreq	r3, [r3, #4]
 8008588:	1949      	addeq	r1, r1, r5
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	e7ed      	b.n	800856a <_free_r+0x22>
 800858e:	461a      	mov	r2, r3
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	b10b      	cbz	r3, 8008598 <_free_r+0x50>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d9fa      	bls.n	800858e <_free_r+0x46>
 8008598:	6811      	ldr	r1, [r2, #0]
 800859a:	1855      	adds	r5, r2, r1
 800859c:	42a5      	cmp	r5, r4
 800859e:	d10b      	bne.n	80085b8 <_free_r+0x70>
 80085a0:	6824      	ldr	r4, [r4, #0]
 80085a2:	4421      	add	r1, r4
 80085a4:	1854      	adds	r4, r2, r1
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	d1e0      	bne.n	800856e <_free_r+0x26>
 80085ac:	681c      	ldr	r4, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	6053      	str	r3, [r2, #4]
 80085b2:	4421      	add	r1, r4
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	e7da      	b.n	800856e <_free_r+0x26>
 80085b8:	d902      	bls.n	80085c0 <_free_r+0x78>
 80085ba:	230c      	movs	r3, #12
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	e7d6      	b.n	800856e <_free_r+0x26>
 80085c0:	6825      	ldr	r5, [r4, #0]
 80085c2:	1961      	adds	r1, r4, r5
 80085c4:	428b      	cmp	r3, r1
 80085c6:	bf04      	itt	eq
 80085c8:	6819      	ldreq	r1, [r3, #0]
 80085ca:	685b      	ldreq	r3, [r3, #4]
 80085cc:	6063      	str	r3, [r4, #4]
 80085ce:	bf04      	itt	eq
 80085d0:	1949      	addeq	r1, r1, r5
 80085d2:	6021      	streq	r1, [r4, #0]
 80085d4:	6054      	str	r4, [r2, #4]
 80085d6:	e7ca      	b.n	800856e <_free_r+0x26>
 80085d8:	b003      	add	sp, #12
 80085da:	bd30      	pop	{r4, r5, pc}
 80085dc:	20004404 	.word	0x20004404

080085e0 <__sfputc_r>:
 80085e0:	6893      	ldr	r3, [r2, #8]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	b410      	push	{r4}
 80085e8:	6093      	str	r3, [r2, #8]
 80085ea:	da08      	bge.n	80085fe <__sfputc_r+0x1e>
 80085ec:	6994      	ldr	r4, [r2, #24]
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	db01      	blt.n	80085f6 <__sfputc_r+0x16>
 80085f2:	290a      	cmp	r1, #10
 80085f4:	d103      	bne.n	80085fe <__sfputc_r+0x1e>
 80085f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fa:	f000 b95d 	b.w	80088b8 <__swbuf_r>
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	1c58      	adds	r0, r3, #1
 8008602:	6010      	str	r0, [r2, #0]
 8008604:	7019      	strb	r1, [r3, #0]
 8008606:	4608      	mov	r0, r1
 8008608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860c:	4770      	bx	lr

0800860e <__sfputs_r>:
 800860e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008610:	4606      	mov	r6, r0
 8008612:	460f      	mov	r7, r1
 8008614:	4614      	mov	r4, r2
 8008616:	18d5      	adds	r5, r2, r3
 8008618:	42ac      	cmp	r4, r5
 800861a:	d101      	bne.n	8008620 <__sfputs_r+0x12>
 800861c:	2000      	movs	r0, #0
 800861e:	e007      	b.n	8008630 <__sfputs_r+0x22>
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	463a      	mov	r2, r7
 8008626:	4630      	mov	r0, r6
 8008628:	f7ff ffda 	bl	80085e0 <__sfputc_r>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d1f3      	bne.n	8008618 <__sfputs_r+0xa>
 8008630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008634 <_vfiprintf_r>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	460d      	mov	r5, r1
 800863a:	b09d      	sub	sp, #116	; 0x74
 800863c:	4614      	mov	r4, r2
 800863e:	4698      	mov	r8, r3
 8008640:	4606      	mov	r6, r0
 8008642:	b118      	cbz	r0, 800864c <_vfiprintf_r+0x18>
 8008644:	6983      	ldr	r3, [r0, #24]
 8008646:	b90b      	cbnz	r3, 800864c <_vfiprintf_r+0x18>
 8008648:	f7fd fe52 	bl	80062f0 <__sinit>
 800864c:	4b89      	ldr	r3, [pc, #548]	; (8008874 <_vfiprintf_r+0x240>)
 800864e:	429d      	cmp	r5, r3
 8008650:	d11b      	bne.n	800868a <_vfiprintf_r+0x56>
 8008652:	6875      	ldr	r5, [r6, #4]
 8008654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008656:	07d9      	lsls	r1, r3, #31
 8008658:	d405      	bmi.n	8008666 <_vfiprintf_r+0x32>
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	059a      	lsls	r2, r3, #22
 800865e:	d402      	bmi.n	8008666 <_vfiprintf_r+0x32>
 8008660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008662:	f7fd ff08 	bl	8006476 <__retarget_lock_acquire_recursive>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	071b      	lsls	r3, r3, #28
 800866a:	d501      	bpl.n	8008670 <_vfiprintf_r+0x3c>
 800866c:	692b      	ldr	r3, [r5, #16]
 800866e:	b9eb      	cbnz	r3, 80086ac <_vfiprintf_r+0x78>
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f000 f972 	bl	800895c <__swsetup_r>
 8008678:	b1c0      	cbz	r0, 80086ac <_vfiprintf_r+0x78>
 800867a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867c:	07dc      	lsls	r4, r3, #31
 800867e:	d50e      	bpl.n	800869e <_vfiprintf_r+0x6a>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	b01d      	add	sp, #116	; 0x74
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <_vfiprintf_r+0x244>)
 800868c:	429d      	cmp	r5, r3
 800868e:	d101      	bne.n	8008694 <_vfiprintf_r+0x60>
 8008690:	68b5      	ldr	r5, [r6, #8]
 8008692:	e7df      	b.n	8008654 <_vfiprintf_r+0x20>
 8008694:	4b79      	ldr	r3, [pc, #484]	; (800887c <_vfiprintf_r+0x248>)
 8008696:	429d      	cmp	r5, r3
 8008698:	bf08      	it	eq
 800869a:	68f5      	ldreq	r5, [r6, #12]
 800869c:	e7da      	b.n	8008654 <_vfiprintf_r+0x20>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	0598      	lsls	r0, r3, #22
 80086a2:	d4ed      	bmi.n	8008680 <_vfiprintf_r+0x4c>
 80086a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086a6:	f7fd fee7 	bl	8006478 <__retarget_lock_release_recursive>
 80086aa:	e7e9      	b.n	8008680 <_vfiprintf_r+0x4c>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9309      	str	r3, [sp, #36]	; 0x24
 80086b0:	2320      	movs	r3, #32
 80086b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ba:	2330      	movs	r3, #48	; 0x30
 80086bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008880 <_vfiprintf_r+0x24c>
 80086c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c4:	f04f 0901 	mov.w	r9, #1
 80086c8:	4623      	mov	r3, r4
 80086ca:	469a      	mov	sl, r3
 80086cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d0:	b10a      	cbz	r2, 80086d6 <_vfiprintf_r+0xa2>
 80086d2:	2a25      	cmp	r2, #37	; 0x25
 80086d4:	d1f9      	bne.n	80086ca <_vfiprintf_r+0x96>
 80086d6:	ebba 0b04 	subs.w	fp, sl, r4
 80086da:	d00b      	beq.n	80086f4 <_vfiprintf_r+0xc0>
 80086dc:	465b      	mov	r3, fp
 80086de:	4622      	mov	r2, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ff93 	bl	800860e <__sfputs_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	f000 80aa 	beq.w	8008842 <_vfiprintf_r+0x20e>
 80086ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f0:	445a      	add	r2, fp
 80086f2:	9209      	str	r2, [sp, #36]	; 0x24
 80086f4:	f89a 3000 	ldrb.w	r3, [sl]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80a2 	beq.w	8008842 <_vfiprintf_r+0x20e>
 80086fe:	2300      	movs	r3, #0
 8008700:	f04f 32ff 	mov.w	r2, #4294967295
 8008704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008708:	f10a 0a01 	add.w	sl, sl, #1
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008714:	931a      	str	r3, [sp, #104]	; 0x68
 8008716:	4654      	mov	r4, sl
 8008718:	2205      	movs	r2, #5
 800871a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871e:	4858      	ldr	r0, [pc, #352]	; (8008880 <_vfiprintf_r+0x24c>)
 8008720:	f7f7 fd96 	bl	8000250 <memchr>
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	b9d8      	cbnz	r0, 8008760 <_vfiprintf_r+0x12c>
 8008728:	06d1      	lsls	r1, r2, #27
 800872a:	bf44      	itt	mi
 800872c:	2320      	movmi	r3, #32
 800872e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008732:	0713      	lsls	r3, r2, #28
 8008734:	bf44      	itt	mi
 8008736:	232b      	movmi	r3, #43	; 0x2b
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	f89a 3000 	ldrb.w	r3, [sl]
 8008740:	2b2a      	cmp	r3, #42	; 0x2a
 8008742:	d015      	beq.n	8008770 <_vfiprintf_r+0x13c>
 8008744:	9a07      	ldr	r2, [sp, #28]
 8008746:	4654      	mov	r4, sl
 8008748:	2000      	movs	r0, #0
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	4621      	mov	r1, r4
 8008750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008754:	3b30      	subs	r3, #48	; 0x30
 8008756:	2b09      	cmp	r3, #9
 8008758:	d94e      	bls.n	80087f8 <_vfiprintf_r+0x1c4>
 800875a:	b1b0      	cbz	r0, 800878a <_vfiprintf_r+0x156>
 800875c:	9207      	str	r2, [sp, #28]
 800875e:	e014      	b.n	800878a <_vfiprintf_r+0x156>
 8008760:	eba0 0308 	sub.w	r3, r0, r8
 8008764:	fa09 f303 	lsl.w	r3, r9, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	46a2      	mov	sl, r4
 800876e:	e7d2      	b.n	8008716 <_vfiprintf_r+0xe2>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d19      	adds	r1, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9103      	str	r1, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfbb      	ittet	lt
 800877c:	425b      	neglt	r3, r3
 800877e:	f042 0202 	orrlt.w	r2, r2, #2
 8008782:	9307      	strge	r3, [sp, #28]
 8008784:	9307      	strlt	r3, [sp, #28]
 8008786:	bfb8      	it	lt
 8008788:	9204      	strlt	r2, [sp, #16]
 800878a:	7823      	ldrb	r3, [r4, #0]
 800878c:	2b2e      	cmp	r3, #46	; 0x2e
 800878e:	d10c      	bne.n	80087aa <_vfiprintf_r+0x176>
 8008790:	7863      	ldrb	r3, [r4, #1]
 8008792:	2b2a      	cmp	r3, #42	; 0x2a
 8008794:	d135      	bne.n	8008802 <_vfiprintf_r+0x1ce>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	1d1a      	adds	r2, r3, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	9203      	str	r2, [sp, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfb8      	it	lt
 80087a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a6:	3402      	adds	r4, #2
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008890 <_vfiprintf_r+0x25c>
 80087ae:	7821      	ldrb	r1, [r4, #0]
 80087b0:	2203      	movs	r2, #3
 80087b2:	4650      	mov	r0, sl
 80087b4:	f7f7 fd4c 	bl	8000250 <memchr>
 80087b8:	b140      	cbz	r0, 80087cc <_vfiprintf_r+0x198>
 80087ba:	2340      	movs	r3, #64	; 0x40
 80087bc:	eba0 000a 	sub.w	r0, r0, sl
 80087c0:	fa03 f000 	lsl.w	r0, r3, r0
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	4303      	orrs	r3, r0
 80087c8:	3401      	adds	r4, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d0:	482c      	ldr	r0, [pc, #176]	; (8008884 <_vfiprintf_r+0x250>)
 80087d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d6:	2206      	movs	r2, #6
 80087d8:	f7f7 fd3a 	bl	8000250 <memchr>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d03f      	beq.n	8008860 <_vfiprintf_r+0x22c>
 80087e0:	4b29      	ldr	r3, [pc, #164]	; (8008888 <_vfiprintf_r+0x254>)
 80087e2:	bb1b      	cbnz	r3, 800882c <_vfiprintf_r+0x1f8>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	3307      	adds	r3, #7
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	3308      	adds	r3, #8
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	443b      	add	r3, r7
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	e767      	b.n	80086c8 <_vfiprintf_r+0x94>
 80087f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087fc:	460c      	mov	r4, r1
 80087fe:	2001      	movs	r0, #1
 8008800:	e7a5      	b.n	800874e <_vfiprintf_r+0x11a>
 8008802:	2300      	movs	r3, #0
 8008804:	3401      	adds	r4, #1
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	4619      	mov	r1, r3
 800880a:	f04f 0c0a 	mov.w	ip, #10
 800880e:	4620      	mov	r0, r4
 8008810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008814:	3a30      	subs	r2, #48	; 0x30
 8008816:	2a09      	cmp	r2, #9
 8008818:	d903      	bls.n	8008822 <_vfiprintf_r+0x1ee>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0c5      	beq.n	80087aa <_vfiprintf_r+0x176>
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	e7c3      	b.n	80087aa <_vfiprintf_r+0x176>
 8008822:	fb0c 2101 	mla	r1, ip, r1, r2
 8008826:	4604      	mov	r4, r0
 8008828:	2301      	movs	r3, #1
 800882a:	e7f0      	b.n	800880e <_vfiprintf_r+0x1da>
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <_vfiprintf_r+0x258>)
 8008834:	a904      	add	r1, sp, #16
 8008836:	4630      	mov	r0, r6
 8008838:	f7fd ff5a 	bl	80066f0 <_printf_float>
 800883c:	4607      	mov	r7, r0
 800883e:	1c78      	adds	r0, r7, #1
 8008840:	d1d6      	bne.n	80087f0 <_vfiprintf_r+0x1bc>
 8008842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	d405      	bmi.n	8008854 <_vfiprintf_r+0x220>
 8008848:	89ab      	ldrh	r3, [r5, #12]
 800884a:	059a      	lsls	r2, r3, #22
 800884c:	d402      	bmi.n	8008854 <_vfiprintf_r+0x220>
 800884e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008850:	f7fd fe12 	bl	8006478 <__retarget_lock_release_recursive>
 8008854:	89ab      	ldrh	r3, [r5, #12]
 8008856:	065b      	lsls	r3, r3, #25
 8008858:	f53f af12 	bmi.w	8008680 <_vfiprintf_r+0x4c>
 800885c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885e:	e711      	b.n	8008684 <_vfiprintf_r+0x50>
 8008860:	ab03      	add	r3, sp, #12
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	462a      	mov	r2, r5
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <_vfiprintf_r+0x258>)
 8008868:	a904      	add	r1, sp, #16
 800886a:	4630      	mov	r0, r6
 800886c:	f7fe f9cc 	bl	8006c08 <_printf_i>
 8008870:	e7e4      	b.n	800883c <_vfiprintf_r+0x208>
 8008872:	bf00      	nop
 8008874:	08008d40 	.word	0x08008d40
 8008878:	08008d60 	.word	0x08008d60
 800887c:	08008d20 	.word	0x08008d20
 8008880:	08008fa4 	.word	0x08008fa4
 8008884:	08008fae 	.word	0x08008fae
 8008888:	080066f1 	.word	0x080066f1
 800888c:	0800860f 	.word	0x0800860f
 8008890:	08008faa 	.word	0x08008faa

08008894 <_read_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	; (80088b4 <_read_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7f8 fd90 	bl	80013c8 <_read>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_read_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_read_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	2000440c 	.word	0x2000440c

080088b8 <__swbuf_r>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	460e      	mov	r6, r1
 80088bc:	4614      	mov	r4, r2
 80088be:	4605      	mov	r5, r0
 80088c0:	b118      	cbz	r0, 80088ca <__swbuf_r+0x12>
 80088c2:	6983      	ldr	r3, [r0, #24]
 80088c4:	b90b      	cbnz	r3, 80088ca <__swbuf_r+0x12>
 80088c6:	f7fd fd13 	bl	80062f0 <__sinit>
 80088ca:	4b21      	ldr	r3, [pc, #132]	; (8008950 <__swbuf_r+0x98>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	d12b      	bne.n	8008928 <__swbuf_r+0x70>
 80088d0:	686c      	ldr	r4, [r5, #4]
 80088d2:	69a3      	ldr	r3, [r4, #24]
 80088d4:	60a3      	str	r3, [r4, #8]
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	071a      	lsls	r2, r3, #28
 80088da:	d52f      	bpl.n	800893c <__swbuf_r+0x84>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	b36b      	cbz	r3, 800893c <__swbuf_r+0x84>
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	6820      	ldr	r0, [r4, #0]
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	6963      	ldr	r3, [r4, #20]
 80088e8:	b2f6      	uxtb	r6, r6
 80088ea:	4283      	cmp	r3, r0
 80088ec:	4637      	mov	r7, r6
 80088ee:	dc04      	bgt.n	80088fa <__swbuf_r+0x42>
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7ff fa28 	bl	8007d48 <_fflush_r>
 80088f8:	bb30      	cbnz	r0, 8008948 <__swbuf_r+0x90>
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	6022      	str	r2, [r4, #0]
 8008906:	701e      	strb	r6, [r3, #0]
 8008908:	6963      	ldr	r3, [r4, #20]
 800890a:	3001      	adds	r0, #1
 800890c:	4283      	cmp	r3, r0
 800890e:	d004      	beq.n	800891a <__swbuf_r+0x62>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	07db      	lsls	r3, r3, #31
 8008914:	d506      	bpl.n	8008924 <__swbuf_r+0x6c>
 8008916:	2e0a      	cmp	r6, #10
 8008918:	d104      	bne.n	8008924 <__swbuf_r+0x6c>
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff fa13 	bl	8007d48 <_fflush_r>
 8008922:	b988      	cbnz	r0, 8008948 <__swbuf_r+0x90>
 8008924:	4638      	mov	r0, r7
 8008926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <__swbuf_r+0x9c>)
 800892a:	429c      	cmp	r4, r3
 800892c:	d101      	bne.n	8008932 <__swbuf_r+0x7a>
 800892e:	68ac      	ldr	r4, [r5, #8]
 8008930:	e7cf      	b.n	80088d2 <__swbuf_r+0x1a>
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <__swbuf_r+0xa0>)
 8008934:	429c      	cmp	r4, r3
 8008936:	bf08      	it	eq
 8008938:	68ec      	ldreq	r4, [r5, #12]
 800893a:	e7ca      	b.n	80088d2 <__swbuf_r+0x1a>
 800893c:	4621      	mov	r1, r4
 800893e:	4628      	mov	r0, r5
 8008940:	f000 f80c 	bl	800895c <__swsetup_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	d0cb      	beq.n	80088e0 <__swbuf_r+0x28>
 8008948:	f04f 37ff 	mov.w	r7, #4294967295
 800894c:	e7ea      	b.n	8008924 <__swbuf_r+0x6c>
 800894e:	bf00      	nop
 8008950:	08008d40 	.word	0x08008d40
 8008954:	08008d60 	.word	0x08008d60
 8008958:	08008d20 	.word	0x08008d20

0800895c <__swsetup_r>:
 800895c:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <__swsetup_r+0xcc>)
 800895e:	b570      	push	{r4, r5, r6, lr}
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	4606      	mov	r6, r0
 8008964:	460c      	mov	r4, r1
 8008966:	b125      	cbz	r5, 8008972 <__swsetup_r+0x16>
 8008968:	69ab      	ldr	r3, [r5, #24]
 800896a:	b913      	cbnz	r3, 8008972 <__swsetup_r+0x16>
 800896c:	4628      	mov	r0, r5
 800896e:	f7fd fcbf 	bl	80062f0 <__sinit>
 8008972:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <__swsetup_r+0xd0>)
 8008974:	429c      	cmp	r4, r3
 8008976:	d10f      	bne.n	8008998 <__swsetup_r+0x3c>
 8008978:	686c      	ldr	r4, [r5, #4]
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008980:	0719      	lsls	r1, r3, #28
 8008982:	d42c      	bmi.n	80089de <__swsetup_r+0x82>
 8008984:	06dd      	lsls	r5, r3, #27
 8008986:	d411      	bmi.n	80089ac <__swsetup_r+0x50>
 8008988:	2309      	movs	r3, #9
 800898a:	6033      	str	r3, [r6, #0]
 800898c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008990:	81a3      	strh	r3, [r4, #12]
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e03e      	b.n	8008a16 <__swsetup_r+0xba>
 8008998:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <__swsetup_r+0xd4>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d101      	bne.n	80089a2 <__swsetup_r+0x46>
 800899e:	68ac      	ldr	r4, [r5, #8]
 80089a0:	e7eb      	b.n	800897a <__swsetup_r+0x1e>
 80089a2:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <__swsetup_r+0xd8>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	bf08      	it	eq
 80089a8:	68ec      	ldreq	r4, [r5, #12]
 80089aa:	e7e6      	b.n	800897a <__swsetup_r+0x1e>
 80089ac:	0758      	lsls	r0, r3, #29
 80089ae:	d512      	bpl.n	80089d6 <__swsetup_r+0x7a>
 80089b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089b2:	b141      	cbz	r1, 80089c6 <__swsetup_r+0x6a>
 80089b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d002      	beq.n	80089c2 <__swsetup_r+0x66>
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff fdc3 	bl	8008548 <_free_r>
 80089c2:	2300      	movs	r3, #0
 80089c4:	6363      	str	r3, [r4, #52]	; 0x34
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	2300      	movs	r3, #0
 80089d0:	6063      	str	r3, [r4, #4]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f043 0308 	orr.w	r3, r3, #8
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	b94b      	cbnz	r3, 80089f6 <__swsetup_r+0x9a>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ec:	d003      	beq.n	80089f6 <__swsetup_r+0x9a>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4630      	mov	r0, r6
 80089f2:	f000 f877 	bl	8008ae4 <__smakebuf_r>
 80089f6:	89a0      	ldrh	r0, [r4, #12]
 80089f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089fc:	f010 0301 	ands.w	r3, r0, #1
 8008a00:	d00a      	beq.n	8008a18 <__swsetup_r+0xbc>
 8008a02:	2300      	movs	r3, #0
 8008a04:	60a3      	str	r3, [r4, #8]
 8008a06:	6963      	ldr	r3, [r4, #20]
 8008a08:	425b      	negs	r3, r3
 8008a0a:	61a3      	str	r3, [r4, #24]
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	b943      	cbnz	r3, 8008a22 <__swsetup_r+0xc6>
 8008a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a14:	d1ba      	bne.n	800898c <__swsetup_r+0x30>
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	0781      	lsls	r1, r0, #30
 8008a1a:	bf58      	it	pl
 8008a1c:	6963      	ldrpl	r3, [r4, #20]
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	e7f4      	b.n	8008a0c <__swsetup_r+0xb0>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e7f7      	b.n	8008a16 <__swsetup_r+0xba>
 8008a26:	bf00      	nop
 8008a28:	20000010 	.word	0x20000010
 8008a2c:	08008d40 	.word	0x08008d40
 8008a30:	08008d60 	.word	0x08008d60
 8008a34:	08008d20 	.word	0x08008d20

08008a38 <__assert_func>:
 8008a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <__assert_func+0x2c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4605      	mov	r5, r0
 8008a44:	68d8      	ldr	r0, [r3, #12]
 8008a46:	b14c      	cbz	r4, 8008a5c <__assert_func+0x24>
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <__assert_func+0x30>)
 8008a4a:	9100      	str	r1, [sp, #0]
 8008a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a50:	4906      	ldr	r1, [pc, #24]	; (8008a6c <__assert_func+0x34>)
 8008a52:	462b      	mov	r3, r5
 8008a54:	f000 f80e 	bl	8008a74 <fiprintf>
 8008a58:	f000 f8a3 	bl	8008ba2 <abort>
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <__assert_func+0x38>)
 8008a5e:	461c      	mov	r4, r3
 8008a60:	e7f3      	b.n	8008a4a <__assert_func+0x12>
 8008a62:	bf00      	nop
 8008a64:	20000010 	.word	0x20000010
 8008a68:	08008fb5 	.word	0x08008fb5
 8008a6c:	08008fc2 	.word	0x08008fc2
 8008a70:	08008ff0 	.word	0x08008ff0

08008a74 <fiprintf>:
 8008a74:	b40e      	push	{r1, r2, r3}
 8008a76:	b503      	push	{r0, r1, lr}
 8008a78:	4601      	mov	r1, r0
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <fiprintf+0x20>)
 8008a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a82:	6800      	ldr	r0, [r0, #0]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f7ff fdd5 	bl	8008634 <_vfiprintf_r>
 8008a8a:	b002      	add	sp, #8
 8008a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a90:	b003      	add	sp, #12
 8008a92:	4770      	bx	lr
 8008a94:	20000010 	.word	0x20000010

08008a98 <__swhatbuf_r>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	460e      	mov	r6, r1
 8008a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	b096      	sub	sp, #88	; 0x58
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	461d      	mov	r5, r3
 8008aa8:	da08      	bge.n	8008abc <__swhatbuf_r+0x24>
 8008aaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	602a      	str	r2, [r5, #0]
 8008ab2:	061a      	lsls	r2, r3, #24
 8008ab4:	d410      	bmi.n	8008ad8 <__swhatbuf_r+0x40>
 8008ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aba:	e00e      	b.n	8008ada <__swhatbuf_r+0x42>
 8008abc:	466a      	mov	r2, sp
 8008abe:	f000 f877 	bl	8008bb0 <_fstat_r>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	dbf1      	blt.n	8008aaa <__swhatbuf_r+0x12>
 8008ac6:	9a01      	ldr	r2, [sp, #4]
 8008ac8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008acc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ad0:	425a      	negs	r2, r3
 8008ad2:	415a      	adcs	r2, r3
 8008ad4:	602a      	str	r2, [r5, #0]
 8008ad6:	e7ee      	b.n	8008ab6 <__swhatbuf_r+0x1e>
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	2000      	movs	r0, #0
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	b016      	add	sp, #88	; 0x58
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ae4 <__smakebuf_r>:
 8008ae4:	898b      	ldrh	r3, [r1, #12]
 8008ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ae8:	079d      	lsls	r5, r3, #30
 8008aea:	4606      	mov	r6, r0
 8008aec:	460c      	mov	r4, r1
 8008aee:	d507      	bpl.n	8008b00 <__smakebuf_r+0x1c>
 8008af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	2301      	movs	r3, #1
 8008afa:	6163      	str	r3, [r4, #20]
 8008afc:	b002      	add	sp, #8
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	ab01      	add	r3, sp, #4
 8008b02:	466a      	mov	r2, sp
 8008b04:	f7ff ffc8 	bl	8008a98 <__swhatbuf_r>
 8008b08:	9900      	ldr	r1, [sp, #0]
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7fd fceb 	bl	80064e8 <_malloc_r>
 8008b12:	b948      	cbnz	r0, 8008b28 <__smakebuf_r+0x44>
 8008b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b18:	059a      	lsls	r2, r3, #22
 8008b1a:	d4ef      	bmi.n	8008afc <__smakebuf_r+0x18>
 8008b1c:	f023 0303 	bic.w	r3, r3, #3
 8008b20:	f043 0302 	orr.w	r3, r3, #2
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	e7e3      	b.n	8008af0 <__smakebuf_r+0xc>
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <__smakebuf_r+0x7c>)
 8008b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	6020      	str	r0, [r4, #0]
 8008b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	6163      	str	r3, [r4, #20]
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	6120      	str	r0, [r4, #16]
 8008b3e:	b15b      	cbz	r3, 8008b58 <__smakebuf_r+0x74>
 8008b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b44:	4630      	mov	r0, r6
 8008b46:	f000 f845 	bl	8008bd4 <_isatty_r>
 8008b4a:	b128      	cbz	r0, 8008b58 <__smakebuf_r+0x74>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	89a0      	ldrh	r0, [r4, #12]
 8008b5a:	4305      	orrs	r5, r0
 8008b5c:	81a5      	strh	r5, [r4, #12]
 8008b5e:	e7cd      	b.n	8008afc <__smakebuf_r+0x18>
 8008b60:	08006289 	.word	0x08006289

08008b64 <__ascii_mbtowc>:
 8008b64:	b082      	sub	sp, #8
 8008b66:	b901      	cbnz	r1, 8008b6a <__ascii_mbtowc+0x6>
 8008b68:	a901      	add	r1, sp, #4
 8008b6a:	b142      	cbz	r2, 8008b7e <__ascii_mbtowc+0x1a>
 8008b6c:	b14b      	cbz	r3, 8008b82 <__ascii_mbtowc+0x1e>
 8008b6e:	7813      	ldrb	r3, [r2, #0]
 8008b70:	600b      	str	r3, [r1, #0]
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	1e10      	subs	r0, r2, #0
 8008b76:	bf18      	it	ne
 8008b78:	2001      	movne	r0, #1
 8008b7a:	b002      	add	sp, #8
 8008b7c:	4770      	bx	lr
 8008b7e:	4610      	mov	r0, r2
 8008b80:	e7fb      	b.n	8008b7a <__ascii_mbtowc+0x16>
 8008b82:	f06f 0001 	mvn.w	r0, #1
 8008b86:	e7f8      	b.n	8008b7a <__ascii_mbtowc+0x16>

08008b88 <__ascii_wctomb>:
 8008b88:	b149      	cbz	r1, 8008b9e <__ascii_wctomb+0x16>
 8008b8a:	2aff      	cmp	r2, #255	; 0xff
 8008b8c:	bf85      	ittet	hi
 8008b8e:	238a      	movhi	r3, #138	; 0x8a
 8008b90:	6003      	strhi	r3, [r0, #0]
 8008b92:	700a      	strbls	r2, [r1, #0]
 8008b94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b98:	bf98      	it	ls
 8008b9a:	2001      	movls	r0, #1
 8008b9c:	4770      	bx	lr
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4770      	bx	lr

08008ba2 <abort>:
 8008ba2:	b508      	push	{r3, lr}
 8008ba4:	2006      	movs	r0, #6
 8008ba6:	f000 f84d 	bl	8008c44 <raise>
 8008baa:	2001      	movs	r0, #1
 8008bac:	f7f8 fc02 	bl	80013b4 <_exit>

08008bb0 <_fstat_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_fstat_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f8 fc48 	bl	8001452 <_fstat>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_fstat_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_fstat_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	2000440c 	.word	0x2000440c

08008bd4 <_isatty_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d06      	ldr	r5, [pc, #24]	; (8008bf0 <_isatty_r+0x1c>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f7f8 fc47 	bl	8001472 <_isatty>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_isatty_r+0x1a>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_isatty_r+0x1a>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	2000440c 	.word	0x2000440c

08008bf4 <_raise_r>:
 8008bf4:	291f      	cmp	r1, #31
 8008bf6:	b538      	push	{r3, r4, r5, lr}
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	460d      	mov	r5, r1
 8008bfc:	d904      	bls.n	8008c08 <_raise_r+0x14>
 8008bfe:	2316      	movs	r3, #22
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c0a:	b112      	cbz	r2, 8008c12 <_raise_r+0x1e>
 8008c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c10:	b94b      	cbnz	r3, 8008c26 <_raise_r+0x32>
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 f830 	bl	8008c78 <_getpid_r>
 8008c18:	462a      	mov	r2, r5
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c22:	f000 b817 	b.w	8008c54 <_kill_r>
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d00a      	beq.n	8008c40 <_raise_r+0x4c>
 8008c2a:	1c59      	adds	r1, r3, #1
 8008c2c:	d103      	bne.n	8008c36 <_raise_r+0x42>
 8008c2e:	2316      	movs	r3, #22
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	2001      	movs	r0, #1
 8008c34:	e7e7      	b.n	8008c06 <_raise_r+0x12>
 8008c36:	2400      	movs	r4, #0
 8008c38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	4798      	blx	r3
 8008c40:	2000      	movs	r0, #0
 8008c42:	e7e0      	b.n	8008c06 <_raise_r+0x12>

08008c44 <raise>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <raise+0xc>)
 8008c46:	4601      	mov	r1, r0
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f7ff bfd3 	b.w	8008bf4 <_raise_r>
 8008c4e:	bf00      	nop
 8008c50:	20000010 	.word	0x20000010

08008c54 <_kill_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	; (8008c74 <_kill_r+0x20>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f7f8 fb97 	bl	8001394 <_kill>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d102      	bne.n	8008c70 <_kill_r+0x1c>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	b103      	cbz	r3, 8008c70 <_kill_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	2000440c 	.word	0x2000440c

08008c78 <_getpid_r>:
 8008c78:	f7f8 bb84 	b.w	8001384 <_getpid>

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
