
PID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008904  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008b08  08008b08  00018b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f4c  08008f4c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f54  08008f54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004230  200001e0  0800913c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004410  0800913c  00024410  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0e5  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003601  00000000  00000000  0003a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003edd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b693  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018428  00000000  00000000  0006b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c4f4  00000000  00000000  00083bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001900ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  00190140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008aec 	.word	0x08008aec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08008aec 	.word	0x08008aec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200001fc 	.word	0x200001fc
 8000624:	200002b0 	.word	0x200002b0

08000628 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <__io_putchar+0x20>)
 800063a:	f003 fe35 	bl	80042a8 <HAL_UART_Transmit>

  return ch;
 800063e:	687b      	ldr	r3, [r7, #4]

}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200005a0 	.word	0x200005a0

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fee8 	bl	8001426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f83b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f9f7 	bl	8000a4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800065e:	f000 f9c5 	bl	80009ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000662:	f000 f8a5 	bl	80007b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000666:	f000 f8f5 	bl	8000854 <MX_ADC2_Init>
  MX_DAC_Init();
 800066a:	f000 f945 	bl	80008f8 <MX_DAC_Init>
  MX_TIM3_Init();
 800066e:	f000 f96d 	bl	800094c <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <main+0x74>)
 8000674:	f107 041c 	add.w	r4, r7, #28
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fad1 	bl	8004c34 <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <main+0x78>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADCTASK */
  osThreadDef(ADCTASK, STARTADCTASK, osPriorityLow, 0, 128);
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <main+0x7c>)
 800069a:	463c      	mov	r4, r7
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADCTASKHandle = osThreadCreate(osThread(ADCTASK), NULL);
 80006aa:	463b      	mov	r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fac0 	bl	8004c34 <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <main+0x80>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f004 fab4 	bl	8004c26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x72>
 80006c0:	08008b1c 	.word	0x08008b1c
 80006c4:	20000624 	.word	0x20000624
 80006c8:	08008b38 	.word	0x08008b38
 80006cc:	20000628 	.word	0x20000628

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fe29 	bl	8006336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f001 fe9c 	bl	8002430 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <SystemClock_Config+0xdc>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000740:	23d8      	movs	r3, #216	; 0xd8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fecb 	bl	80024f0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 fb8c 	bl	8000e7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f001 fe74 	bl	8002450 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076e:	f000 fb85 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2107      	movs	r1, #7
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f95b 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800079c:	f000 fb6e 	bl	8000e7c <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0x98>)
 8000812:	f000 fe35 	bl	8001480 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 fb2e 	bl	8000e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000820:	2303      	movs	r3, #3
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0x98>)
 8000832:	f001 f803 	bl	800183c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fb1e 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200004b0 	.word	0x200004b0
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC2_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC2_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC2_Init+0x98>)
 800086e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000872:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC2_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC2_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC2_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC2_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b6:	f000 fde3 	bl	8001480 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fadc 	bl	8000e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC2_Init+0x98>)
 80008d6:	f000 ffb1 	bl	800183c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 facc 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200004f8 	.word	0x200004f8
 80008f0:	40012100 	.word	0x40012100
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_DAC_Init+0x4c>)
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <MX_DAC_Init+0x50>)
 800090a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_DAC_Init+0x4c>)
 800090e:	f001 fac7 	bl	8001ea0 <HAL_DAC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000918:	f000 fab0 	bl	8000e7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_DAC_Init+0x4c>)
 800092c:	f001 fb51 	bl	8001fd2 <HAL_DAC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000936:	f000 faa1 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000540 	.word	0x20000540
 8000948:	40007400 	.word	0x40007400

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM3_Init+0x98>)
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <MX_TIM3_Init+0x9c>)
 800096e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000976:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_TIM3_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM3_Init+0x98>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000992:	4814      	ldr	r0, [pc, #80]	; (80009e4 <MX_TIM3_Init+0x98>)
 8000994:	f002 feda 	bl	800374c <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800099e:	f000 fa6d 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_TIM3_Init+0x98>)
 80009b0:	f003 f954 	bl	8003c5c <HAL_TIM_ConfigClockSource>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009ba:	f000 fa5f 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_TIM3_Init+0x98>)
 80009cc:	f003 fb72 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 fa51 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000554 	.word	0x20000554
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART3_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a30:	f003 fbec 	bl	800420c <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 fa1f 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200005a0 	.word	0x200005a0
 8000a48:	40004800 	.word	0x40004800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b77      	ldr	r3, [pc, #476]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a76      	ldr	r2, [pc, #472]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b71      	ldr	r3, [pc, #452]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a70      	ldr	r2, [pc, #448]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b6e      	ldr	r3, [pc, #440]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b6b      	ldr	r3, [pc, #428]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a6a      	ldr	r2, [pc, #424]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b65      	ldr	r3, [pc, #404]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a64      	ldr	r2, [pc, #400]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a5e      	ldr	r2, [pc, #376]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <MX_GPIO_Init+0x1f4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af8:	4852      	ldr	r0, [pc, #328]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000afa:	f001 fc65 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4851      	ldr	r0, [pc, #324]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000b04:	f001 fc60 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	484b      	ldr	r0, [pc, #300]	; (8000c4c <MX_GPIO_Init+0x200>)
 8000b20:	f001 faa6 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b24:	2332      	movs	r3, #50	; 0x32
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4843      	ldr	r0, [pc, #268]	; (8000c4c <MX_GPIO_Init+0x200>)
 8000b40:	f001 fa96 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b44:	2386      	movs	r3, #134	; 0x86
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	483c      	ldr	r0, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000b60:	f001 fa86 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4831      	ldr	r0, [pc, #196]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000b7e:	f001 fa77 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <MX_GPIO_Init+0x1f8>)
 8000ba0:	f001 fa66 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000bbc:	f001 fa58 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000bd4:	f001 fa4c 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bea:	230a      	movs	r3, #10
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4816      	ldr	r0, [pc, #88]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000bf6:	f001 fa3b 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_GPIO_Init+0x204>)
 8000c10:	f001 fa2e 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_GPIO_Init+0x1fc>)
 8000c32:	f001 fa1d 	bl	8002070 <HAL_GPIO_Init>

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin);
 8000c5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <StartDefaultTask+0x1c>)
 8000c62:	f001 fbca 	bl	80023fa <HAL_GPIO_TogglePin>
    osDelay(200);
 8000c66:	20c8      	movs	r0, #200	; 0xc8
 8000c68:	f004 f830 	bl	8004ccc <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin);
 8000c6c:	e7f6      	b.n	8000c5c <StartDefaultTask+0x8>
 8000c6e:	bf00      	nop
 8000c70:	40020400 	.word	0x40020400

08000c74 <STARTADCTASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STARTADCTASK */
void STARTADCTASK(void const * argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STARTADCTASK */

	KP=0;
 8000c7c:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <STARTADCTASK+0x198>)
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
	KI=1;
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <STARTADCTASK+0x19c>)
 8000c86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c8a:	601a      	str	r2, [r3, #0]
	KD=0;
 8000c8c:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <STARTADCTASK+0x1a0>)
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]


	 /* Infinite loop */
  for(;;)
  {
		HAL_ADC_Start(&hadc1);
 8000c94:	4860      	ldr	r0, [pc, #384]	; (8000e18 <STARTADCTASK+0x1a4>)
 8000c96:	f000 fc37 	bl	8001508 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	485e      	ldr	r0, [pc, #376]	; (8000e18 <STARTADCTASK+0x1a4>)
 8000c9e:	f000 fd35 	bl	800170c <HAL_ADC_PollForConversion>
		SetPoint = (float)HAL_ADC_GetValue(&hadc1);
 8000ca2:	485d      	ldr	r0, [pc, #372]	; (8000e18 <STARTADCTASK+0x1a4>)
 8000ca4:	f000 fdbd 	bl	8001822 <HAL_ADC_GetValue>
 8000ca8:	ee07 0a90 	vmov	s15, r0
 8000cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <STARTADCTASK+0x1a8>)
 8000cb2:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8000cb6:	4858      	ldr	r0, [pc, #352]	; (8000e18 <STARTADCTASK+0x1a4>)
 8000cb8:	f000 fcf4 	bl	80016a4 <HAL_ADC_Stop>
	    if(SetPoint >4050)
 8000cbc:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <STARTADCTASK+0x1a8>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000e20 <STARTADCTASK+0x1ac>
 8000cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	dd02      	ble.n	8000cd6 <STARTADCTASK+0x62>
	    {
	    	SetPoint = 4050;
 8000cd0:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <STARTADCTASK+0x1a8>)
 8000cd2:	4a54      	ldr	r2, [pc, #336]	; (8000e24 <STARTADCTASK+0x1b0>)
 8000cd4:	601a      	str	r2, [r3, #0]

	    }


	    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4853      	ldr	r0, [pc, #332]	; (8000e28 <STARTADCTASK+0x1b4>)
 8000cda:	f001 f903 	bl	8001ee4 <HAL_DAC_Start>
	   	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)DAC_VAL);
 8000cde:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <STARTADCTASK+0x1b8>)
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce8:	ee17 3a90 	vmov	r3, s15
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	484d      	ldr	r0, [pc, #308]	; (8000e28 <STARTADCTASK+0x1b4>)
 8000cf4:	f001 f948 	bl	8001f88 <HAL_DAC_SetValue>

	   	HAL_ADC_Start(&hadc2);
 8000cf8:	484d      	ldr	r0, [pc, #308]	; (8000e30 <STARTADCTASK+0x1bc>)
 8000cfa:	f000 fc05 	bl	8001508 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc2, 10);
 8000cfe:	210a      	movs	r1, #10
 8000d00:	484b      	ldr	r0, [pc, #300]	; (8000e30 <STARTADCTASK+0x1bc>)
 8000d02:	f000 fd03 	bl	800170c <HAL_ADC_PollForConversion>
	   	Feedback = (float)HAL_ADC_GetValue(&hadc2);
 8000d06:	484a      	ldr	r0, [pc, #296]	; (8000e30 <STARTADCTASK+0x1bc>)
 8000d08:	f000 fd8b 	bl	8001822 <HAL_ADC_GetValue>
 8000d0c:	ee07 0a90 	vmov	s15, r0
 8000d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d14:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <STARTADCTASK+0x1c0>)
 8000d16:	edc3 7a00 	vstr	s15, [r3]

	   	HAL_ADC_Stop(&hadc2);
 8000d1a:	4845      	ldr	r0, [pc, #276]	; (8000e30 <STARTADCTASK+0x1bc>)
 8000d1c:	f000 fcc2 	bl	80016a4 <HAL_ADC_Stop>


	 	HAL_TIM_Base_Stop(&htim3);
 8000d20:	4845      	ldr	r0, [pc, #276]	; (8000e38 <STARTADCTASK+0x1c4>)
 8000d22:	f002 fddb 	bl	80038dc <HAL_TIM_Base_Stop>
		currentcount = __HAL_TIM_GetCounter(&htim3);
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <STARTADCTASK+0x1c4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d34:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <STARTADCTASK+0x1c8>)
 8000d36:	edc3 7a00 	vstr	s15, [r3]
		countdifference = currentcount-previouscount;
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <STARTADCTASK+0x1c8>)
 8000d3c:	ed93 7a00 	vldr	s14, [r3]
 8000d40:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <STARTADCTASK+0x1cc>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <STARTADCTASK+0x1d0>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]
		previouscount = currentcount;
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <STARTADCTASK+0x1c8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <STARTADCTASK+0x1cc>)
 8000d56:	6013      	str	r3, [r2, #0]
		currentcount =0;
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <STARTADCTASK+0x1c8>)
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

		error = SetPoint - Feedback;
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <STARTADCTASK+0x1a8>)
 8000d62:	ed93 7a00 	vldr	s14, [r3]
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <STARTADCTASK+0x1c0>)
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <STARTADCTASK+0x1d4>)
 8000d72:	edc3 7a00 	vstr	s15, [r3]
		integral = integral + error * countdifference;
 8000d76:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <STARTADCTASK+0x1d4>)
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <STARTADCTASK+0x1d0>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <STARTADCTASK+0x1d8>)
 8000d88:	edd3 7a00 	vldr	s15, [r3]
 8000d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <STARTADCTASK+0x1d8>)
 8000d92:	edc3 7a00 	vstr	s15, [r3]
		derivative = (error - previous_error) / countdifference;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <STARTADCTASK+0x1d4>)
 8000d98:	ed93 7a00 	vldr	s14, [r3]
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <STARTADCTASK+0x1dc>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <STARTADCTASK+0x1d0>)
 8000da8:	ed93 7a00 	vldr	s14, [r3]
 8000dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <STARTADCTASK+0x1e0>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]
		DAC_VAL = (KP * error) + (KI * integral) + (KD * derivative);
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <STARTADCTASK+0x198>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <STARTADCTASK+0x1d4>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <STARTADCTASK+0x19c>)
 8000dc8:	edd3 6a00 	vldr	s13, [r3]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <STARTADCTASK+0x1d8>)
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <STARTADCTASK+0x1a0>)
 8000ddc:	edd3 6a00 	vldr	s13, [r3]
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <STARTADCTASK+0x1e0>)
 8000de2:	edd3 7a00 	vldr	s15, [r3]
 8000de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <STARTADCTASK+0x1b8>)
 8000df0:	edc3 7a00 	vstr	s15, [r3]
		previous_error = error;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <STARTADCTASK+0x1d4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <STARTADCTASK+0x1dc>)
 8000dfa:	6013      	str	r3, [r2, #0]

		//printf("INPUT : %f OUTPUT : %f\r\n",SetPoint,Feedback);

		HAL_TIM_Base_Start(&htim3);
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <STARTADCTASK+0x1c4>)
 8000dfe:	f002 fcfd 	bl	80037fc <HAL_TIM_Base_Start>




    osDelay(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f003 ff61 	bl	8004ccc <osDelay>
		HAL_ADC_Start(&hadc1);
 8000e0a:	e743      	b.n	8000c94 <STARTADCTASK+0x20>
 8000e0c:	20000644 	.word	0x20000644
 8000e10:	20000648 	.word	0x20000648
 8000e14:	2000064c 	.word	0x2000064c
 8000e18:	200004b0 	.word	0x200004b0
 8000e1c:	2000062c 	.word	0x2000062c
 8000e20:	457d2000 	.word	0x457d2000
 8000e24:	457d2000 	.word	0x457d2000
 8000e28:	20000540 	.word	0x20000540
 8000e2c:	20000634 	.word	0x20000634
 8000e30:	200004f8 	.word	0x200004f8
 8000e34:	20000630 	.word	0x20000630
 8000e38:	20000554 	.word	0x20000554
 8000e3c:	20000638 	.word	0x20000638
 8000e40:	2000063c 	.word	0x2000063c
 8000e44:	20000640 	.word	0x20000640
 8000e48:	20000650 	.word	0x20000650
 8000e4c:	20000654 	.word	0x20000654
 8000e50:	20000658 	.word	0x20000658
 8000e54:	2000065c 	.word	0x2000065c

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 fae9 	bl	8001440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001400 	.word	0x40001400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	f06f 0001 	mvn.w	r0, #1
 8000ec6:	f000 ffc1 	bl	8001e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d124      	bne.n	8000f44 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0xd0>)
 8000f3e:	f001 f897 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f42:	e028      	b.n	8000f96 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_ADC_MspInit+0xd4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d123      	bne.n	8000f96 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f92:	f001 f86d 	bl	8002070 <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	; 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40012100 	.word	0x40012100
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <HAL_DAC_MspInit+0x74>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d123      	bne.n	800101e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	2310      	movs	r3, #16
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_DAC_MspInit+0x7c>)
 800101a:	f001 f829 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40007400 	.word	0x40007400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x38>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40000400 	.word	0x40000400
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ae      	sub	sp, #184	; 0xb8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2290      	movs	r2, #144	; 0x90
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f005 f94e 	bl	8006336 <memset>
  if(huart->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <HAL_UART_MspInit+0xb4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d13c      	bne.n	800111e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ff22 	bl	8002efc <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fedd 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0xb8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0xbc>)
 800111a:	f000 ffa9 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	37b8      	adds	r7, #184	; 0xb8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004800 	.word	0x40004800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2037      	movs	r0, #55	; 0x37
 800114a:	f000 fe7f 	bl	8001e4c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800114e:	2037      	movs	r0, #55	; 0x37
 8001150:	f000 fe98 	bl	8001e84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_InitTick+0xa0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_InitTick+0xa0>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0xa0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116c:	f107 0210 	add.w	r2, r7, #16
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fe8e 	bl	8002e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800117c:	f001 fe64 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8001180:	4603      	mov	r3, r0
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_InitTick+0xa4>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3b01      	subs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_InitTick+0xa8>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_InitTick+0xac>)
 8001198:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_InitTick+0xa8>)
 800119c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_InitTick+0xa8>)
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_InitTick+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_InitTick+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_InitTick+0xa8>)
 80011b6:	f002 fac9 	bl	800374c <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_InitTick+0xa8>)
 80011c2:	f002 fbb3 	bl	800392c <HAL_TIM_Base_Start_IT>
 80011c6:	4603      	mov	r3, r0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3730      	adds	r7, #48	; 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	20000660 	.word	0x20000660
 80011e0:	40001400 	.word	0x40001400

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM7_IRQHandler+0x10>)
 8001216:	f002 fc01 	bl	8003a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000660 	.word	0x20000660

08001224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_kill>:

int _kill(int pid, int sig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800123e:	f004 ff49 	bl	80060d4 <__errno>
 8001242:	4603      	mov	r3, r0
 8001244:	2216      	movs	r2, #22
 8001246:	601a      	str	r2, [r3, #0]
	return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_exit>:

void _exit (int status)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffe7 	bl	8001234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001266:	e7fe      	b.n	8001266 <_exit+0x12>

08001268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e00a      	b.n	8001290 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800127a:	f3af 8000 	nop.w
 800127e:	4601      	mov	r1, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	b2ca      	uxtb	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf0      	blt.n	800127a <_read+0x12>
	}

return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e009      	b.n	80012c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f9b3 	bl	8000628 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf1      	blt.n	80012b4 <_write+0x12>
	}
	return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_close>:

int _close(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001302:	605a      	str	r2, [r3, #4]
	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_isatty>:

int _isatty(int file)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	return 1;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f004 feae 	bl	80060d4 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20080000 	.word	0x20080000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	200006ac 	.word	0x200006ac
 80013ac:	20004410 	.word	0x20004410

080013b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ffd7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f004 ff63 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff f921 	bl	800064c <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001418:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 800141c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001420:	20004410 	.word	0x20004410

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>

08001426 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 fd03 	bl	8001e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001430:	200f      	movs	r0, #15
 8001432:	f7ff fe7f 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001436:	f7ff fd27 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	200006b0 	.word	0x200006b0

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200006b0 	.word	0x200006b0

08001480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e031      	b.n	80014fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fd1a 	bl	8000ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_ADC_Init+0x84>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	f043 0202 	orr.w	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fb0a 	bl	8001ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ea:	e001      	b.n	80014f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	ffffeefd 	.word	0xffffeefd

08001508 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Start+0x1a>
 800151e:	2302      	movs	r3, #2
 8001520:	e0ad      	b.n	800167e <HAL_ADC_Start+0x176>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d018      	beq.n	800156a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_ADC_Start+0x184>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_ADC_Start+0x188>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0c9a      	lsrs	r2, r3, #18
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800155c:	e002      	b.n	8001564 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d175      	bne.n	8001664 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_ADC_Start+0x18c>)
 800157e:	4013      	ands	r3, r2
 8001580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800159e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b2:	d106      	bne.n	80015c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f023 0206 	bic.w	r2, r3, #6
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_ADC_Start+0x190>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d143      	bne.n	800167c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e03a      	b.n	800167c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_ADC_Start+0x194>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d10e      	bne.n	800162e <HAL_ADC_Start+0x126>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800162c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_ADC_Start+0x190>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d120      	bne.n	800167c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_ADC_Start+0x198>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d11b      	bne.n	800167c <HAL_ADC_Start+0x174>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d114      	bne.n	800167c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	e00b      	b.n	800167c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f043 0210 	orr.w	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	431bde83 	.word	0x431bde83
 8001694:	fffff8fe 	.word	0xfffff8fe
 8001698:	40012300 	.word	0x40012300
 800169c:	40012000 	.word	0x40012000
 80016a0:	40012200 	.word	0x40012200

080016a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_Stop+0x16>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01f      	b.n	80016fa <HAL_ADC_Stop+0x56>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d107      	bne.n	80016f0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_ADC_Stop+0x64>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	ffffeefe 	.word	0xffffeefe

0800170c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001728:	d113      	bne.n	8001752 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001738:	d10b      	bne.n	8001752 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e063      	b.n	800181a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001752:	f7ff fe89 	bl	8001468 <HAL_GetTick>
 8001756:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001758:	e021      	b.n	800179e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d01d      	beq.n	800179e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_ADC_PollForConversion+0x6c>
 8001768:	f7ff fe7e 	bl	8001468 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d212      	bcs.n	800179e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d00b      	beq.n	800179e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f043 0204 	orr.w	r2, r3, #4
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e03d      	b.n	800181a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d1d6      	bne.n	800175a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0212 	mvn.w	r2, #18
 80017b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d123      	bne.n	8001818 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11f      	bne.n	8001818 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1c>
 8001854:	2302      	movs	r3, #2
 8001856:	e136      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x28a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b09      	cmp	r3, #9
 8001866:	d93a      	bls.n	80018de <HAL_ADC_ConfigChannel+0xa2>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001870:	d035      	beq.n	80018de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68d9      	ldr	r1, [r3, #12]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	3b1e      	subs	r3, #30
 8001888:	2207      	movs	r2, #7
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a8d      	ldr	r2, [pc, #564]	; (8001ad4 <HAL_ADC_ConfigChannel+0x298>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10a      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	061a      	lsls	r2, r3, #24
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b6:	e035      	b.n	8001924 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68d9      	ldr	r1, [r3, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4403      	add	r3, r0
 80018d0:	3b1e      	subs	r3, #30
 80018d2:	409a      	lsls	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018dc:	e022      	b.n	8001924 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6919      	ldr	r1, [r3, #16]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	409a      	lsls	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d824      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b05      	subs	r3, #5
 800193e:	221f      	movs	r2, #31
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b05      	subs	r3, #5
 8001968:	fa00 f203 	lsl.w	r2, r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
 8001974:	e04c      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b0c      	cmp	r3, #12
 800197c:	d824      	bhi.n	80019c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b23      	subs	r3, #35	; 0x23
 8001990:	221f      	movs	r2, #31
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	400a      	ands	r2, r1
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b23      	subs	r3, #35	; 0x23
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
 80019c6:	e023      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b41      	subs	r3, #65	; 0x41
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b41      	subs	r3, #65	; 0x41
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10a      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1f4>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a2e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10f      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x21e>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d10b      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a25      	ldr	r2, [pc, #148]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a4c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a22      	ldr	r2, [pc, #136]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a58:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d12b      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x280>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_ADC_ConfigChannel+0x298>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <HAL_ADC_ConfigChannel+0x23a>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b11      	cmp	r3, #17
 8001a74:	d122      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a80:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_ADC_ConfigChannel+0x298>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9a      	lsrs	r2, r3, #18
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aae:	e002      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	10000012 	.word	0x10000012
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001af0:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <ADC_Init+0x1ec>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <ADC_Init+0x1ec>)
 8001af6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001afa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001afc:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <ADC_Init+0x1ec>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4973      	ldr	r1, [pc, #460]	; (8001cd4 <ADC_Init+0x1ec>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	021a      	lsls	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <ADC_Init+0x1f0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d022      	beq.n	8001bc2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e00f      	b.n	8001be2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0202 	bic.w	r2, r2, #2
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	005a      	lsls	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	035a      	lsls	r2, r3, #13
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e007      	b.n	8001c58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	051a      	lsls	r2, r3, #20
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6899      	ldr	r1, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9a:	025a      	lsls	r2, r3, #9
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	029a      	lsls	r2, r3, #10
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	0f000001 	.word	0x0f000001

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <__NVIC_SetPriorityGrouping+0x40>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x40>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	05fa0000 	.word	0x05fa0000

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff4c 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5e:	f7ff ff61 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7ff ffb1 	bl	8001dd0 <NVIC_EncodePriority>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff80 	bl	8001d7c <__NVIC_SetPriority>
}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff54 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e014      	b.n	8001edc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff f876 	bl	8000fb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	795b      	ldrb	r3, [r3, #5]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_DAC_Start+0x16>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e040      	b.n	8001f7c <HAL_DAC_Start+0x98>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f2e:	2b3c      	cmp	r3, #60	; 0x3c
 8001f30:	d11d      	bne.n	8001f6e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e014      	b.n	8001f6e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	213c      	movs	r1, #60	; 0x3c
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d107      	bne.n	8001f6e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0202 	orr.w	r2, r2, #2
 8001f6c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	3308      	adds	r3, #8
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e004      	b.n	8001fbc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3314      	adds	r3, #20
 8001fba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	795b      	ldrb	r3, [r3, #5]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_DAC_ConfigChannel+0x18>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e03c      	b.n	8002064 <HAL_DAC_ConfigChannel+0x92>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	22c0      	movs	r2, #192	; 0xc0
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e175      	b.n	800237c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8164 	bne.w	8002376 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x56>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80be 	beq.w	8002376 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002212:	4a61      	ldr	r2, [pc, #388]	; (8002398 <HAL_GPIO_Init+0x328>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d037      	beq.n	80022ae <HAL_GPIO_Init+0x23e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d031      	beq.n	80022aa <HAL_GPIO_Init+0x23a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_GPIO_Init+0x334>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02b      	beq.n	80022a6 <HAL_GPIO_Init+0x236>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_GPIO_Init+0x338>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x232>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x33c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x22e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <HAL_GPIO_Init+0x340>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x22a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x344>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x226>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x348>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x34c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x21a>
 8002286:	2309      	movs	r3, #9
 8002288:	e012      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800228a:	230a      	movs	r3, #10
 800228c:	e010      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800228e:	2308      	movs	r3, #8
 8002290:	e00e      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 8002292:	2307      	movs	r3, #7
 8002294:	e00c      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 8002296:	2306      	movs	r3, #6
 8002298:	e00a      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800229a:	2305      	movs	r3, #5
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800229e:	2304      	movs	r3, #4
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022ae:	2300      	movs	r3, #0
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x328>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f2:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <HAL_GPIO_Init+0x354>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002346:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_GPIO_Init+0x354>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f67f ae86 	bls.w	8002090 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40021400 	.word	0x40021400
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022400 	.word	0x40022400
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	041a      	lsls	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43d9      	mvns	r1, r3
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	400b      	ands	r3, r1
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40007000 	.word	0x40007000

08002450 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247e:	f7fe fff3 	bl	8001468 <HAL_GetTick>
 8002482:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002484:	e009      	b.n	800249a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002486:	f7fe ffef 	bl	8001468 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002494:	d901      	bls.n	800249a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e022      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a6:	d1ee      	bne.n	8002486 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b4:	f7fe ffd8 	bl	8001468 <HAL_GetTick>
 80024b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ba:	e009      	b.n	80024d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024bc:	f7fe ffd4 	bl	8001468 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ca:	d901      	bls.n	80024d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e007      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024dc:	d1ee      	bne.n	80024bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e29b      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002514:	4b96      	ldr	r3, [pc, #600]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002520:	4b93      	ldr	r3, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
 800252c:	4b90      	ldr	r3, [pc, #576]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d10b      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06c      	beq.n	8002620 <HAL_RCC_OscConfig+0x130>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d168      	bne.n	8002620 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e275      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x7a>
 800255c:	4b84      	ldr	r3, [pc, #528]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a83      	ldr	r2, [pc, #524]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e02e      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x9c>
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b7c      	ldr	r3, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7b      	ldr	r2, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a72      	ldr	r2, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6b      	ldr	r2, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff4a 	bl	8001468 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe ff46 	bl	8001468 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e229      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe ff36 	bl	8001468 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe ff32 	bl	8001468 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e215      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b57      	ldr	r3, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x110>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d069      	beq.n	8002702 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x190>
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x17a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1e9      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e040      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a38      	ldr	r2, [pc, #224]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fee8 	bl	8001468 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fee4 	bl	8001468 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4929      	ldr	r1, [pc, #164]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fec4 	bl	8001468 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe fec0 	bl	8001468 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1a3      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d038      	beq.n	8002780 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fea1 	bl	8001468 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fe9d 	bl	8001468 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e180      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x23a>
 8002748:	e01a      	b.n	8002780 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fe87 	bl	8001468 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275e:	f7fe fe83 	bl	8001468 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d903      	bls.n	8002774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e166      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
 8002770:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ee      	bne.n	800275e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a4 	beq.w	80028d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b8c      	ldr	r3, [pc, #560]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a88      	ldr	r2, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b86      	ldr	r3, [pc, #536]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027c2:	4b80      	ldr	r3, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7f      	ldr	r2, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fe4b 	bl	8001468 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fe47 	bl	8001468 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e12a      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x31a>
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a6f      	ldr	r2, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e02d      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x33c>
 8002812:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a67      	ldr	r2, [pc, #412]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	e01c      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x35e>
 8002834:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a61      	ldr	r2, [pc, #388]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e00b      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
 800285a:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d015      	beq.n	800289a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fdfb 	bl	8001468 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fdf7 	bl	8001468 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCC_OscConfig+0x386>
 8002898:	e014      	b.n	80028c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe fde5 	bl	8001468 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fde1 	bl	8001468 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0c2      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80ae 	beq.w	8002a3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d06d      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d14b      	bne.n	800298c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fdb2 	bl	8001468 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fdae 	bl	8001468 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e091      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	3b01      	subs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	071b      	lsls	r3, r3, #28
 8002952:	491b      	ldr	r1, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fd80 	bl	8001468 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fd7c 	bl	8001468 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e05f      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x47c>
 800298a:	e057      	b.n	8002a3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fd66 	bl	8001468 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fd62 	bl	8001468 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4b0>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x54c>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_OscConfig+0x558>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d030      	beq.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d129      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d122      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d119      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10f      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	4965      	ldr	r1, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e073      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4936      	ldr	r1, [pc, #216]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7fe fc92 	bl	8001468 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fe fc8e 	bl	8001468 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e053      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d210      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 020f 	bic.w	r2, r3, #15
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1d0>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1d4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fa98 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08008b5c 	.word	0x08008b5c
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b094      	sub	sp, #80	; 0x50
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c30:	2300      	movs	r3, #0
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	2300      	movs	r3, #0
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80e1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e0db      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5c:	e0db      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c62:	e0d8      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4621      	mov	r1, r4
 8002cb0:	1a51      	subs	r1, r2, r1
 8002cb2:	6139      	str	r1, [r7, #16]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	018b      	lsls	r3, r1, #6
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	018a      	lsls	r2, r1, #6
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cdc:	4659      	mov	r1, fp
 8002cde:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	4699      	mov	r9, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	eb18 0303 	adds.w	r3, r8, r3
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	462b      	mov	r3, r5
 8002d04:	eb49 0303 	adc.w	r3, r9, r3
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d16:	4629      	mov	r1, r5
 8002d18:	024b      	lsls	r3, r1, #9
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d20:	4621      	mov	r1, r4
 8002d22:	024a      	lsls	r2, r1, #9
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d34:	f7fd fadc 	bl	80002f0 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	e058      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0159      	lsls	r1, r3, #5
 8002d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6e:	0150      	lsls	r0, r2, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4641      	mov	r1, r8
 8002d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d94:	ebb2 040a 	subs.w	r4, r2, sl
 8002d98:	eb63 050b 	sbc.w	r5, r3, fp
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	00eb      	lsls	r3, r5, #3
 8002da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	18e3      	adds	r3, r4, r3
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	464b      	mov	r3, r9
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	61fa      	str	r2, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	f7fd fa82 	bl	80002f0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3750      	adds	r7, #80	; 0x50
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08008b6c 	.word	0x08008b6c

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffdc 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08008b6c 	.word	0x08008b6c

08002e98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RCC_GetClockConfig+0x60>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40023c00 	.word	0x40023c00

08002efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f24:	4b69      	ldr	r3, [pc, #420]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a68      	ldr	r2, [pc, #416]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	4964      	ldr	r1, [pc, #400]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	4959      	ldr	r1, [pc, #356]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f92:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	494a      	ldr	r1, [pc, #296]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 808b 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	4a39      	ldr	r2, [pc, #228]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6413      	str	r3, [r2, #64]	; 0x40
 8002fec:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fe fa30 	bl	8001468 <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe fa2c 	bl	8001468 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e38f      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800302a:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d035      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d02e      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003050:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003068:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003070:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d114      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f9f4 	bl	8001468 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe f9f0 	bl	8001468 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e351      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0ee      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b2:	d111      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030c2:	400b      	ands	r3, r1
 80030c4:	4901      	ldr	r1, [pc, #4]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	0ffffcff 	.word	0x0ffffcff
 80030d8:	4bac      	ldr	r3, [pc, #688]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4aab      	ldr	r2, [pc, #684]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	4ba9      	ldr	r3, [pc, #676]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	49a6      	ldr	r1, [pc, #664]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003102:	4ba2      	ldr	r3, [pc, #648]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003108:	4aa0      	ldr	r2, [pc, #640]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003112:	4b9e      	ldr	r3, [pc, #632]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003114:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	499b      	ldr	r1, [pc, #620]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003130:	4b96      	ldr	r3, [pc, #600]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313e:	4993      	ldr	r1, [pc, #588]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003152:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003160:	498a      	ldr	r1, [pc, #552]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003174:	4b85      	ldr	r3, [pc, #532]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003182:	4982      	ldr	r1, [pc, #520]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003196:	4b7d      	ldr	r3, [pc, #500]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4979      	ldr	r1, [pc, #484]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b8:	4b74      	ldr	r3, [pc, #464]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4971      	ldr	r1, [pc, #452]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f023 020c 	bic.w	r2, r3, #12
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	4968      	ldr	r1, [pc, #416]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fc:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	4960      	ldr	r1, [pc, #384]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	4957      	ldr	r1, [pc, #348]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003240:	4b52      	ldr	r3, [pc, #328]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	494f      	ldr	r1, [pc, #316]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003262:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	4946      	ldr	r1, [pc, #280]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003284:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	493e      	ldr	r1, [pc, #248]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	4935      	ldr	r1, [pc, #212]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d6:	492d      	ldr	r1, [pc, #180]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f8:	4924      	ldr	r1, [pc, #144]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	4914      	ldr	r1, [pc, #80]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335c:	490b      	ldr	r1, [pc, #44]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003380:	4902      	ldr	r1, [pc, #8]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800339c:	4b8a      	ldr	r3, [pc, #552]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	4986      	ldr	r1, [pc, #536]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033c0:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d0:	497d      	ldr	r1, [pc, #500]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d006      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80d6 	beq.w	8003598 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033ec:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a75      	ldr	r2, [pc, #468]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe f836 	bl	8001468 <HAL_GetTick>
 80033fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003400:	f7fe f832 	bl	8001468 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e195      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11d      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003432:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	0e1b      	lsrs	r3, r3, #24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	019a      	lsls	r2, r3, #6
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	4958      	ldr	r1, [pc, #352]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003498:	d129      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800349a:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034a8:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ae:	0f1b      	lsrs	r3, r3, #28
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	019a      	lsls	r2, r3, #6
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	493e      	ldr	r1, [pc, #248]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034dc:	f023 021f 	bic.w	r2, r3, #31
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4938      	ldr	r1, [pc, #224]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01d      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034fa:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350e:	0f1b      	lsrs	r3, r3, #28
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	019a      	lsls	r2, r3, #6
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	061b      	lsls	r3, r3, #24
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	4926      	ldr	r1, [pc, #152]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d011      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	019a      	lsls	r2, r3, #6
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	491a      	ldr	r1, [pc, #104]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003572:	f7fd ff79 	bl	8001468 <HAL_GetTick>
 8003576:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800357a:	f7fd ff75 	bl	8001468 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0d8      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358c:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80ce 	bne.w	800373c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fd ff5c 	bl	8001468 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035b2:	e00b      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035b4:	f7fd ff58 	bl	8001468 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d904      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0bb      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035cc:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d0ec      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02e      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d12a      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003602:	4b51      	ldr	r3, [pc, #324]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003610:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	0f1b      	lsrs	r3, r3, #28
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	019a      	lsls	r2, r3, #6
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	4944      	ldr	r1, [pc, #272]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003644:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	493d      	ldr	r1, [pc, #244]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366c:	d11d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	0e1b      	lsrs	r3, r3, #24
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	0f1b      	lsrs	r3, r3, #28
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	019a      	lsls	r2, r3, #6
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	4929      	ldr	r1, [pc, #164]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d028      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	0e1b      	lsrs	r3, r3, #24
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	019a      	lsls	r2, r3, #6
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	4917      	ldr	r1, [pc, #92]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	4911      	ldr	r1, [pc, #68]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fd fea8 	bl	8001468 <HAL_GetTick>
 8003718:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800371c:	f7fd fea4 	bl	8001468 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e007      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800373a:	d1ef      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e049      	b.n	80037f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fc5e 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 fb58 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d001      	beq.n	8003814 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e04c      	b.n	80038ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a26      	ldr	r2, [pc, #152]	; (80038bc <HAL_TIM_Base_Start+0xc0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d01d      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_TIM_Base_Start+0xc4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_TIM_Base_Start+0xc8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_TIM_Base_Start+0xcc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_TIM_Base_Start+0xd0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_TIM_Base_Start+0xd4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_TIM_Base_Start+0x70>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_TIM_Base_Start+0xd8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d115      	bne.n	8003898 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_TIM_Base_Start+0xdc>)
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b06      	cmp	r3, #6
 800387c:	d015      	beq.n	80038aa <HAL_TIM_Base_Start+0xae>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d011      	beq.n	80038aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	e008      	b.n	80038aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e000      	b.n	80038ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40010400 	.word	0x40010400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40001800 	.word	0x40001800
 80038d8:	00010007 	.word	0x00010007

080038dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <HAL_TIM_Base_Stop+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	f240 4344 	movw	r3, #1092	; 0x444
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_TIM_Base_Stop+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e054      	b.n	80039ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_TIM_Base_Start_IT+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d01d      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_TIM_Base_Start_IT+0xdc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_TIM_Base_Start_IT+0xe0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_TIM_Base_Start_IT+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x80>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_TIM_Base_Start_IT+0xe8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d115      	bne.n	80039d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_TIM_Base_Start_IT+0xec>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d015      	beq.n	80039ea <HAL_TIM_Base_Start_IT+0xbe>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d011      	beq.n	80039ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	e008      	b.n	80039ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e000      	b.n	80039ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40001800 	.word	0x40001800
 8003a18:	00010007 	.word	0x00010007

08003a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d122      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0202 	mvn.w	r2, #2
 8003a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9d0 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9c2 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f9d3 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0204 	mvn.w	r2, #4
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9a6 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f998 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f9a9 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0208 	mvn.w	r2, #8
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f97c 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f96e 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f97f 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f952 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f944 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f955 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0201 	mvn.w	r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f95c 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fb0c 	bl	80041e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 faff 	bl	80041f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d10e      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f903 	bl	8003e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d10e      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d107      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f06f 0220 	mvn.w	r2, #32
 8003c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fabf 	bl	80041d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_ConfigClockSource+0x1c>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0b4      	b.n	8003de2 <HAL_TIM_ConfigClockSource+0x186>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <HAL_TIM_ConfigClockSource+0x190>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d03e      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0xd4>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	f200 8087 	bhi.w	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbe:	f000 8086 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x172>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	d87f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d01a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xa6>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d87b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b60      	cmp	r3, #96	; 0x60
 8003cd2:	d050      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x11a>
 8003cd4:	2b60      	cmp	r3, #96	; 0x60
 8003cd6:	d877      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b50      	cmp	r3, #80	; 0x50
 8003cda:	d03c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xfa>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d873      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d058      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x13a>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d86f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b30      	cmp	r3, #48	; 0x30
 8003cea:	d064      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d060      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d05a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	e062      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f000 f9af 	bl	8004074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	609a      	str	r2, [r3, #8]
      break;
 8003d2e:	e04f      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f000 f998 	bl	8004074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d52:	609a      	str	r2, [r3, #8]
      break;
 8003d54:	e03c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 f90c 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2150      	movs	r1, #80	; 0x50
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f965 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003d74:	e02c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 f92b 	bl	8003fde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2160      	movs	r1, #96	; 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f955 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003d94:	e01c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 f8ec 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f945 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 f93c 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	fffeff88 	.word	0xfffeff88

08003df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d027      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d023      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x128>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x130>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0x134>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <TIM_Base_SetConfig+0x138>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <TIM_Base_SetConfig+0x13c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	40014800 	.word	0x40014800
 8003f74:	40001800 	.word	0x40001800
 8003f78:	40001c00 	.word	0x40001c00
 8003f7c:	40002000 	.word	0x40002000

08003f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0210 	bic.w	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	f043 0307 	orr.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	431a      	orrs	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e06d      	b.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2f      	ldr	r2, [pc, #188]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d022      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d01d      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10c      	bne.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40010400 	.word	0x40010400
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40001800 	.word	0x40001800

080041d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e040      	b.n	80042a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc ff20 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8c0 	bl	80043d0 <UART_SetConfig>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e022      	b.n	80042a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb18 	bl	8004898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb9f 	bl	80049dc <UART_CheckIdleState>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042bc:	2b20      	cmp	r3, #32
 80042be:	f040 8081 	bne.w	80043c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit+0x26>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e079      	b.n	80043c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x38>
 80042dc:	2302      	movs	r3, #2
 80042de:	e072      	b.n	80043c6 <HAL_UART_Transmit+0x11e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2221      	movs	r2, #33	; 0x21
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f6:	f7fd f8b7 	bl	8001468 <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d108      	bne.n	8004328 <HAL_UART_Transmit+0x80>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e003      	b.n	8004330 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004338:	e02c      	b.n	8004394 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fb92 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e038      	b.n	80043c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3302      	adds	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e007      	b.n	8004382 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1cc      	bne.n	800433a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2140      	movs	r1, #64	; 0x40
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fb5f 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e005      	b.n	80043c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4ba6      	ldr	r3, [pc, #664]	; (8004694 <UART_SetConfig+0x2c4>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	6979      	ldr	r1, [r7, #20]
 8004404:	430b      	orrs	r3, r1
 8004406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a94      	ldr	r2, [pc, #592]	; (8004698 <UART_SetConfig+0x2c8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d120      	bne.n	800448e <UART_SetConfig+0xbe>
 800444c:	4b93      	ldr	r3, [pc, #588]	; (800469c <UART_SetConfig+0x2cc>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d816      	bhi.n	8004488 <UART_SetConfig+0xb8>
 800445a:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <UART_SetConfig+0x90>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004471 	.word	0x08004471
 8004464:	0800447d 	.word	0x0800447d
 8004468:	08004477 	.word	0x08004477
 800446c:	08004483 	.word	0x08004483
 8004470:	2301      	movs	r3, #1
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e150      	b.n	8004718 <UART_SetConfig+0x348>
 8004476:	2302      	movs	r3, #2
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e14d      	b.n	8004718 <UART_SetConfig+0x348>
 800447c:	2304      	movs	r3, #4
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e14a      	b.n	8004718 <UART_SetConfig+0x348>
 8004482:	2308      	movs	r3, #8
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e147      	b.n	8004718 <UART_SetConfig+0x348>
 8004488:	2310      	movs	r3, #16
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e144      	b.n	8004718 <UART_SetConfig+0x348>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a83      	ldr	r2, [pc, #524]	; (80046a0 <UART_SetConfig+0x2d0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d132      	bne.n	80044fe <UART_SetConfig+0x12e>
 8004498:	4b80      	ldr	r3, [pc, #512]	; (800469c <UART_SetConfig+0x2cc>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d828      	bhi.n	80044f8 <UART_SetConfig+0x128>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0xdc>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	080044f9 	.word	0x080044f9
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	080044ed 	.word	0x080044ed
 80044c0:	080044f9 	.word	0x080044f9
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	080044f9 	.word	0x080044f9
 80044cc:	080044e7 	.word	0x080044e7
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	080044f3 	.word	0x080044f3
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e118      	b.n	8004718 <UART_SetConfig+0x348>
 80044e6:	2302      	movs	r3, #2
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e115      	b.n	8004718 <UART_SetConfig+0x348>
 80044ec:	2304      	movs	r3, #4
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e112      	b.n	8004718 <UART_SetConfig+0x348>
 80044f2:	2308      	movs	r3, #8
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e10f      	b.n	8004718 <UART_SetConfig+0x348>
 80044f8:	2310      	movs	r3, #16
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e10c      	b.n	8004718 <UART_SetConfig+0x348>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a68      	ldr	r2, [pc, #416]	; (80046a4 <UART_SetConfig+0x2d4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d120      	bne.n	800454a <UART_SetConfig+0x17a>
 8004508:	4b64      	ldr	r3, [pc, #400]	; (800469c <UART_SetConfig+0x2cc>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004512:	2b30      	cmp	r3, #48	; 0x30
 8004514:	d013      	beq.n	800453e <UART_SetConfig+0x16e>
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d814      	bhi.n	8004544 <UART_SetConfig+0x174>
 800451a:	2b20      	cmp	r3, #32
 800451c:	d009      	beq.n	8004532 <UART_SetConfig+0x162>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d810      	bhi.n	8004544 <UART_SetConfig+0x174>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <UART_SetConfig+0x15c>
 8004526:	2b10      	cmp	r3, #16
 8004528:	d006      	beq.n	8004538 <UART_SetConfig+0x168>
 800452a:	e00b      	b.n	8004544 <UART_SetConfig+0x174>
 800452c:	2300      	movs	r3, #0
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e0f2      	b.n	8004718 <UART_SetConfig+0x348>
 8004532:	2302      	movs	r3, #2
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e0ef      	b.n	8004718 <UART_SetConfig+0x348>
 8004538:	2304      	movs	r3, #4
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e0ec      	b.n	8004718 <UART_SetConfig+0x348>
 800453e:	2308      	movs	r3, #8
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e0e9      	b.n	8004718 <UART_SetConfig+0x348>
 8004544:	2310      	movs	r3, #16
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e0e6      	b.n	8004718 <UART_SetConfig+0x348>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <UART_SetConfig+0x2d8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d120      	bne.n	8004596 <UART_SetConfig+0x1c6>
 8004554:	4b51      	ldr	r3, [pc, #324]	; (800469c <UART_SetConfig+0x2cc>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800455e:	2bc0      	cmp	r3, #192	; 0xc0
 8004560:	d013      	beq.n	800458a <UART_SetConfig+0x1ba>
 8004562:	2bc0      	cmp	r3, #192	; 0xc0
 8004564:	d814      	bhi.n	8004590 <UART_SetConfig+0x1c0>
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d009      	beq.n	800457e <UART_SetConfig+0x1ae>
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d810      	bhi.n	8004590 <UART_SetConfig+0x1c0>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <UART_SetConfig+0x1a8>
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d006      	beq.n	8004584 <UART_SetConfig+0x1b4>
 8004576:	e00b      	b.n	8004590 <UART_SetConfig+0x1c0>
 8004578:	2300      	movs	r3, #0
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e0cc      	b.n	8004718 <UART_SetConfig+0x348>
 800457e:	2302      	movs	r3, #2
 8004580:	77fb      	strb	r3, [r7, #31]
 8004582:	e0c9      	b.n	8004718 <UART_SetConfig+0x348>
 8004584:	2304      	movs	r3, #4
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e0c6      	b.n	8004718 <UART_SetConfig+0x348>
 800458a:	2308      	movs	r3, #8
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e0c3      	b.n	8004718 <UART_SetConfig+0x348>
 8004590:	2310      	movs	r3, #16
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e0c0      	b.n	8004718 <UART_SetConfig+0x348>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a44      	ldr	r2, [pc, #272]	; (80046ac <UART_SetConfig+0x2dc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d125      	bne.n	80045ec <UART_SetConfig+0x21c>
 80045a0:	4b3e      	ldr	r3, [pc, #248]	; (800469c <UART_SetConfig+0x2cc>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ae:	d017      	beq.n	80045e0 <UART_SetConfig+0x210>
 80045b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b4:	d817      	bhi.n	80045e6 <UART_SetConfig+0x216>
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ba:	d00b      	beq.n	80045d4 <UART_SetConfig+0x204>
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c0:	d811      	bhi.n	80045e6 <UART_SetConfig+0x216>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <UART_SetConfig+0x1fe>
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ca:	d006      	beq.n	80045da <UART_SetConfig+0x20a>
 80045cc:	e00b      	b.n	80045e6 <UART_SetConfig+0x216>
 80045ce:	2300      	movs	r3, #0
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e0a1      	b.n	8004718 <UART_SetConfig+0x348>
 80045d4:	2302      	movs	r3, #2
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e09e      	b.n	8004718 <UART_SetConfig+0x348>
 80045da:	2304      	movs	r3, #4
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e09b      	b.n	8004718 <UART_SetConfig+0x348>
 80045e0:	2308      	movs	r3, #8
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e098      	b.n	8004718 <UART_SetConfig+0x348>
 80045e6:	2310      	movs	r3, #16
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e095      	b.n	8004718 <UART_SetConfig+0x348>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <UART_SetConfig+0x2e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d125      	bne.n	8004642 <UART_SetConfig+0x272>
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <UART_SetConfig+0x2cc>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004604:	d017      	beq.n	8004636 <UART_SetConfig+0x266>
 8004606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460a:	d817      	bhi.n	800463c <UART_SetConfig+0x26c>
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d00b      	beq.n	800462a <UART_SetConfig+0x25a>
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d811      	bhi.n	800463c <UART_SetConfig+0x26c>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <UART_SetConfig+0x254>
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x260>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x26c>
 8004624:	2301      	movs	r3, #1
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e076      	b.n	8004718 <UART_SetConfig+0x348>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e073      	b.n	8004718 <UART_SetConfig+0x348>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e070      	b.n	8004718 <UART_SetConfig+0x348>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e06d      	b.n	8004718 <UART_SetConfig+0x348>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e06a      	b.n	8004718 <UART_SetConfig+0x348>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <UART_SetConfig+0x2e4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d138      	bne.n	80046be <UART_SetConfig+0x2ee>
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <UART_SetConfig+0x2cc>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800465a:	d017      	beq.n	800468c <UART_SetConfig+0x2bc>
 800465c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004660:	d82a      	bhi.n	80046b8 <UART_SetConfig+0x2e8>
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004666:	d00b      	beq.n	8004680 <UART_SetConfig+0x2b0>
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466c:	d824      	bhi.n	80046b8 <UART_SetConfig+0x2e8>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <UART_SetConfig+0x2aa>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d006      	beq.n	8004686 <UART_SetConfig+0x2b6>
 8004678:	e01e      	b.n	80046b8 <UART_SetConfig+0x2e8>
 800467a:	2300      	movs	r3, #0
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e04b      	b.n	8004718 <UART_SetConfig+0x348>
 8004680:	2302      	movs	r3, #2
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e048      	b.n	8004718 <UART_SetConfig+0x348>
 8004686:	2304      	movs	r3, #4
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e045      	b.n	8004718 <UART_SetConfig+0x348>
 800468c:	2308      	movs	r3, #8
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e042      	b.n	8004718 <UART_SetConfig+0x348>
 8004692:	bf00      	nop
 8004694:	efff69f3 	.word	0xefff69f3
 8004698:	40011000 	.word	0x40011000
 800469c:	40023800 	.word	0x40023800
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40004800 	.word	0x40004800
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	40005000 	.word	0x40005000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	40007800 	.word	0x40007800
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e02c      	b.n	8004718 <UART_SetConfig+0x348>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a72      	ldr	r2, [pc, #456]	; (800488c <UART_SetConfig+0x4bc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d125      	bne.n	8004714 <UART_SetConfig+0x344>
 80046c8:	4b71      	ldr	r3, [pc, #452]	; (8004890 <UART_SetConfig+0x4c0>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046d6:	d017      	beq.n	8004708 <UART_SetConfig+0x338>
 80046d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046dc:	d817      	bhi.n	800470e <UART_SetConfig+0x33e>
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d00b      	beq.n	80046fc <UART_SetConfig+0x32c>
 80046e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e8:	d811      	bhi.n	800470e <UART_SetConfig+0x33e>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <UART_SetConfig+0x326>
 80046ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f2:	d006      	beq.n	8004702 <UART_SetConfig+0x332>
 80046f4:	e00b      	b.n	800470e <UART_SetConfig+0x33e>
 80046f6:	2300      	movs	r3, #0
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e00d      	b.n	8004718 <UART_SetConfig+0x348>
 80046fc:	2302      	movs	r3, #2
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e00a      	b.n	8004718 <UART_SetConfig+0x348>
 8004702:	2304      	movs	r3, #4
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e007      	b.n	8004718 <UART_SetConfig+0x348>
 8004708:	2308      	movs	r3, #8
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e004      	b.n	8004718 <UART_SetConfig+0x348>
 800470e:	2310      	movs	r3, #16
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e001      	b.n	8004718 <UART_SetConfig+0x348>
 8004714:	2310      	movs	r3, #16
 8004716:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004720:	d15b      	bne.n	80047da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d828      	bhi.n	800477a <UART_SetConfig+0x3aa>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x360>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	0800477b 	.word	0x0800477b
 8004740:	0800476b 	.word	0x0800476b
 8004744:	0800477b 	.word	0x0800477b
 8004748:	0800477b 	.word	0x0800477b
 800474c:	0800477b 	.word	0x0800477b
 8004750:	08004773 	.word	0x08004773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fb78 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8004758:	61b8      	str	r0, [r7, #24]
        break;
 800475a:	e013      	b.n	8004784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe fb88 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004760:	61b8      	str	r0, [r7, #24]
        break;
 8004762:	e00f      	b.n	8004784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <UART_SetConfig+0x4c4>)
 8004766:	61bb      	str	r3, [r7, #24]
        break;
 8004768:	e00c      	b.n	8004784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe fa5b 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 800476e:	61b8      	str	r0, [r7, #24]
        break;
 8004770:	e008      	b.n	8004784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	61bb      	str	r3, [r7, #24]
        break;
 8004778:	e004      	b.n	8004784 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	77bb      	strb	r3, [r7, #30]
        break;
 8004782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d074      	beq.n	8004874 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	005a      	lsls	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d916      	bls.n	80047d4 <UART_SetConfig+0x404>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d212      	bcs.n	80047d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f023 030f 	bic.w	r3, r3, #15
 80047b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	89fa      	ldrh	r2, [r7, #14]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	e04f      	b.n	8004874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77bb      	strb	r3, [r7, #30]
 80047d8:	e04c      	b.n	8004874 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047da:	7ffb      	ldrb	r3, [r7, #31]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d828      	bhi.n	8004832 <UART_SetConfig+0x462>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <UART_SetConfig+0x418>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004815 	.word	0x08004815
 80047f0:	0800481d 	.word	0x0800481d
 80047f4:	08004833 	.word	0x08004833
 80047f8:	08004823 	.word	0x08004823
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004833 	.word	0x08004833
 8004804:	08004833 	.word	0x08004833
 8004808:	0800482b 	.word	0x0800482b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800480c:	f7fe fb1c 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8004810:	61b8      	str	r0, [r7, #24]
        break;
 8004812:	e013      	b.n	800483c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004814:	f7fe fb2c 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004818:	61b8      	str	r0, [r7, #24]
        break;
 800481a:	e00f      	b.n	800483c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <UART_SetConfig+0x4c4>)
 800481e:	61bb      	str	r3, [r7, #24]
        break;
 8004820:	e00c      	b.n	800483c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004822:	f7fe f9ff 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8004826:	61b8      	str	r0, [r7, #24]
        break;
 8004828:	e008      	b.n	800483c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482e:	61bb      	str	r3, [r7, #24]
        break;
 8004830:	e004      	b.n	800483c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	77bb      	strb	r3, [r7, #30]
        break;
 800483a:	bf00      	nop
    }

    if (pclk != 0U)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d018      	beq.n	8004874 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085a      	lsrs	r2, r3, #1
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	441a      	add	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b0f      	cmp	r3, #15
 800485a:	d909      	bls.n	8004870 <UART_SetConfig+0x4a0>
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004862:	d205      	bcs.n	8004870 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	e001      	b.n	8004874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004880:	7fbb      	ldrb	r3, [r7, #30]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40007c00 	.word	0x40007c00
 8004890:	40023800 	.word	0x40023800
 8004894:	00f42400 	.word	0x00f42400

08004898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01a      	beq.n	80049ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004996:	d10a      	bne.n	80049ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049ec:	f7fc fd3c 	bl	8001468 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10e      	bne.n	8004a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f82d 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e023      	b.n	8004a66 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d10e      	bne.n	8004a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f817 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00d      	b.n	8004a66 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b09c      	sub	sp, #112	; 0x70
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	e0a5      	b.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	f000 80a1 	beq.w	8004bcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fc fced 	bl	8001468 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d13e      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e6      	bne.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e067      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d04f      	beq.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	d147      	bne.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
 8004b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e6      	bne.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	613b      	str	r3, [r7, #16]
   return(result);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b98:	623a      	str	r2, [r7, #32]
 8004b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	6a3a      	ldr	r2, [r7, #32]
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e010      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f43f af4a 	beq.w	8004a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3770      	adds	r7, #112	; 0x70
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c08:	2b84      	cmp	r3, #132	; 0x84
 8004c0a:	d005      	beq.n	8004c18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	3303      	adds	r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c2a:	f000 faff 	bl	800522c <vTaskStartScheduler>
  
  return osOK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <osThreadCreate+0x54>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01c      	beq.n	8004c88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685c      	ldr	r4, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691e      	ldr	r6, [r3, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ffc8 	bl	8004bf6 <makeFreeRtosPriority>
 8004c66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c70:	9202      	str	r2, [sp, #8]
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	9100      	str	r1, [sp, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 f8ed 	bl	8004e5c <xTaskCreateStatic>
 8004c82:	4603      	mov	r3, r0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e01c      	b.n	8004cc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685c      	ldr	r4, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c94:	b29e      	uxth	r6, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ffaa 	bl	8004bf6 <makeFreeRtosPriority>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	9200      	str	r2, [sp, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4632      	mov	r2, r6
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f000 f935 	bl	8004f22 <xTaskCreate>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d001      	beq.n	8004cc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ccc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <osDelay+0x16>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	e000      	b.n	8004ce4 <osDelay+0x18>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fa6b 	bl	80051c0 <vTaskDelay>
  
  return osOK;
 8004cea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f103 0208 	add.w	r2, r3, #8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 0208 	add.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d103      	bne.n	8004db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e00c      	b.n	8004dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3308      	adds	r3, #8
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <vListInsert+0x2e>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d2f6      	bcs.n	8004dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6892      	ldr	r2, [r2, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6852      	ldr	r2, [r2, #4]
 8004e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d103      	bne.n	8004e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	; 0x38
 8004e60:	af04      	add	r7, sp, #16
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10c      	bne.n	8004eaa <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	b672      	cpsid	i
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	b662      	cpsie	i
 8004ea4:	61fb      	str	r3, [r7, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eaa:	23b4      	movs	r3, #180	; 0xb4
 8004eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2bb4      	cmp	r3, #180	; 0xb4
 8004eb2:	d00c      	beq.n	8004ece <xTaskCreateStatic+0x72>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	b672      	cpsid	i
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	b662      	cpsie	i
 8004ec8:	61bb      	str	r3, [r7, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01e      	beq.n	8004f14 <xTaskCreateStatic+0xb8>
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f850 	bl	8004fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0e:	f000 f8ed 	bl	80050ec <prvAddNewTaskToReadyList>
 8004f12:	e001      	b.n	8004f18 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
	}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b08c      	sub	sp, #48	; 0x30
 8004f26:	af04      	add	r7, sp, #16
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fee8 	bl	8005d0c <pvPortMalloc>
 8004f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f44:	20b4      	movs	r0, #180	; 0xb4
 8004f46:	f000 fee1 	bl	8005d0c <pvPortMalloc>
 8004f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
 8004f58:	e005      	b.n	8004f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f000 ffa0 	bl	8005ea0 <vPortFree>
 8004f60:	e001      	b.n	8004f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	9302      	str	r3, [sp, #8]
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f80e 	bl	8004fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f90:	69f8      	ldr	r0, [r7, #28]
 8004f92:	f000 f8ab 	bl	80050ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e002      	b.n	8004fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fc4:	440b      	add	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	b672      	cpsid	i
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	b662      	cpsie	i
 8004ff2:	617b      	str	r3, [r7, #20]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01f      	beq.n	800503e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e012      	b.n	800502a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	7819      	ldrb	r1, [r3, #0]
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	3334      	adds	r3, #52	; 0x34
 8005014:	460a      	mov	r2, r1
 8005016:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d006      	beq.n	8005032 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2b0f      	cmp	r3, #15
 800502e:	d9e9      	bls.n	8005004 <prvInitialiseNewTask+0x58>
 8005030:	e000      	b.n	8005034 <prvInitialiseNewTask+0x88>
			{
				break;
 8005032:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503c:	e003      	b.n	8005046 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2b06      	cmp	r3, #6
 800504a:	d901      	bls.n	8005050 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800504c:	2306      	movs	r3, #6
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	2200      	movs	r2, #0
 8005060:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	3304      	adds	r3, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fe64 	bl	8004d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	3318      	adds	r3, #24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fe5f 	bl	8004d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f1c3 0207 	rsb	r2, r3, #7
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2200      	movs	r2, #0
 8005098:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	334c      	adds	r3, #76	; 0x4c
 80050a0:	2260      	movs	r2, #96	; 0x60
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f946 	bl	8006336 <memset>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <prvInitialiseNewTask+0x134>)
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <prvInitialiseNewTask+0x138>)
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <prvInitialiseNewTask+0x13c>)
 80050ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	69b8      	ldr	r0, [r7, #24]
 80050c2:	f000 fc2d 	bl	8005920 <pxPortInitialiseStack>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d8:	bf00      	nop
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08008b94 	.word	0x08008b94
 80050e4:	08008bb4 	.word	0x08008bb4
 80050e8:	08008b74 	.word	0x08008b74

080050ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050f4:	f000 fd22 	bl	8005b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <prvAddNewTaskToReadyList+0xb8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <prvAddNewTaskToReadyList+0xb8>)
 8005100:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <prvAddNewTaskToReadyList+0xbc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800510a:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <prvAddNewTaskToReadyList+0xbc>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <prvAddNewTaskToReadyList+0xb8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d110      	bne.n	800513a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005118:	f000 fad8 	bl	80056cc <prvInitialiseTaskLists>
 800511c:	e00d      	b.n	800513a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <prvAddNewTaskToReadyList+0xc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <prvAddNewTaskToReadyList+0xbc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d802      	bhi.n	800513a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <prvAddNewTaskToReadyList+0xbc>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <prvAddNewTaskToReadyList+0xc4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <prvAddNewTaskToReadyList+0xc4>)
 8005142:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	2201      	movs	r2, #1
 800514a:	409a      	lsls	r2, r3
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <prvAddNewTaskToReadyList+0xc8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4313      	orrs	r3, r2
 8005152:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <prvAddNewTaskToReadyList+0xc8>)
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <prvAddNewTaskToReadyList+0xcc>)
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7ff fdee 	bl	8004d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005172:	f000 fd17 	bl	8005ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <prvAddNewTaskToReadyList+0xc0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00e      	beq.n	800519c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <prvAddNewTaskToReadyList+0xbc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	429a      	cmp	r2, r3
 800518a:	d207      	bcs.n	800519c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <prvAddNewTaskToReadyList+0xd0>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200007b4 	.word	0x200007b4
 80051a8:	200006b4 	.word	0x200006b4
 80051ac:	200007c0 	.word	0x200007c0
 80051b0:	200007d0 	.word	0x200007d0
 80051b4:	200007bc 	.word	0x200007bc
 80051b8:	200006b8 	.word	0x200006b8
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d019      	beq.n	8005206 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <vTaskDelay+0x64>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <vTaskDelay+0x34>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	b672      	cpsid	i
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	b662      	cpsie	i
 80051ee:	60bb      	str	r3, [r7, #8]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80051f4:	f000 f888 	bl	8005308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051f8:	2100      	movs	r1, #0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fb2a 	bl	8005854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005200:	f000 f890 	bl	8005324 <xTaskResumeAll>
 8005204:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <vTaskDelay+0x68>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	200007dc 	.word	0x200007dc
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800523a:	463a      	mov	r2, r7
 800523c:	1d39      	adds	r1, r7, #4
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb f9d6 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	9202      	str	r2, [sp, #8]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	2300      	movs	r3, #0
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	460a      	mov	r2, r1
 800525a:	4923      	ldr	r1, [pc, #140]	; (80052e8 <vTaskStartScheduler+0xbc>)
 800525c:	4823      	ldr	r0, [pc, #140]	; (80052ec <vTaskStartScheduler+0xc0>)
 800525e:	f7ff fdfd 	bl	8004e5c <xTaskCreateStatic>
 8005262:	4603      	mov	r3, r0
 8005264:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <vTaskStartScheduler+0xc4>)
 8005266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <vTaskStartScheduler+0xc4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e001      	b.n	800527a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11d      	bne.n	80052bc <vTaskStartScheduler+0x90>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	b672      	cpsid	i
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	b662      	cpsie	i
 8005294:	613b      	str	r3, [r7, #16]
}
 8005296:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005298:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <vTaskStartScheduler+0xc8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	334c      	adds	r3, #76	; 0x4c
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <vTaskStartScheduler+0xcc>)
 80052a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052a2:	4b16      	ldr	r3, [pc, #88]	; (80052fc <vTaskStartScheduler+0xd0>)
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <vTaskStartScheduler+0xd4>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <vTaskStartScheduler+0xd8>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052b6:	f000 fbc3 	bl	8005a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ba:	e010      	b.n	80052de <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d10c      	bne.n	80052de <vTaskStartScheduler+0xb2>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	60fb      	str	r3, [r7, #12]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <vTaskStartScheduler+0xb0>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08008b54 	.word	0x08008b54
 80052ec:	0800569d 	.word	0x0800569d
 80052f0:	200007d8 	.word	0x200007d8
 80052f4:	200006b4 	.word	0x200006b4
 80052f8:	20000010 	.word	0x20000010
 80052fc:	200007d4 	.word	0x200007d4
 8005300:	200007c0 	.word	0x200007c0
 8005304:	200007b8 	.word	0x200007b8

08005308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <vTaskSuspendAll+0x18>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4a03      	ldr	r2, [pc, #12]	; (8005320 <vTaskSuspendAll+0x18>)
 8005314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	200007dc 	.word	0x200007dc

08005324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005332:	4b42      	ldr	r3, [pc, #264]	; (800543c <xTaskResumeAll+0x118>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10c      	bne.n	8005354 <xTaskResumeAll+0x30>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	b672      	cpsid	i
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	b662      	cpsie	i
 800534e:	603b      	str	r3, [r7, #0]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005354:	f000 fbf2 	bl	8005b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005358:	4b38      	ldr	r3, [pc, #224]	; (800543c <xTaskResumeAll+0x118>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <xTaskResumeAll+0x118>)
 8005360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005362:	4b36      	ldr	r3, [pc, #216]	; (800543c <xTaskResumeAll+0x118>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d161      	bne.n	800542e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800536a:	4b35      	ldr	r3, [pc, #212]	; (8005440 <xTaskResumeAll+0x11c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d05d      	beq.n	800542e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005372:	e02e      	b.n	80053d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	4b33      	ldr	r3, [pc, #204]	; (8005444 <xTaskResumeAll+0x120>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3318      	adds	r3, #24
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fd41 	bl	8004e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3304      	adds	r3, #4
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fd3c 	bl	8004e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	2201      	movs	r2, #1
 8005396:	409a      	lsls	r2, r3
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <xTaskResumeAll+0x124>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <xTaskResumeAll+0x124>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a27      	ldr	r2, [pc, #156]	; (800544c <xTaskResumeAll+0x128>)
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7ff fcc8 	bl	8004d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <xTaskResumeAll+0x12c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <xTaskResumeAll+0x130>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xTaskResumeAll+0x120>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1cc      	bne.n	8005374 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053e0:	f000 fa18 	bl	8005814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <xTaskResumeAll+0x134>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053f0:	f000 f836 	bl	8005460 <xTaskIncrementTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <xTaskResumeAll+0x130>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f1      	bne.n	80053f0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800540c:	4b12      	ldr	r3, [pc, #72]	; (8005458 <xTaskResumeAll+0x134>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <xTaskResumeAll+0x130>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800541a:	2301      	movs	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <xTaskResumeAll+0x138>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800542e:	f000 fbb9 	bl	8005ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8005432:	68bb      	ldr	r3, [r7, #8]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200007dc 	.word	0x200007dc
 8005440:	200007b4 	.word	0x200007b4
 8005444:	20000774 	.word	0x20000774
 8005448:	200007bc 	.word	0x200007bc
 800544c:	200006b8 	.word	0x200006b8
 8005450:	200006b4 	.word	0x200006b4
 8005454:	200007c8 	.word	0x200007c8
 8005458:	200007c4 	.word	0x200007c4
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b4f      	ldr	r3, [pc, #316]	; (80055a8 <xTaskIncrementTick+0x148>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 808a 	bne.w	8005588 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005474:	4b4d      	ldr	r3, [pc, #308]	; (80055ac <xTaskIncrementTick+0x14c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800547c:	4a4b      	ldr	r2, [pc, #300]	; (80055ac <xTaskIncrementTick+0x14c>)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d122      	bne.n	80054ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005488:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <xTaskIncrementTick+0x150>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	b672      	cpsid	i
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	b662      	cpsie	i
 80054a6:	603b      	str	r3, [r7, #0]
}
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <xTaskIncrementTick+0x4a>
 80054ac:	4b40      	ldr	r3, [pc, #256]	; (80055b0 <xTaskIncrementTick+0x150>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <xTaskIncrementTick+0x154>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a3e      	ldr	r2, [pc, #248]	; (80055b0 <xTaskIncrementTick+0x150>)
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	; (80055b4 <xTaskIncrementTick+0x154>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <xTaskIncrementTick+0x158>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <xTaskIncrementTick+0x158>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	f000 f9a3 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054ce:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <xTaskIncrementTick+0x15c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d348      	bcc.n	800556a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <xTaskIncrementTick+0x150>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e2:	4b36      	ldr	r3, [pc, #216]	; (80055bc <xTaskIncrementTick+0x15c>)
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	601a      	str	r2, [r3, #0]
					break;
 80054ea:	e03e      	b.n	800556a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <xTaskIncrementTick+0x150>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d203      	bcs.n	800550c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005504:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <xTaskIncrementTick+0x15c>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550a:	e02e      	b.n	800556a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3304      	adds	r3, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fc79 	bl	8004e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	3318      	adds	r3, #24
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fc70 	bl	8004e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2201      	movs	r2, #1
 800552e:	409a      	lsls	r2, r3
 8005530:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <xTaskIncrementTick+0x160>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4313      	orrs	r3, r2
 8005536:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <xTaskIncrementTick+0x160>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <xTaskIncrementTick+0x164>)
 8005548:	441a      	add	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7ff fbfc 	bl	8004d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <xTaskIncrementTick+0x168>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	429a      	cmp	r2, r3
 8005562:	d3b9      	bcc.n	80054d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005568:	e7b6      	b.n	80054d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556a:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <xTaskIncrementTick+0x168>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4914      	ldr	r1, [pc, #80]	; (80055c4 <xTaskIncrementTick+0x164>)
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d907      	bls.n	8005592 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e004      	b.n	8005592 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005588:	4b10      	ldr	r3, [pc, #64]	; (80055cc <xTaskIncrementTick+0x16c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <xTaskIncrementTick+0x16c>)
 8005590:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <xTaskIncrementTick+0x170>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800559a:	2301      	movs	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800559e:	697b      	ldr	r3, [r7, #20]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200007dc 	.word	0x200007dc
 80055ac:	200007b8 	.word	0x200007b8
 80055b0:	2000076c 	.word	0x2000076c
 80055b4:	20000770 	.word	0x20000770
 80055b8:	200007cc 	.word	0x200007cc
 80055bc:	200007d4 	.word	0x200007d4
 80055c0:	200007bc 	.word	0x200007bc
 80055c4:	200006b8 	.word	0x200006b8
 80055c8:	200006b4 	.word	0x200006b4
 80055cc:	200007c4 	.word	0x200007c4
 80055d0:	200007c8 	.word	0x200007c8

080055d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055da:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <vTaskSwitchContext+0xb0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e2:	4b29      	ldr	r3, [pc, #164]	; (8005688 <vTaskSwitchContext+0xb4>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055e8:	e046      	b.n	8005678 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80055ea:	4b27      	ldr	r3, [pc, #156]	; (8005688 <vTaskSwitchContext+0xb4>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f0:	4b26      	ldr	r3, [pc, #152]	; (800568c <vTaskSwitchContext+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f1c3 031f 	rsb	r3, r3, #31
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	4922      	ldr	r1, [pc, #136]	; (8005690 <vTaskSwitchContext+0xbc>)
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10c      	bne.n	8005634 <vTaskSwitchContext+0x60>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	b672      	cpsid	i
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	b662      	cpsie	i
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <vTaskSwitchContext+0x5e>
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a14      	ldr	r2, [pc, #80]	; (8005690 <vTaskSwitchContext+0xbc>)
 8005640:	4413      	add	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3308      	adds	r3, #8
 8005656:	429a      	cmp	r2, r3
 8005658:	d104      	bne.n	8005664 <vTaskSwitchContext+0x90>
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <vTaskSwitchContext+0xc0>)
 800566c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <vTaskSwitchContext+0xc0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	334c      	adds	r3, #76	; 0x4c
 8005674:	4a08      	ldr	r2, [pc, #32]	; (8005698 <vTaskSwitchContext+0xc4>)
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	200007dc 	.word	0x200007dc
 8005688:	200007c8 	.word	0x200007c8
 800568c:	200007bc 	.word	0x200007bc
 8005690:	200006b8 	.word	0x200006b8
 8005694:	200006b4 	.word	0x200006b4
 8005698:	20000010 	.word	0x20000010

0800569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056a4:	f000 f852 	bl	800574c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <prvIdleTask+0x28>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d9f9      	bls.n	80056a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <prvIdleTask+0x2c>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056c0:	e7f0      	b.n	80056a4 <prvIdleTask+0x8>
 80056c2:	bf00      	nop
 80056c4:	200006b8 	.word	0x200006b8
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	e00c      	b.n	80056f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <prvInitialiseTaskLists+0x60>)
 80056e4:	4413      	add	r3, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fb04 	bl	8004cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3301      	adds	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d9ef      	bls.n	80056d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056f8:	480d      	ldr	r0, [pc, #52]	; (8005730 <prvInitialiseTaskLists+0x64>)
 80056fa:	f7ff fafb 	bl	8004cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056fe:	480d      	ldr	r0, [pc, #52]	; (8005734 <prvInitialiseTaskLists+0x68>)
 8005700:	f7ff faf8 	bl	8004cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005704:	480c      	ldr	r0, [pc, #48]	; (8005738 <prvInitialiseTaskLists+0x6c>)
 8005706:	f7ff faf5 	bl	8004cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800570a:	480c      	ldr	r0, [pc, #48]	; (800573c <prvInitialiseTaskLists+0x70>)
 800570c:	f7ff faf2 	bl	8004cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005710:	480b      	ldr	r0, [pc, #44]	; (8005740 <prvInitialiseTaskLists+0x74>)
 8005712:	f7ff faef 	bl	8004cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <prvInitialiseTaskLists+0x78>)
 8005718:	4a05      	ldr	r2, [pc, #20]	; (8005730 <prvInitialiseTaskLists+0x64>)
 800571a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <prvInitialiseTaskLists+0x7c>)
 800571e:	4a05      	ldr	r2, [pc, #20]	; (8005734 <prvInitialiseTaskLists+0x68>)
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200006b8 	.word	0x200006b8
 8005730:	20000744 	.word	0x20000744
 8005734:	20000758 	.word	0x20000758
 8005738:	20000774 	.word	0x20000774
 800573c:	20000788 	.word	0x20000788
 8005740:	200007a0 	.word	0x200007a0
 8005744:	2000076c 	.word	0x2000076c
 8005748:	20000770 	.word	0x20000770

0800574c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005752:	e019      	b.n	8005788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005754:	f000 f9f2 	bl	8005b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <prvCheckTasksWaitingTermination+0x50>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fb4f 	bl	8004e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3b01      	subs	r3, #1
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 8005772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800577c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800577e:	f000 fa11 	bl	8005ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f810 	bl	80057a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e1      	bne.n	8005754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000788 	.word	0x20000788
 80057a0:	200007b4 	.word	0x200007b4
 80057a4:	2000079c 	.word	0x2000079c

080057a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	334c      	adds	r3, #76	; 0x4c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 faab 	bl	8006d10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d108      	bne.n	80057d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fb69 	bl	8005ea0 <vPortFree>
				vPortFree( pxTCB );
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb66 	bl	8005ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057d4:	e01a      	b.n	800580c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d103      	bne.n	80057e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fb5d 	bl	8005ea0 <vPortFree>
	}
 80057e6:	e011      	b.n	800580c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d00c      	beq.n	800580c <prvDeleteTCB+0x64>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	b672      	cpsid	i
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	b662      	cpsie	i
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <prvDeleteTCB+0x62>
	}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800582c:	e008      	b.n	8005840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	2000076c 	.word	0x2000076c
 8005850:	200007d4 	.word	0x200007d4

08005854 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585e:	4b29      	ldr	r3, [pc, #164]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005864:	4b28      	ldr	r3, [pc, #160]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff facc 	bl	8004e08 <uxListRemove>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2201      	movs	r2, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43da      	mvns	r2, r3
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4013      	ands	r3, r2
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <prvAddCurrentTaskToDelayedList+0xb8>)
 800588c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d10a      	bne.n	80058ac <prvAddCurrentTaskToDelayedList+0x58>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	481a      	ldr	r0, [pc, #104]	; (8005910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058a6:	f7ff fa52 	bl	8004d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058aa:	e026      	b.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d209      	bcs.n	80058d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7ff fa60 	bl	8004d96 <vListInsert>
}
 80058d6:	e010      	b.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7ff fa56 	bl	8004d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d202      	bcs.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6013      	str	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200007b8 	.word	0x200007b8
 8005908:	200006b4 	.word	0x200006b4
 800590c:	200007bc 	.word	0x200007bc
 8005910:	200007a0 	.word	0x200007a0
 8005914:	20000770 	.word	0x20000770
 8005918:	2000076c 	.word	0x2000076c
 800591c:	200007d4 	.word	0x200007d4

08005920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3b04      	subs	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3b04      	subs	r3, #4
 800593e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0201 	bic.w	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b04      	subs	r3, #4
 800594e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <pxPortInitialiseStack+0x64>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b14      	subs	r3, #20
 800595a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3b04      	subs	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f06f 0202 	mvn.w	r2, #2
 800596e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b20      	subs	r3, #32
 8005974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	08005989 	.word	0x08005989

08005988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <prvTaskExitError+0x5c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d00c      	beq.n	80059b6 <prvTaskExitError+0x2e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	b672      	cpsid	i
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	b662      	cpsie	i
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <prvTaskExitError+0x2c>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	b672      	cpsid	i
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	b662      	cpsie	i
 80059ca:	60bb      	str	r3, [r7, #8]
}
 80059cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ce:	bf00      	nop
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0fc      	beq.n	80059d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	2000000c 	.word	0x2000000c
	...

080059f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <pxCurrentTCBConst2>)
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	6808      	ldr	r0, [r1, #0]
 80059f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	f380 8809 	msr	PSP, r0
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8811 	msr	BASEPRI, r0
 8005a0a:	4770      	bx	lr
 8005a0c:	f3af 8000 	nop.w

08005a10 <pxCurrentTCBConst2>:
 8005a10:	200006b4 	.word	0x200006b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop

08005a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <prvPortStartFirstTask+0x24>)
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	6800      	ldr	r0, [r0, #0]
 8005a1e:	f380 8808 	msr	MSP, r0
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8814 	msr	CONTROL, r0
 8005a2a:	b662      	cpsie	i
 8005a2c:	b661      	cpsie	f
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	df00      	svc	0
 8005a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a3a:	bf00      	nop
 8005a3c:	e000ed08 	.word	0xe000ed08

08005a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a46:	4b37      	ldr	r3, [pc, #220]	; (8005b24 <xPortStartScheduler+0xe4>)
 8005a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	; (8005b28 <xPortStartScheduler+0xe8>)
 8005a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a6e:	4b2f      	ldr	r3, [pc, #188]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a74:	e009      	b.n	8005a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d0ef      	beq.n	8005a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <xPortStartScheduler+0xec>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1c3 0307 	rsb	r3, r3, #7
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d00c      	beq.n	8005abc <xPortStartScheduler+0x7c>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	b672      	cpsid	i
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	b662      	cpsie	i
 8005ab6:	60bb      	str	r3, [r7, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <xPortStartScheduler+0xec>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <xPortStartScheduler+0xec>)
 8005ad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <xPortStartScheduler+0xf0>)
 8005aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005af0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005af2:	f000 f8dd 	bl	8005cb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <xPortStartScheduler+0xf4>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005afc:	f000 f8fc 	bl	8005cf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <xPortStartScheduler+0xf8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <xPortStartScheduler+0xf8>)
 8005b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b0c:	f7ff ff84 	bl	8005a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b10:	f7ff fd60 	bl	80055d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005b14:	f7ff ff38 	bl	8005988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000e400 	.word	0xe000e400
 8005b28:	200007e0 	.word	0x200007e0
 8005b2c:	200007e4 	.word	0x200007e4
 8005b30:	e000ed20 	.word	0xe000ed20
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	e000ef34 	.word	0xe000ef34

08005b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	b672      	cpsid	i
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	b662      	cpsie	i
 8005b56:	607b      	str	r3, [r7, #4]
}
 8005b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b5a:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <vPortEnterCritical+0x60>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d111      	bne.n	8005b90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <vPortEnterCritical+0x64>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <vPortEnterCritical+0x54>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	603b      	str	r3, [r7, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vPortEnterCritical+0x52>
	}
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <vPortExitCritical+0x28>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	b672      	cpsid	i
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	b662      	cpsie	i
 8005bc6:	607b      	str	r3, [r7, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <vPortExitCritical+0x54>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <vPortExitCritical+0x46>
 8005bde:	2300      	movs	r3, #0
 8005be0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005be8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000000c 	.word	0x2000000c
 8005bfc:	00000000 	.word	0x00000000

08005c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c00:	f3ef 8009 	mrs	r0, PSP
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <pxCurrentTCBConst>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	f01e 0f10 	tst.w	lr, #16
 8005c10:	bf08      	it	eq
 8005c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	6010      	str	r0, [r2, #0]
 8005c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c24:	b672      	cpsid	i
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	b662      	cpsie	i
 8005c34:	f7ff fcce 	bl	80055d4 <vTaskSwitchContext>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	f380 8811 	msr	BASEPRI, r0
 8005c40:	bc09      	pop	{r0, r3}
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	f01e 0f10 	tst.w	lr, #16
 8005c4e:	bf08      	it	eq
 8005c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c54:	f380 8809 	msr	PSP, r0
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop

08005c60 <pxCurrentTCBConst>:
 8005c60:	200006b4 	.word	0x200006b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	b672      	cpsid	i
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	b662      	cpsie	i
 8005c82:	607b      	str	r3, [r7, #4]
}
 8005c84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c86:	f7ff fbeb 	bl	8005460 <xTaskIncrementTick>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <SysTick_Handler+0x44>)
 8005c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <vPortSetupTimerInterrupt+0x34>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <vPortSetupTimerInterrupt+0x38>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <vPortSetupTimerInterrupt+0x3c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <vPortSetupTimerInterrupt+0x40>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <vPortSetupTimerInterrupt+0x44>)
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <vPortSetupTimerInterrupt+0x34>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010
 8005ce8:	e000e018 	.word	0xe000e018
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	10624dd3 	.word	0x10624dd3
 8005cf4:	e000e014 	.word	0xe000e014

08005cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d08 <vPortEnableVFP+0x10>
 8005cfc:	6801      	ldr	r1, [r0, #0]
 8005cfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d02:	6001      	str	r1, [r0, #0]
 8005d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d06:	bf00      	nop
 8005d08:	e000ed88 	.word	0xe000ed88

08005d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d18:	f7ff faf6 	bl	8005308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <pvPortMalloc+0x180>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d24:	f000 f91a 	bl	8005f5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d28:	4b59      	ldr	r3, [pc, #356]	; (8005e90 <pvPortMalloc+0x184>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8092 	bne.w	8005e5a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01f      	beq.n	8005d7c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f023 0307 	bic.w	r3, r3, #7
 8005d54:	3308      	adds	r3, #8
 8005d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <pvPortMalloc+0x70>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	617b      	str	r3, [r7, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d06b      	beq.n	8005e5a <pvPortMalloc+0x14e>
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <pvPortMalloc+0x188>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d866      	bhi.n	8005e5a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <pvPortMalloc+0x18c>)
 8005d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <pvPortMalloc+0x18c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d96:	e004      	b.n	8005da2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <pvPortMalloc+0xa8>
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f1      	bne.n	8005d98 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <pvPortMalloc+0x180>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d04d      	beq.n	8005e5a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	4413      	add	r3, r2
 8005dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	2308      	movs	r3, #8
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d921      	bls.n	8005e24 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <pvPortMalloc+0x100>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	613b      	str	r3, [r7, #16]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f000 f8fe 	bl	8006020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <pvPortMalloc+0x188>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <pvPortMalloc+0x188>)
 8005e30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <pvPortMalloc+0x188>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <pvPortMalloc+0x190>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d203      	bcs.n	8005e46 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <pvPortMalloc+0x188>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <pvPortMalloc+0x190>)
 8005e44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <pvPortMalloc+0x184>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e5a:	f7ff fa63 	bl	8005324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <pvPortMalloc+0x176>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	b672      	cpsid	i
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	b662      	cpsie	i
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <pvPortMalloc+0x174>
	return pvReturn;
 8005e82:	69fb      	ldr	r3, [r7, #28]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	200043f0 	.word	0x200043f0
 8005e90:	200043fc 	.word	0x200043fc
 8005e94:	200043f4 	.word	0x200043f4
 8005e98:	200043e8 	.word	0x200043e8
 8005e9c:	200043f8 	.word	0x200043f8

08005ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04c      	beq.n	8005f4c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	425b      	negs	r3, r3
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <vPortFree+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10c      	bne.n	8005ee8 <vPortFree+0x48>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	b672      	cpsid	i
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	b662      	cpsie	i
 8005ee2:	60fb      	str	r3, [r7, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <vPortFree+0x6a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	b672      	cpsid	i
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	b662      	cpsie	i
 8005f04:	60bb      	str	r3, [r7, #8]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <vPortFree+0xb4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d019      	beq.n	8005f4c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <vPortFree+0xb4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f30:	f7ff f9ea 	bl	8005308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <vPortFree+0xb8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a06      	ldr	r2, [pc, #24]	; (8005f58 <vPortFree+0xb8>)
 8005f40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f000 f86c 	bl	8006020 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f48:	f7ff f9ec 	bl	8005324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200043fc 	.word	0x200043fc
 8005f58:	200043f4 	.word	0x200043f4

08005f5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <prvHeapInit+0xac>)
 8005f6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3307      	adds	r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0307 	bic.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <prvHeapInit+0xac>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <prvHeapInit+0xb0>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	; (800600c <prvHeapInit+0xb0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fa8:	2208      	movs	r2, #8
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <prvHeapInit+0xb4>)
 8005fbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <prvHeapInit+0xb4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <prvHeapInit+0xb4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <prvHeapInit+0xb4>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <prvHeapInit+0xb8>)
 8005fea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <prvHeapInit+0xbc>)
 8005ff2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <prvHeapInit+0xc0>)
 8005ff6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ffa:	601a      	str	r2, [r3, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	200007e8 	.word	0x200007e8
 800600c:	200043e8 	.word	0x200043e8
 8006010:	200043f0 	.word	0x200043f0
 8006014:	200043f8 	.word	0x200043f8
 8006018:	200043f4 	.word	0x200043f4
 800601c:	200043fc 	.word	0x200043fc

08006020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006028:	4b28      	ldr	r3, [pc, #160]	; (80060cc <prvInsertBlockIntoFreeList+0xac>)
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e002      	b.n	8006034 <prvInsertBlockIntoFreeList+0x14>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d8f7      	bhi.n	800602e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4413      	add	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d108      	bne.n	8006062 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	441a      	add	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d118      	bne.n	80060a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <prvInsertBlockIntoFreeList+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d00d      	beq.n	800609e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	441a      	add	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e008      	b.n	80060b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <prvInsertBlockIntoFreeList+0xb0>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e003      	b.n	80060b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d002      	beq.n	80060be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	200043e8 	.word	0x200043e8
 80060d0:	200043f0 	.word	0x200043f0

080060d4 <__errno>:
 80060d4:	4b01      	ldr	r3, [pc, #4]	; (80060dc <__errno+0x8>)
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000010 	.word	0x20000010

080060e0 <std>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ee:	6083      	str	r3, [r0, #8]
 80060f0:	8181      	strh	r1, [r0, #12]
 80060f2:	6643      	str	r3, [r0, #100]	; 0x64
 80060f4:	81c2      	strh	r2, [r0, #14]
 80060f6:	6183      	str	r3, [r0, #24]
 80060f8:	4619      	mov	r1, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	305c      	adds	r0, #92	; 0x5c
 80060fe:	f000 f91a 	bl	8006336 <memset>
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x38>)
 8006104:	6263      	str	r3, [r4, #36]	; 0x24
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x3c>)
 8006108:	62a3      	str	r3, [r4, #40]	; 0x28
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <std+0x40>)
 800610c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <std+0x44>)
 8006110:	6224      	str	r4, [r4, #32]
 8006112:	6323      	str	r3, [r4, #48]	; 0x30
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	08006de9 	.word	0x08006de9
 800611c:	08006e0b 	.word	0x08006e0b
 8006120:	08006e43 	.word	0x08006e43
 8006124:	08006e67 	.word	0x08006e67

08006128 <_cleanup_r>:
 8006128:	4901      	ldr	r1, [pc, #4]	; (8006130 <_cleanup_r+0x8>)
 800612a:	f000 b8af 	b.w	800628c <_fwalk_reent>
 800612e:	bf00      	nop
 8006130:	08007bb9 	.word	0x08007bb9

08006134 <__sfmoreglue>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	2268      	movs	r2, #104	; 0x68
 8006138:	1e4d      	subs	r5, r1, #1
 800613a:	4355      	muls	r5, r2
 800613c:	460e      	mov	r6, r1
 800613e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006142:	f000 f921 	bl	8006388 <_malloc_r>
 8006146:	4604      	mov	r4, r0
 8006148:	b140      	cbz	r0, 800615c <__sfmoreglue+0x28>
 800614a:	2100      	movs	r1, #0
 800614c:	e9c0 1600 	strd	r1, r6, [r0]
 8006150:	300c      	adds	r0, #12
 8006152:	60a0      	str	r0, [r4, #8]
 8006154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006158:	f000 f8ed 	bl	8006336 <memset>
 800615c:	4620      	mov	r0, r4
 800615e:	bd70      	pop	{r4, r5, r6, pc}

08006160 <__sfp_lock_acquire>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__sfp_lock_acquire+0x8>)
 8006162:	f000 b8d8 	b.w	8006316 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	20004401 	.word	0x20004401

0800616c <__sfp_lock_release>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__sfp_lock_release+0x8>)
 800616e:	f000 b8d3 	b.w	8006318 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	20004401 	.word	0x20004401

08006178 <__sinit_lock_acquire>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__sinit_lock_acquire+0x8>)
 800617a:	f000 b8cc 	b.w	8006316 <__retarget_lock_acquire_recursive>
 800617e:	bf00      	nop
 8006180:	20004402 	.word	0x20004402

08006184 <__sinit_lock_release>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sinit_lock_release+0x8>)
 8006186:	f000 b8c7 	b.w	8006318 <__retarget_lock_release_recursive>
 800618a:	bf00      	nop
 800618c:	20004402 	.word	0x20004402

08006190 <__sinit>:
 8006190:	b510      	push	{r4, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	f7ff fff0 	bl	8006178 <__sinit_lock_acquire>
 8006198:	69a3      	ldr	r3, [r4, #24]
 800619a:	b11b      	cbz	r3, 80061a4 <__sinit+0x14>
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a0:	f7ff bff0 	b.w	8006184 <__sinit_lock_release>
 80061a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a8:	6523      	str	r3, [r4, #80]	; 0x50
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <__sinit+0x68>)
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <__sinit+0x6c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	bf04      	itt	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	61a3      	streq	r3, [r4, #24]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f820 	bl	8006200 <__sfp>
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f81c 	bl	8006200 <__sfp>
 80061c8:	60a0      	str	r0, [r4, #8]
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f818 	bl	8006200 <__sfp>
 80061d0:	2200      	movs	r2, #0
 80061d2:	60e0      	str	r0, [r4, #12]
 80061d4:	2104      	movs	r1, #4
 80061d6:	6860      	ldr	r0, [r4, #4]
 80061d8:	f7ff ff82 	bl	80060e0 <std>
 80061dc:	68a0      	ldr	r0, [r4, #8]
 80061de:	2201      	movs	r2, #1
 80061e0:	2109      	movs	r1, #9
 80061e2:	f7ff ff7d 	bl	80060e0 <std>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	2112      	movs	r1, #18
 80061ec:	f7ff ff78 	bl	80060e0 <std>
 80061f0:	2301      	movs	r3, #1
 80061f2:	61a3      	str	r3, [r4, #24]
 80061f4:	e7d2      	b.n	800619c <__sinit+0xc>
 80061f6:	bf00      	nop
 80061f8:	08008bd4 	.word	0x08008bd4
 80061fc:	08006129 	.word	0x08006129

08006200 <__sfp>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	4607      	mov	r7, r0
 8006204:	f7ff ffac 	bl	8006160 <__sfp_lock_acquire>
 8006208:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <__sfp+0x84>)
 800620a:	681e      	ldr	r6, [r3, #0]
 800620c:	69b3      	ldr	r3, [r6, #24]
 800620e:	b913      	cbnz	r3, 8006216 <__sfp+0x16>
 8006210:	4630      	mov	r0, r6
 8006212:	f7ff ffbd 	bl	8006190 <__sinit>
 8006216:	3648      	adds	r6, #72	; 0x48
 8006218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800621c:	3b01      	subs	r3, #1
 800621e:	d503      	bpl.n	8006228 <__sfp+0x28>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	b30b      	cbz	r3, 8006268 <__sfp+0x68>
 8006224:	6836      	ldr	r6, [r6, #0]
 8006226:	e7f7      	b.n	8006218 <__sfp+0x18>
 8006228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800622c:	b9d5      	cbnz	r5, 8006264 <__sfp+0x64>
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <__sfp+0x88>)
 8006230:	60e3      	str	r3, [r4, #12]
 8006232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006236:	6665      	str	r5, [r4, #100]	; 0x64
 8006238:	f000 f86c 	bl	8006314 <__retarget_lock_init_recursive>
 800623c:	f7ff ff96 	bl	800616c <__sfp_lock_release>
 8006240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006248:	6025      	str	r5, [r4, #0]
 800624a:	61a5      	str	r5, [r4, #24]
 800624c:	2208      	movs	r2, #8
 800624e:	4629      	mov	r1, r5
 8006250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006254:	f000 f86f 	bl	8006336 <memset>
 8006258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800625c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006260:	4620      	mov	r0, r4
 8006262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006264:	3468      	adds	r4, #104	; 0x68
 8006266:	e7d9      	b.n	800621c <__sfp+0x1c>
 8006268:	2104      	movs	r1, #4
 800626a:	4638      	mov	r0, r7
 800626c:	f7ff ff62 	bl	8006134 <__sfmoreglue>
 8006270:	4604      	mov	r4, r0
 8006272:	6030      	str	r0, [r6, #0]
 8006274:	2800      	cmp	r0, #0
 8006276:	d1d5      	bne.n	8006224 <__sfp+0x24>
 8006278:	f7ff ff78 	bl	800616c <__sfp_lock_release>
 800627c:	230c      	movs	r3, #12
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	e7ee      	b.n	8006260 <__sfp+0x60>
 8006282:	bf00      	nop
 8006284:	08008bd4 	.word	0x08008bd4
 8006288:	ffff0001 	.word	0xffff0001

0800628c <_fwalk_reent>:
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006290:	4606      	mov	r6, r0
 8006292:	4688      	mov	r8, r1
 8006294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006298:	2700      	movs	r7, #0
 800629a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800629e:	f1b9 0901 	subs.w	r9, r9, #1
 80062a2:	d505      	bpl.n	80062b0 <_fwalk_reent+0x24>
 80062a4:	6824      	ldr	r4, [r4, #0]
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	d1f7      	bne.n	800629a <_fwalk_reent+0xe>
 80062aa:	4638      	mov	r0, r7
 80062ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b0:	89ab      	ldrh	r3, [r5, #12]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d907      	bls.n	80062c6 <_fwalk_reent+0x3a>
 80062b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062ba:	3301      	adds	r3, #1
 80062bc:	d003      	beq.n	80062c6 <_fwalk_reent+0x3a>
 80062be:	4629      	mov	r1, r5
 80062c0:	4630      	mov	r0, r6
 80062c2:	47c0      	blx	r8
 80062c4:	4307      	orrs	r7, r0
 80062c6:	3568      	adds	r5, #104	; 0x68
 80062c8:	e7e9      	b.n	800629e <_fwalk_reent+0x12>
	...

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4d0d      	ldr	r5, [pc, #52]	; (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	; (8006308 <__libc_init_array+0x3c>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2600      	movs	r6, #0
 80062d8:	42a6      	cmp	r6, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4d0b      	ldr	r5, [pc, #44]	; (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	; (8006310 <__libc_init_array+0x44>)
 80062e0:	f002 fc04 	bl	8008aec <_init>
 80062e4:	1b64      	subs	r4, r4, r5
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2600      	movs	r6, #0
 80062ea:	42a6      	cmp	r6, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f4:	4798      	blx	r3
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fe:	4798      	blx	r3
 8006300:	3601      	adds	r6, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	08008f54 	.word	0x08008f54
 8006308:	08008f54 	.word	0x08008f54
 800630c:	08008f54 	.word	0x08008f54
 8006310:	08008f58 	.word	0x08008f58

08006314 <__retarget_lock_init_recursive>:
 8006314:	4770      	bx	lr

08006316 <__retarget_lock_acquire_recursive>:
 8006316:	4770      	bx	lr

08006318 <__retarget_lock_release_recursive>:
 8006318:	4770      	bx	lr

0800631a <memcpy>:
 800631a:	440a      	add	r2, r1
 800631c:	4291      	cmp	r1, r2
 800631e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006322:	d100      	bne.n	8006326 <memcpy+0xc>
 8006324:	4770      	bx	lr
 8006326:	b510      	push	{r4, lr}
 8006328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006330:	4291      	cmp	r1, r2
 8006332:	d1f9      	bne.n	8006328 <memcpy+0xe>
 8006334:	bd10      	pop	{r4, pc}

08006336 <memset>:
 8006336:	4402      	add	r2, r0
 8006338:	4603      	mov	r3, r0
 800633a:	4293      	cmp	r3, r2
 800633c:	d100      	bne.n	8006340 <memset+0xa>
 800633e:	4770      	bx	lr
 8006340:	f803 1b01 	strb.w	r1, [r3], #1
 8006344:	e7f9      	b.n	800633a <memset+0x4>
	...

08006348 <sbrk_aligned>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	4e0e      	ldr	r6, [pc, #56]	; (8006384 <sbrk_aligned+0x3c>)
 800634c:	460c      	mov	r4, r1
 800634e:	6831      	ldr	r1, [r6, #0]
 8006350:	4605      	mov	r5, r0
 8006352:	b911      	cbnz	r1, 800635a <sbrk_aligned+0x12>
 8006354:	f000 fd38 	bl	8006dc8 <_sbrk_r>
 8006358:	6030      	str	r0, [r6, #0]
 800635a:	4621      	mov	r1, r4
 800635c:	4628      	mov	r0, r5
 800635e:	f000 fd33 	bl	8006dc8 <_sbrk_r>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	d00a      	beq.n	800637c <sbrk_aligned+0x34>
 8006366:	1cc4      	adds	r4, r0, #3
 8006368:	f024 0403 	bic.w	r4, r4, #3
 800636c:	42a0      	cmp	r0, r4
 800636e:	d007      	beq.n	8006380 <sbrk_aligned+0x38>
 8006370:	1a21      	subs	r1, r4, r0
 8006372:	4628      	mov	r0, r5
 8006374:	f000 fd28 	bl	8006dc8 <_sbrk_r>
 8006378:	3001      	adds	r0, #1
 800637a:	d101      	bne.n	8006380 <sbrk_aligned+0x38>
 800637c:	f04f 34ff 	mov.w	r4, #4294967295
 8006380:	4620      	mov	r0, r4
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	20004408 	.word	0x20004408

08006388 <_malloc_r>:
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	1ccd      	adds	r5, r1, #3
 800638e:	f025 0503 	bic.w	r5, r5, #3
 8006392:	3508      	adds	r5, #8
 8006394:	2d0c      	cmp	r5, #12
 8006396:	bf38      	it	cc
 8006398:	250c      	movcc	r5, #12
 800639a:	2d00      	cmp	r5, #0
 800639c:	4607      	mov	r7, r0
 800639e:	db01      	blt.n	80063a4 <_malloc_r+0x1c>
 80063a0:	42a9      	cmp	r1, r5
 80063a2:	d905      	bls.n	80063b0 <_malloc_r+0x28>
 80063a4:	230c      	movs	r3, #12
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	2600      	movs	r6, #0
 80063aa:	4630      	mov	r0, r6
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b0:	4e2e      	ldr	r6, [pc, #184]	; (800646c <_malloc_r+0xe4>)
 80063b2:	f001 fc5b 	bl	8007c6c <__malloc_lock>
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	461c      	mov	r4, r3
 80063ba:	bb34      	cbnz	r4, 800640a <_malloc_r+0x82>
 80063bc:	4629      	mov	r1, r5
 80063be:	4638      	mov	r0, r7
 80063c0:	f7ff ffc2 	bl	8006348 <sbrk_aligned>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	4604      	mov	r4, r0
 80063c8:	d14d      	bne.n	8006466 <_malloc_r+0xde>
 80063ca:	6834      	ldr	r4, [r6, #0]
 80063cc:	4626      	mov	r6, r4
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	d140      	bne.n	8006454 <_malloc_r+0xcc>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	4631      	mov	r1, r6
 80063d6:	4638      	mov	r0, r7
 80063d8:	eb04 0803 	add.w	r8, r4, r3
 80063dc:	f000 fcf4 	bl	8006dc8 <_sbrk_r>
 80063e0:	4580      	cmp	r8, r0
 80063e2:	d13a      	bne.n	800645a <_malloc_r+0xd2>
 80063e4:	6821      	ldr	r1, [r4, #0]
 80063e6:	3503      	adds	r5, #3
 80063e8:	1a6d      	subs	r5, r5, r1
 80063ea:	f025 0503 	bic.w	r5, r5, #3
 80063ee:	3508      	adds	r5, #8
 80063f0:	2d0c      	cmp	r5, #12
 80063f2:	bf38      	it	cc
 80063f4:	250c      	movcc	r5, #12
 80063f6:	4629      	mov	r1, r5
 80063f8:	4638      	mov	r0, r7
 80063fa:	f7ff ffa5 	bl	8006348 <sbrk_aligned>
 80063fe:	3001      	adds	r0, #1
 8006400:	d02b      	beq.n	800645a <_malloc_r+0xd2>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	442b      	add	r3, r5
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	e00e      	b.n	8006428 <_malloc_r+0xa0>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	1b52      	subs	r2, r2, r5
 800640e:	d41e      	bmi.n	800644e <_malloc_r+0xc6>
 8006410:	2a0b      	cmp	r2, #11
 8006412:	d916      	bls.n	8006442 <_malloc_r+0xba>
 8006414:	1961      	adds	r1, r4, r5
 8006416:	42a3      	cmp	r3, r4
 8006418:	6025      	str	r5, [r4, #0]
 800641a:	bf18      	it	ne
 800641c:	6059      	strne	r1, [r3, #4]
 800641e:	6863      	ldr	r3, [r4, #4]
 8006420:	bf08      	it	eq
 8006422:	6031      	streq	r1, [r6, #0]
 8006424:	5162      	str	r2, [r4, r5]
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	4638      	mov	r0, r7
 800642a:	f104 060b 	add.w	r6, r4, #11
 800642e:	f001 fc23 	bl	8007c78 <__malloc_unlock>
 8006432:	f026 0607 	bic.w	r6, r6, #7
 8006436:	1d23      	adds	r3, r4, #4
 8006438:	1af2      	subs	r2, r6, r3
 800643a:	d0b6      	beq.n	80063aa <_malloc_r+0x22>
 800643c:	1b9b      	subs	r3, r3, r6
 800643e:	50a3      	str	r3, [r4, r2]
 8006440:	e7b3      	b.n	80063aa <_malloc_r+0x22>
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	42a3      	cmp	r3, r4
 8006446:	bf0c      	ite	eq
 8006448:	6032      	streq	r2, [r6, #0]
 800644a:	605a      	strne	r2, [r3, #4]
 800644c:	e7ec      	b.n	8006428 <_malloc_r+0xa0>
 800644e:	4623      	mov	r3, r4
 8006450:	6864      	ldr	r4, [r4, #4]
 8006452:	e7b2      	b.n	80063ba <_malloc_r+0x32>
 8006454:	4634      	mov	r4, r6
 8006456:	6876      	ldr	r6, [r6, #4]
 8006458:	e7b9      	b.n	80063ce <_malloc_r+0x46>
 800645a:	230c      	movs	r3, #12
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4638      	mov	r0, r7
 8006460:	f001 fc0a 	bl	8007c78 <__malloc_unlock>
 8006464:	e7a1      	b.n	80063aa <_malloc_r+0x22>
 8006466:	6025      	str	r5, [r4, #0]
 8006468:	e7de      	b.n	8006428 <_malloc_r+0xa0>
 800646a:	bf00      	nop
 800646c:	20004404 	.word	0x20004404

08006470 <__cvt>:
 8006470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006472:	ed2d 8b02 	vpush	{d8}
 8006476:	eeb0 8b40 	vmov.f64	d8, d0
 800647a:	b085      	sub	sp, #20
 800647c:	4617      	mov	r7, r2
 800647e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006480:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006482:	ee18 2a90 	vmov	r2, s17
 8006486:	f025 0520 	bic.w	r5, r5, #32
 800648a:	2a00      	cmp	r2, #0
 800648c:	bfb6      	itet	lt
 800648e:	222d      	movlt	r2, #45	; 0x2d
 8006490:	2200      	movge	r2, #0
 8006492:	eeb1 8b40 	vneglt.f64	d8, d0
 8006496:	2d46      	cmp	r5, #70	; 0x46
 8006498:	460c      	mov	r4, r1
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	d004      	beq.n	80064a8 <__cvt+0x38>
 800649e:	2d45      	cmp	r5, #69	; 0x45
 80064a0:	d100      	bne.n	80064a4 <__cvt+0x34>
 80064a2:	3401      	adds	r4, #1
 80064a4:	2102      	movs	r1, #2
 80064a6:	e000      	b.n	80064aa <__cvt+0x3a>
 80064a8:	2103      	movs	r1, #3
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	ab02      	add	r3, sp, #8
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4622      	mov	r2, r4
 80064b4:	4633      	mov	r3, r6
 80064b6:	eeb0 0b48 	vmov.f64	d0, d8
 80064ba:	f000 fd89 	bl	8006fd0 <_dtoa_r>
 80064be:	2d47      	cmp	r5, #71	; 0x47
 80064c0:	d101      	bne.n	80064c6 <__cvt+0x56>
 80064c2:	07fb      	lsls	r3, r7, #31
 80064c4:	d51a      	bpl.n	80064fc <__cvt+0x8c>
 80064c6:	2d46      	cmp	r5, #70	; 0x46
 80064c8:	eb00 0204 	add.w	r2, r0, r4
 80064cc:	d10c      	bne.n	80064e8 <__cvt+0x78>
 80064ce:	7803      	ldrb	r3, [r0, #0]
 80064d0:	2b30      	cmp	r3, #48	; 0x30
 80064d2:	d107      	bne.n	80064e4 <__cvt+0x74>
 80064d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	bf1c      	itt	ne
 80064de:	f1c4 0401 	rsbne	r4, r4, #1
 80064e2:	6034      	strne	r4, [r6, #0]
 80064e4:	6833      	ldr	r3, [r6, #0]
 80064e6:	441a      	add	r2, r3
 80064e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	bf08      	it	eq
 80064f2:	9203      	streq	r2, [sp, #12]
 80064f4:	2130      	movs	r1, #48	; 0x30
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d307      	bcc.n	800650c <__cvt+0x9c>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006500:	1a1b      	subs	r3, r3, r0
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	b005      	add	sp, #20
 8006506:	ecbd 8b02 	vpop	{d8}
 800650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800650c:	1c5c      	adds	r4, r3, #1
 800650e:	9403      	str	r4, [sp, #12]
 8006510:	7019      	strb	r1, [r3, #0]
 8006512:	e7f0      	b.n	80064f6 <__cvt+0x86>

08006514 <__exponent>:
 8006514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006516:	4603      	mov	r3, r0
 8006518:	2900      	cmp	r1, #0
 800651a:	bfb8      	it	lt
 800651c:	4249      	neglt	r1, r1
 800651e:	f803 2b02 	strb.w	r2, [r3], #2
 8006522:	bfb4      	ite	lt
 8006524:	222d      	movlt	r2, #45	; 0x2d
 8006526:	222b      	movge	r2, #43	; 0x2b
 8006528:	2909      	cmp	r1, #9
 800652a:	7042      	strb	r2, [r0, #1]
 800652c:	dd2a      	ble.n	8006584 <__exponent+0x70>
 800652e:	f10d 0407 	add.w	r4, sp, #7
 8006532:	46a4      	mov	ip, r4
 8006534:	270a      	movs	r7, #10
 8006536:	46a6      	mov	lr, r4
 8006538:	460a      	mov	r2, r1
 800653a:	fb91 f6f7 	sdiv	r6, r1, r7
 800653e:	fb07 1516 	mls	r5, r7, r6, r1
 8006542:	3530      	adds	r5, #48	; 0x30
 8006544:	2a63      	cmp	r2, #99	; 0x63
 8006546:	f104 34ff 	add.w	r4, r4, #4294967295
 800654a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800654e:	4631      	mov	r1, r6
 8006550:	dcf1      	bgt.n	8006536 <__exponent+0x22>
 8006552:	3130      	adds	r1, #48	; 0x30
 8006554:	f1ae 0502 	sub.w	r5, lr, #2
 8006558:	f804 1c01 	strb.w	r1, [r4, #-1]
 800655c:	1c44      	adds	r4, r0, #1
 800655e:	4629      	mov	r1, r5
 8006560:	4561      	cmp	r1, ip
 8006562:	d30a      	bcc.n	800657a <__exponent+0x66>
 8006564:	f10d 0209 	add.w	r2, sp, #9
 8006568:	eba2 020e 	sub.w	r2, r2, lr
 800656c:	4565      	cmp	r5, ip
 800656e:	bf88      	it	hi
 8006570:	2200      	movhi	r2, #0
 8006572:	4413      	add	r3, r2
 8006574:	1a18      	subs	r0, r3, r0
 8006576:	b003      	add	sp, #12
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006582:	e7ed      	b.n	8006560 <__exponent+0x4c>
 8006584:	2330      	movs	r3, #48	; 0x30
 8006586:	3130      	adds	r1, #48	; 0x30
 8006588:	7083      	strb	r3, [r0, #2]
 800658a:	70c1      	strb	r1, [r0, #3]
 800658c:	1d03      	adds	r3, r0, #4
 800658e:	e7f1      	b.n	8006574 <__exponent+0x60>

08006590 <_printf_float>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	b08b      	sub	sp, #44	; 0x2c
 8006596:	460c      	mov	r4, r1
 8006598:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800659c:	4616      	mov	r6, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	4605      	mov	r5, r0
 80065a2:	f001 fb45 	bl	8007c30 <_localeconv_r>
 80065a6:	f8d0 b000 	ldr.w	fp, [r0]
 80065aa:	4658      	mov	r0, fp
 80065ac:	f7f9 fe48 	bl	8000240 <strlen>
 80065b0:	2300      	movs	r3, #0
 80065b2:	9308      	str	r3, [sp, #32]
 80065b4:	f8d8 3000 	ldr.w	r3, [r8]
 80065b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	3307      	adds	r3, #7
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	f103 0108 	add.w	r1, r3, #8
 80065c8:	f8c8 1000 	str.w	r1, [r8]
 80065cc:	4682      	mov	sl, r0
 80065ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80065d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006838 <_printf_float+0x2a8>
 80065da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80065de:	eeb0 6bc0 	vabs.f64	d6, d0
 80065e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	dd24      	ble.n	8006636 <_printf_float+0xa6>
 80065ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80065f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f4:	d502      	bpl.n	80065fc <_printf_float+0x6c>
 80065f6:	232d      	movs	r3, #45	; 0x2d
 80065f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fc:	4b90      	ldr	r3, [pc, #576]	; (8006840 <_printf_float+0x2b0>)
 80065fe:	4891      	ldr	r0, [pc, #580]	; (8006844 <_printf_float+0x2b4>)
 8006600:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006604:	bf94      	ite	ls
 8006606:	4698      	movls	r8, r3
 8006608:	4680      	movhi	r8, r0
 800660a:	2303      	movs	r3, #3
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	f022 0204 	bic.w	r2, r2, #4
 8006612:	2300      	movs	r3, #0
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	9700      	str	r7, [sp, #0]
 800661a:	4633      	mov	r3, r6
 800661c:	aa09      	add	r2, sp, #36	; 0x24
 800661e:	4621      	mov	r1, r4
 8006620:	4628      	mov	r0, r5
 8006622:	f000 f9d3 	bl	80069cc <_printf_common>
 8006626:	3001      	adds	r0, #1
 8006628:	f040 808a 	bne.w	8006740 <_printf_float+0x1b0>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	b00b      	add	sp, #44	; 0x2c
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	eeb4 0b40 	vcmp.f64	d0, d0
 800663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663e:	d709      	bvc.n	8006654 <_printf_float+0xc4>
 8006640:	ee10 3a90 	vmov	r3, s1
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	232d      	movlt	r3, #45	; 0x2d
 800664a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800664e:	487e      	ldr	r0, [pc, #504]	; (8006848 <_printf_float+0x2b8>)
 8006650:	4b7e      	ldr	r3, [pc, #504]	; (800684c <_printf_float+0x2bc>)
 8006652:	e7d5      	b.n	8006600 <_printf_float+0x70>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800665a:	9104      	str	r1, [sp, #16]
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	d13c      	bne.n	80066da <_printf_float+0x14a>
 8006660:	2306      	movs	r3, #6
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	2300      	movs	r3, #0
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	ab08      	add	r3, sp, #32
 800666a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800666e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006672:	ab07      	add	r3, sp, #28
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	f10d 031b 	add.w	r3, sp, #27
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff fef6 	bl	8006470 <__cvt>
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	9907      	ldr	r1, [sp, #28]
 8006688:	2b47      	cmp	r3, #71	; 0x47
 800668a:	4680      	mov	r8, r0
 800668c:	d108      	bne.n	80066a0 <_printf_float+0x110>
 800668e:	1cc8      	adds	r0, r1, #3
 8006690:	db02      	blt.n	8006698 <_printf_float+0x108>
 8006692:	6863      	ldr	r3, [r4, #4]
 8006694:	4299      	cmp	r1, r3
 8006696:	dd41      	ble.n	800671c <_printf_float+0x18c>
 8006698:	f1a9 0902 	sub.w	r9, r9, #2
 800669c:	fa5f f989 	uxtb.w	r9, r9
 80066a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066a4:	d820      	bhi.n	80066e8 <_printf_float+0x158>
 80066a6:	3901      	subs	r1, #1
 80066a8:	464a      	mov	r2, r9
 80066aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ae:	9107      	str	r1, [sp, #28]
 80066b0:	f7ff ff30 	bl	8006514 <__exponent>
 80066b4:	9a08      	ldr	r2, [sp, #32]
 80066b6:	9004      	str	r0, [sp, #16]
 80066b8:	1813      	adds	r3, r2, r0
 80066ba:	2a01      	cmp	r2, #1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	dc02      	bgt.n	80066c6 <_printf_float+0x136>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	07d2      	lsls	r2, r2, #31
 80066c4:	d501      	bpl.n	80066ca <_printf_float+0x13a>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0a2      	beq.n	8006618 <_printf_float+0x88>
 80066d2:	232d      	movs	r3, #45	; 0x2d
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	e79e      	b.n	8006618 <_printf_float+0x88>
 80066da:	9904      	ldr	r1, [sp, #16]
 80066dc:	2947      	cmp	r1, #71	; 0x47
 80066de:	d1c1      	bne.n	8006664 <_printf_float+0xd4>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1bf      	bne.n	8006664 <_printf_float+0xd4>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e7bc      	b.n	8006662 <_printf_float+0xd2>
 80066e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066ec:	d118      	bne.n	8006720 <_printf_float+0x190>
 80066ee:	2900      	cmp	r1, #0
 80066f0:	6863      	ldr	r3, [r4, #4]
 80066f2:	dd0b      	ble.n	800670c <_printf_float+0x17c>
 80066f4:	6121      	str	r1, [r4, #16]
 80066f6:	b913      	cbnz	r3, 80066fe <_printf_float+0x16e>
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	07d0      	lsls	r0, r2, #31
 80066fc:	d502      	bpl.n	8006704 <_printf_float+0x174>
 80066fe:	3301      	adds	r3, #1
 8006700:	440b      	add	r3, r1
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2300      	movs	r3, #0
 8006706:	65a1      	str	r1, [r4, #88]	; 0x58
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	e7de      	b.n	80066ca <_printf_float+0x13a>
 800670c:	b913      	cbnz	r3, 8006714 <_printf_float+0x184>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	07d2      	lsls	r2, r2, #31
 8006712:	d501      	bpl.n	8006718 <_printf_float+0x188>
 8006714:	3302      	adds	r3, #2
 8006716:	e7f4      	b.n	8006702 <_printf_float+0x172>
 8006718:	2301      	movs	r3, #1
 800671a:	e7f2      	b.n	8006702 <_printf_float+0x172>
 800671c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	4299      	cmp	r1, r3
 8006724:	db05      	blt.n	8006732 <_printf_float+0x1a2>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	6121      	str	r1, [r4, #16]
 800672a:	07d8      	lsls	r0, r3, #31
 800672c:	d5ea      	bpl.n	8006704 <_printf_float+0x174>
 800672e:	1c4b      	adds	r3, r1, #1
 8006730:	e7e7      	b.n	8006702 <_printf_float+0x172>
 8006732:	2900      	cmp	r1, #0
 8006734:	bfd4      	ite	le
 8006736:	f1c1 0202 	rsble	r2, r1, #2
 800673a:	2201      	movgt	r2, #1
 800673c:	4413      	add	r3, r2
 800673e:	e7e0      	b.n	8006702 <_printf_float+0x172>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	055a      	lsls	r2, r3, #21
 8006744:	d407      	bmi.n	8006756 <_printf_float+0x1c6>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	4642      	mov	r2, r8
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	d12a      	bne.n	80067aa <_printf_float+0x21a>
 8006754:	e76a      	b.n	800662c <_printf_float+0x9c>
 8006756:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800675a:	f240 80e2 	bls.w	8006922 <_printf_float+0x392>
 800675e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676a:	d133      	bne.n	80067d4 <_printf_float+0x244>
 800676c:	4a38      	ldr	r2, [pc, #224]	; (8006850 <_printf_float+0x2c0>)
 800676e:	2301      	movs	r3, #1
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f af58 	beq.w	800662c <_printf_float+0x9c>
 800677c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	db02      	blt.n	800678a <_printf_float+0x1fa>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	07d8      	lsls	r0, r3, #31
 8006788:	d50f      	bpl.n	80067aa <_printf_float+0x21a>
 800678a:	4653      	mov	r3, sl
 800678c:	465a      	mov	r2, fp
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f af49 	beq.w	800662c <_printf_float+0x9c>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	f104 091a 	add.w	r9, r4, #26
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4543      	cmp	r3, r8
 80067a8:	dc09      	bgt.n	80067be <_printf_float+0x22e>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	079b      	lsls	r3, r3, #30
 80067ae:	f100 8108 	bmi.w	80069c2 <_printf_float+0x432>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e738      	b.n	8006630 <_printf_float+0xa0>
 80067be:	2301      	movs	r3, #1
 80067c0:	464a      	mov	r2, r9
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f af2f 	beq.w	800662c <_printf_float+0x9c>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	e7e6      	b.n	80067a2 <_printf_float+0x212>
 80067d4:	9b07      	ldr	r3, [sp, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dc3c      	bgt.n	8006854 <_printf_float+0x2c4>
 80067da:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <_printf_float+0x2c0>)
 80067dc:	2301      	movs	r3, #1
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f af21 	beq.w	800662c <_printf_float+0x9c>
 80067ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d102      	bne.n	80067f8 <_printf_float+0x268>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	07d9      	lsls	r1, r3, #31
 80067f6:	d5d8      	bpl.n	80067aa <_printf_float+0x21a>
 80067f8:	4653      	mov	r3, sl
 80067fa:	465a      	mov	r2, fp
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af12 	beq.w	800662c <_printf_float+0x9c>
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	f104 0a1a 	add.w	sl, r4, #26
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	425b      	negs	r3, r3
 8006814:	454b      	cmp	r3, r9
 8006816:	dc01      	bgt.n	800681c <_printf_float+0x28c>
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	e795      	b.n	8006748 <_printf_float+0x1b8>
 800681c:	2301      	movs	r3, #1
 800681e:	4652      	mov	r2, sl
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f af00 	beq.w	800662c <_printf_float+0x9c>
 800682c:	f109 0901 	add.w	r9, r9, #1
 8006830:	e7ee      	b.n	8006810 <_printf_float+0x280>
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
 8006838:	ffffffff 	.word	0xffffffff
 800683c:	7fefffff 	.word	0x7fefffff
 8006840:	08008bd8 	.word	0x08008bd8
 8006844:	08008bdc 	.word	0x08008bdc
 8006848:	08008be4 	.word	0x08008be4
 800684c:	08008be0 	.word	0x08008be0
 8006850:	08008be8 	.word	0x08008be8
 8006854:	9a08      	ldr	r2, [sp, #32]
 8006856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006858:	429a      	cmp	r2, r3
 800685a:	bfa8      	it	ge
 800685c:	461a      	movge	r2, r3
 800685e:	2a00      	cmp	r2, #0
 8006860:	4691      	mov	r9, r2
 8006862:	dc38      	bgt.n	80068d6 <_printf_float+0x346>
 8006864:	2300      	movs	r3, #0
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686c:	f104 021a 	add.w	r2, r4, #26
 8006870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006872:	9905      	ldr	r1, [sp, #20]
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	eba3 0309 	sub.w	r3, r3, r9
 800687a:	428b      	cmp	r3, r1
 800687c:	dc33      	bgt.n	80068e6 <_printf_float+0x356>
 800687e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006882:	429a      	cmp	r2, r3
 8006884:	db3c      	blt.n	8006900 <_printf_float+0x370>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	07da      	lsls	r2, r3, #31
 800688a:	d439      	bmi.n	8006900 <_printf_float+0x370>
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	9907      	ldr	r1, [sp, #28]
 8006892:	1a9a      	subs	r2, r3, r2
 8006894:	eba3 0901 	sub.w	r9, r3, r1
 8006898:	4591      	cmp	r9, r2
 800689a:	bfa8      	it	ge
 800689c:	4691      	movge	r9, r2
 800689e:	f1b9 0f00 	cmp.w	r9, #0
 80068a2:	dc35      	bgt.n	8006910 <_printf_float+0x380>
 80068a4:	f04f 0800 	mov.w	r8, #0
 80068a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ac:	f104 0a1a 	add.w	sl, r4, #26
 80068b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	eba3 0309 	sub.w	r3, r3, r9
 80068ba:	4543      	cmp	r3, r8
 80068bc:	f77f af75 	ble.w	80067aa <_printf_float+0x21a>
 80068c0:	2301      	movs	r3, #1
 80068c2:	4652      	mov	r2, sl
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f aeae 	beq.w	800662c <_printf_float+0x9c>
 80068d0:	f108 0801 	add.w	r8, r8, #1
 80068d4:	e7ec      	b.n	80068b0 <_printf_float+0x320>
 80068d6:	4613      	mov	r3, r2
 80068d8:	4631      	mov	r1, r6
 80068da:	4642      	mov	r2, r8
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	d1bf      	bne.n	8006864 <_printf_float+0x2d4>
 80068e4:	e6a2      	b.n	800662c <_printf_float+0x9c>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	9204      	str	r2, [sp, #16]
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f ae9b 	beq.w	800662c <_printf_float+0x9c>
 80068f6:	9b05      	ldr	r3, [sp, #20]
 80068f8:	9a04      	ldr	r2, [sp, #16]
 80068fa:	3301      	adds	r3, #1
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	e7b7      	b.n	8006870 <_printf_float+0x2e0>
 8006900:	4653      	mov	r3, sl
 8006902:	465a      	mov	r2, fp
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	d1be      	bne.n	800688c <_printf_float+0x2fc>
 800690e:	e68d      	b.n	800662c <_printf_float+0x9c>
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	464b      	mov	r3, r9
 8006914:	4442      	add	r2, r8
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	d1c1      	bne.n	80068a4 <_printf_float+0x314>
 8006920:	e684      	b.n	800662c <_printf_float+0x9c>
 8006922:	9a08      	ldr	r2, [sp, #32]
 8006924:	2a01      	cmp	r2, #1
 8006926:	dc01      	bgt.n	800692c <_printf_float+0x39c>
 8006928:	07db      	lsls	r3, r3, #31
 800692a:	d537      	bpl.n	800699c <_printf_float+0x40c>
 800692c:	2301      	movs	r3, #1
 800692e:	4642      	mov	r2, r8
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	f43f ae78 	beq.w	800662c <_printf_float+0x9c>
 800693c:	4653      	mov	r3, sl
 800693e:	465a      	mov	r2, fp
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f ae70 	beq.w	800662c <_printf_float+0x9c>
 800694c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	d01b      	beq.n	8006992 <_printf_float+0x402>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	f108 0201 	add.w	r2, r8, #1
 8006960:	3b01      	subs	r3, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d10e      	bne.n	800698a <_printf_float+0x3fa>
 800696c:	e65e      	b.n	800662c <_printf_float+0x9c>
 800696e:	2301      	movs	r3, #1
 8006970:	464a      	mov	r2, r9
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae57 	beq.w	800662c <_printf_float+0x9c>
 800697e:	f108 0801 	add.w	r8, r8, #1
 8006982:	9b08      	ldr	r3, [sp, #32]
 8006984:	3b01      	subs	r3, #1
 8006986:	4543      	cmp	r3, r8
 8006988:	dcf1      	bgt.n	800696e <_printf_float+0x3de>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006990:	e6db      	b.n	800674a <_printf_float+0x1ba>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	f104 091a 	add.w	r9, r4, #26
 800699a:	e7f2      	b.n	8006982 <_printf_float+0x3f2>
 800699c:	2301      	movs	r3, #1
 800699e:	4642      	mov	r2, r8
 80069a0:	e7df      	b.n	8006962 <_printf_float+0x3d2>
 80069a2:	2301      	movs	r3, #1
 80069a4:	464a      	mov	r2, r9
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	f43f ae3d 	beq.w	800662c <_printf_float+0x9c>
 80069b2:	f108 0801 	add.w	r8, r8, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	4543      	cmp	r3, r8
 80069be:	dcf0      	bgt.n	80069a2 <_printf_float+0x412>
 80069c0:	e6f7      	b.n	80067b2 <_printf_float+0x222>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	f104 0919 	add.w	r9, r4, #25
 80069ca:	e7f4      	b.n	80069b6 <_printf_float+0x426>

080069cc <_printf_common>:
 80069cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d0:	4616      	mov	r6, r2
 80069d2:	4699      	mov	r9, r3
 80069d4:	688a      	ldr	r2, [r1, #8]
 80069d6:	690b      	ldr	r3, [r1, #16]
 80069d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069dc:	4293      	cmp	r3, r2
 80069de:	bfb8      	it	lt
 80069e0:	4613      	movlt	r3, r2
 80069e2:	6033      	str	r3, [r6, #0]
 80069e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e8:	4607      	mov	r7, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	b10a      	cbz	r2, 80069f2 <_printf_common+0x26>
 80069ee:	3301      	adds	r3, #1
 80069f0:	6033      	str	r3, [r6, #0]
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	0699      	lsls	r1, r3, #26
 80069f6:	bf42      	ittt	mi
 80069f8:	6833      	ldrmi	r3, [r6, #0]
 80069fa:	3302      	addmi	r3, #2
 80069fc:	6033      	strmi	r3, [r6, #0]
 80069fe:	6825      	ldr	r5, [r4, #0]
 8006a00:	f015 0506 	ands.w	r5, r5, #6
 8006a04:	d106      	bne.n	8006a14 <_printf_common+0x48>
 8006a06:	f104 0a19 	add.w	sl, r4, #25
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	6832      	ldr	r2, [r6, #0]
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dc26      	bgt.n	8006a62 <_printf_common+0x96>
 8006a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a18:	1e13      	subs	r3, r2, #0
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	0692      	lsls	r2, r2, #26
 8006a22:	d42b      	bmi.n	8006a7c <_printf_common+0xb0>
 8006a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c0      	blx	r8
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d01e      	beq.n	8006a70 <_printf_common+0xa4>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	68e5      	ldr	r5, [r4, #12]
 8006a36:	6832      	ldr	r2, [r6, #0]
 8006a38:	f003 0306 	and.w	r3, r3, #6
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	bf08      	it	eq
 8006a40:	1aad      	subeq	r5, r5, r2
 8006a42:	68a3      	ldr	r3, [r4, #8]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	bf0c      	ite	eq
 8006a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a4c:	2500      	movne	r5, #0
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	bfc4      	itt	gt
 8006a52:	1a9b      	subgt	r3, r3, r2
 8006a54:	18ed      	addgt	r5, r5, r3
 8006a56:	2600      	movs	r6, #0
 8006a58:	341a      	adds	r4, #26
 8006a5a:	42b5      	cmp	r5, r6
 8006a5c:	d11a      	bne.n	8006a94 <_printf_common+0xc8>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e008      	b.n	8006a74 <_printf_common+0xa8>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4652      	mov	r2, sl
 8006a66:	4649      	mov	r1, r9
 8006a68:	4638      	mov	r0, r7
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d103      	bne.n	8006a78 <_printf_common+0xac>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a78:	3501      	adds	r5, #1
 8006a7a:	e7c6      	b.n	8006a0a <_printf_common+0x3e>
 8006a7c:	18e1      	adds	r1, r4, r3
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	2030      	movs	r0, #48	; 0x30
 8006a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a86:	4422      	add	r2, r4
 8006a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a90:	3302      	adds	r3, #2
 8006a92:	e7c7      	b.n	8006a24 <_printf_common+0x58>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4622      	mov	r2, r4
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	47c0      	blx	r8
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d0e6      	beq.n	8006a70 <_printf_common+0xa4>
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7d9      	b.n	8006a5a <_printf_common+0x8e>
	...

08006aa8 <_printf_i>:
 8006aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	7e0f      	ldrb	r7, [r1, #24]
 8006aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ab0:	2f78      	cmp	r7, #120	; 0x78
 8006ab2:	4691      	mov	r9, r2
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	469a      	mov	sl, r3
 8006aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006abe:	d807      	bhi.n	8006ad0 <_printf_i+0x28>
 8006ac0:	2f62      	cmp	r7, #98	; 0x62
 8006ac2:	d80a      	bhi.n	8006ada <_printf_i+0x32>
 8006ac4:	2f00      	cmp	r7, #0
 8006ac6:	f000 80d8 	beq.w	8006c7a <_printf_i+0x1d2>
 8006aca:	2f58      	cmp	r7, #88	; 0x58
 8006acc:	f000 80a3 	beq.w	8006c16 <_printf_i+0x16e>
 8006ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad8:	e03a      	b.n	8006b50 <_printf_i+0xa8>
 8006ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ade:	2b15      	cmp	r3, #21
 8006ae0:	d8f6      	bhi.n	8006ad0 <_printf_i+0x28>
 8006ae2:	a101      	add	r1, pc, #4	; (adr r1, 8006ae8 <_printf_i+0x40>)
 8006ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae8:	08006b41 	.word	0x08006b41
 8006aec:	08006b55 	.word	0x08006b55
 8006af0:	08006ad1 	.word	0x08006ad1
 8006af4:	08006ad1 	.word	0x08006ad1
 8006af8:	08006ad1 	.word	0x08006ad1
 8006afc:	08006ad1 	.word	0x08006ad1
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006ad1 	.word	0x08006ad1
 8006b08:	08006ad1 	.word	0x08006ad1
 8006b0c:	08006ad1 	.word	0x08006ad1
 8006b10:	08006ad1 	.word	0x08006ad1
 8006b14:	08006c61 	.word	0x08006c61
 8006b18:	08006b85 	.word	0x08006b85
 8006b1c:	08006c43 	.word	0x08006c43
 8006b20:	08006ad1 	.word	0x08006ad1
 8006b24:	08006ad1 	.word	0x08006ad1
 8006b28:	08006c83 	.word	0x08006c83
 8006b2c:	08006ad1 	.word	0x08006ad1
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006ad1 	.word	0x08006ad1
 8006b38:	08006ad1 	.word	0x08006ad1
 8006b3c:	08006c4b 	.word	0x08006c4b
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0a3      	b.n	8006c9c <_printf_i+0x1f4>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	6829      	ldr	r1, [r5, #0]
 8006b58:	0606      	lsls	r6, r0, #24
 8006b5a:	f101 0304 	add.w	r3, r1, #4
 8006b5e:	d50a      	bpl.n	8006b76 <_printf_i+0xce>
 8006b60:	680e      	ldr	r6, [r1, #0]
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	2e00      	cmp	r6, #0
 8006b66:	da03      	bge.n	8006b70 <_printf_i+0xc8>
 8006b68:	232d      	movs	r3, #45	; 0x2d
 8006b6a:	4276      	negs	r6, r6
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b70:	485e      	ldr	r0, [pc, #376]	; (8006cec <_printf_i+0x244>)
 8006b72:	230a      	movs	r3, #10
 8006b74:	e019      	b.n	8006baa <_printf_i+0x102>
 8006b76:	680e      	ldr	r6, [r1, #0]
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b7e:	bf18      	it	ne
 8006b80:	b236      	sxthne	r6, r6
 8006b82:	e7ef      	b.n	8006b64 <_printf_i+0xbc>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	1d19      	adds	r1, r3, #4
 8006b8a:	6029      	str	r1, [r5, #0]
 8006b8c:	0601      	lsls	r1, r0, #24
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0xec>
 8006b90:	681e      	ldr	r6, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0xf2>
 8006b94:	0646      	lsls	r6, r0, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0xe8>
 8006b98:	881e      	ldrh	r6, [r3, #0]
 8006b9a:	4854      	ldr	r0, [pc, #336]	; (8006cec <_printf_i+0x244>)
 8006b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2308      	moveq	r3, #8
 8006ba2:	230a      	movne	r3, #10
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006baa:	6865      	ldr	r5, [r4, #4]
 8006bac:	60a5      	str	r5, [r4, #8]
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	bfa2      	ittt	ge
 8006bb2:	6821      	ldrge	r1, [r4, #0]
 8006bb4:	f021 0104 	bicge.w	r1, r1, #4
 8006bb8:	6021      	strge	r1, [r4, #0]
 8006bba:	b90e      	cbnz	r6, 8006bc0 <_printf_i+0x118>
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	d04d      	beq.n	8006c5c <_printf_i+0x1b4>
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8006bca:	5dc7      	ldrb	r7, [r0, r7]
 8006bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd0:	4637      	mov	r7, r6
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	460e      	mov	r6, r1
 8006bd6:	d9f4      	bls.n	8006bc2 <_printf_i+0x11a>
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d10b      	bne.n	8006bf4 <_printf_i+0x14c>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	07de      	lsls	r6, r3, #31
 8006be0:	d508      	bpl.n	8006bf4 <_printf_i+0x14c>
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	6861      	ldr	r1, [r4, #4]
 8006be6:	4299      	cmp	r1, r3
 8006be8:	bfde      	ittt	le
 8006bea:	2330      	movle	r3, #48	; 0x30
 8006bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bf4:	1b52      	subs	r2, r2, r5
 8006bf6:	6122      	str	r2, [r4, #16]
 8006bf8:	f8cd a000 	str.w	sl, [sp]
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	aa03      	add	r2, sp, #12
 8006c00:	4621      	mov	r1, r4
 8006c02:	4640      	mov	r0, r8
 8006c04:	f7ff fee2 	bl	80069cc <_printf_common>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d14c      	bne.n	8006ca6 <_printf_i+0x1fe>
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	b004      	add	sp, #16
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c16:	4835      	ldr	r0, [pc, #212]	; (8006cec <_printf_i+0x244>)
 8006c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c1c:	6829      	ldr	r1, [r5, #0]
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c24:	6029      	str	r1, [r5, #0]
 8006c26:	061d      	lsls	r5, r3, #24
 8006c28:	d514      	bpl.n	8006c54 <_printf_i+0x1ac>
 8006c2a:	07df      	lsls	r7, r3, #31
 8006c2c:	bf44      	itt	mi
 8006c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c32:	6023      	strmi	r3, [r4, #0]
 8006c34:	b91e      	cbnz	r6, 8006c3e <_printf_i+0x196>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f023 0320 	bic.w	r3, r3, #32
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	2310      	movs	r3, #16
 8006c40:	e7b0      	b.n	8006ba4 <_printf_i+0xfc>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	f043 0320 	orr.w	r3, r3, #32
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	2378      	movs	r3, #120	; 0x78
 8006c4c:	4828      	ldr	r0, [pc, #160]	; (8006cf0 <_printf_i+0x248>)
 8006c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c52:	e7e3      	b.n	8006c1c <_printf_i+0x174>
 8006c54:	0659      	lsls	r1, r3, #25
 8006c56:	bf48      	it	mi
 8006c58:	b2b6      	uxthmi	r6, r6
 8006c5a:	e7e6      	b.n	8006c2a <_printf_i+0x182>
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	e7bb      	b.n	8006bd8 <_printf_i+0x130>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	6826      	ldr	r6, [r4, #0]
 8006c64:	6961      	ldr	r1, [r4, #20]
 8006c66:	1d18      	adds	r0, r3, #4
 8006c68:	6028      	str	r0, [r5, #0]
 8006c6a:	0635      	lsls	r5, r6, #24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	d501      	bpl.n	8006c74 <_printf_i+0x1cc>
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	e002      	b.n	8006c7a <_printf_i+0x1d2>
 8006c74:	0670      	lsls	r0, r6, #25
 8006c76:	d5fb      	bpl.n	8006c70 <_printf_i+0x1c8>
 8006c78:	8019      	strh	r1, [r3, #0]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	4615      	mov	r5, r2
 8006c80:	e7ba      	b.n	8006bf8 <_printf_i+0x150>
 8006c82:	682b      	ldr	r3, [r5, #0]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	602a      	str	r2, [r5, #0]
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f7f9 fade 	bl	8000250 <memchr>
 8006c94:	b108      	cbz	r0, 8006c9a <_printf_i+0x1f2>
 8006c96:	1b40      	subs	r0, r0, r5
 8006c98:	6060      	str	r0, [r4, #4]
 8006c9a:	6863      	ldr	r3, [r4, #4]
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca4:	e7a8      	b.n	8006bf8 <_printf_i+0x150>
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	47d0      	blx	sl
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d0ab      	beq.n	8006c0c <_printf_i+0x164>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	079b      	lsls	r3, r3, #30
 8006cb8:	d413      	bmi.n	8006ce2 <_printf_i+0x23a>
 8006cba:	68e0      	ldr	r0, [r4, #12]
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	bfb8      	it	lt
 8006cc2:	4618      	movlt	r0, r3
 8006cc4:	e7a4      	b.n	8006c10 <_printf_i+0x168>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4640      	mov	r0, r8
 8006cce:	47d0      	blx	sl
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d09b      	beq.n	8006c0c <_printf_i+0x164>
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	9903      	ldr	r1, [sp, #12]
 8006cda:	1a5b      	subs	r3, r3, r1
 8006cdc:	42ab      	cmp	r3, r5
 8006cde:	dcf2      	bgt.n	8006cc6 <_printf_i+0x21e>
 8006ce0:	e7eb      	b.n	8006cba <_printf_i+0x212>
 8006ce2:	2500      	movs	r5, #0
 8006ce4:	f104 0619 	add.w	r6, r4, #25
 8006ce8:	e7f5      	b.n	8006cd6 <_printf_i+0x22e>
 8006cea:	bf00      	nop
 8006cec:	08008bea 	.word	0x08008bea
 8006cf0:	08008bfb 	.word	0x08008bfb

08006cf4 <cleanup_glue>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	6809      	ldr	r1, [r1, #0]
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b109      	cbz	r1, 8006d02 <cleanup_glue+0xe>
 8006cfe:	f7ff fff9 	bl	8006cf4 <cleanup_glue>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0a:	f001 bb55 	b.w	80083b8 <_free_r>
	...

08006d10 <_reclaim_reent>:
 8006d10:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <_reclaim_reent+0xb4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4283      	cmp	r3, r0
 8006d16:	b570      	push	{r4, r5, r6, lr}
 8006d18:	4604      	mov	r4, r0
 8006d1a:	d051      	beq.n	8006dc0 <_reclaim_reent+0xb0>
 8006d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d1e:	b143      	cbz	r3, 8006d32 <_reclaim_reent+0x22>
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d14a      	bne.n	8006dbc <_reclaim_reent+0xac>
 8006d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	b111      	cbz	r1, 8006d32 <_reclaim_reent+0x22>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f001 fb43 	bl	80083b8 <_free_r>
 8006d32:	6961      	ldr	r1, [r4, #20]
 8006d34:	b111      	cbz	r1, 8006d3c <_reclaim_reent+0x2c>
 8006d36:	4620      	mov	r0, r4
 8006d38:	f001 fb3e 	bl	80083b8 <_free_r>
 8006d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d3e:	b111      	cbz	r1, 8006d46 <_reclaim_reent+0x36>
 8006d40:	4620      	mov	r0, r4
 8006d42:	f001 fb39 	bl	80083b8 <_free_r>
 8006d46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d48:	b111      	cbz	r1, 8006d50 <_reclaim_reent+0x40>
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f001 fb34 	bl	80083b8 <_free_r>
 8006d50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d52:	b111      	cbz	r1, 8006d5a <_reclaim_reent+0x4a>
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 fb2f 	bl	80083b8 <_free_r>
 8006d5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d5c:	b111      	cbz	r1, 8006d64 <_reclaim_reent+0x54>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f001 fb2a 	bl	80083b8 <_free_r>
 8006d64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d66:	b111      	cbz	r1, 8006d6e <_reclaim_reent+0x5e>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f001 fb25 	bl	80083b8 <_free_r>
 8006d6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d70:	b111      	cbz	r1, 8006d78 <_reclaim_reent+0x68>
 8006d72:	4620      	mov	r0, r4
 8006d74:	f001 fb20 	bl	80083b8 <_free_r>
 8006d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d7a:	b111      	cbz	r1, 8006d82 <_reclaim_reent+0x72>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f001 fb1b 	bl	80083b8 <_free_r>
 8006d82:	69a3      	ldr	r3, [r4, #24]
 8006d84:	b1e3      	cbz	r3, 8006dc0 <_reclaim_reent+0xb0>
 8006d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4798      	blx	r3
 8006d8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d8e:	b1b9      	cbz	r1, 8006dc0 <_reclaim_reent+0xb0>
 8006d90:	4620      	mov	r0, r4
 8006d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d96:	f7ff bfad 	b.w	8006cf4 <cleanup_glue>
 8006d9a:	5949      	ldr	r1, [r1, r5]
 8006d9c:	b941      	cbnz	r1, 8006db0 <_reclaim_reent+0xa0>
 8006d9e:	3504      	adds	r5, #4
 8006da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da2:	2d80      	cmp	r5, #128	; 0x80
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	d1f8      	bne.n	8006d9a <_reclaim_reent+0x8a>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fb05 	bl	80083b8 <_free_r>
 8006dae:	e7ba      	b.n	8006d26 <_reclaim_reent+0x16>
 8006db0:	680e      	ldr	r6, [r1, #0]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f001 fb00 	bl	80083b8 <_free_r>
 8006db8:	4631      	mov	r1, r6
 8006dba:	e7ef      	b.n	8006d9c <_reclaim_reent+0x8c>
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	e7ef      	b.n	8006da0 <_reclaim_reent+0x90>
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000010 	.word	0x20000010

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fa fab6 	bl	8001344 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	2000440c 	.word	0x2000440c

08006de8 <__sread>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	460c      	mov	r4, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	f001 fb2e 	bl	8008450 <_read_r>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	bfab      	itete	ge
 8006df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dfc:	181b      	addge	r3, r3, r0
 8006dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e02:	bfac      	ite	ge
 8006e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e06:	81a3      	strhlt	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__swrite>:
 8006e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	461f      	mov	r7, r3
 8006e10:	898b      	ldrh	r3, [r1, #12]
 8006e12:	05db      	lsls	r3, r3, #23
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4616      	mov	r6, r2
 8006e1a:	d505      	bpl.n	8006e28 <__swrite+0x1e>
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	2302      	movs	r3, #2
 8006e22:	2200      	movs	r2, #0
 8006e24:	f000 ff08 	bl	8007c38 <_lseek_r>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	4632      	mov	r2, r6
 8006e36:	463b      	mov	r3, r7
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3e:	f000 b817 	b.w	8006e70 <_write_r>

08006e42 <__sseek>:
 8006e42:	b510      	push	{r4, lr}
 8006e44:	460c      	mov	r4, r1
 8006e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4a:	f000 fef5 	bl	8007c38 <_lseek_r>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	bf15      	itete	ne
 8006e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e5e:	81a3      	strheq	r3, [r4, #12]
 8006e60:	bf18      	it	ne
 8006e62:	81a3      	strhne	r3, [r4, #12]
 8006e64:	bd10      	pop	{r4, pc}

08006e66 <__sclose>:
 8006e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6a:	f000 b813 	b.w	8006e94 <_close_r>
	...

08006e70 <_write_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	; (8006e90 <_write_r+0x20>)
 8006e74:	4604      	mov	r4, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	4611      	mov	r1, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7fa fa0f 	bl	80012a2 <_write>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_write_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_write_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	2000440c 	.word	0x2000440c

08006e94 <_close_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	; (8006eb0 <_close_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fa fa1b 	bl	80012da <_close>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_close_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_close_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	2000440c 	.word	0x2000440c

08006eb4 <quorem>:
 8006eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	6903      	ldr	r3, [r0, #16]
 8006eba:	690c      	ldr	r4, [r1, #16]
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	f2c0 8081 	blt.w	8006fc6 <quorem+0x112>
 8006ec4:	3c01      	subs	r4, #1
 8006ec6:	f101 0814 	add.w	r8, r1, #20
 8006eca:	f100 0514 	add.w	r5, r0, #20
 8006ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006edc:	3301      	adds	r3, #1
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ee4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eec:	d331      	bcc.n	8006f52 <quorem+0x9e>
 8006eee:	f04f 0e00 	mov.w	lr, #0
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	46ac      	mov	ip, r5
 8006ef6:	46f2      	mov	sl, lr
 8006ef8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006efc:	b293      	uxth	r3, r2
 8006efe:	fb06 e303 	mla	r3, r6, r3, lr
 8006f02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ebaa 0303 	sub.w	r3, sl, r3
 8006f0c:	f8dc a000 	ldr.w	sl, [ip]
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	fa13 f38a 	uxtah	r3, r3, sl
 8006f16:	fb06 e202 	mla	r2, r6, r2, lr
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f22:	b292      	uxth	r2, r2
 8006f24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f30:	4581      	cmp	r9, r0
 8006f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f36:	f84c 3b04 	str.w	r3, [ip], #4
 8006f3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f3e:	d2db      	bcs.n	8006ef8 <quorem+0x44>
 8006f40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f44:	b92b      	cbnz	r3, 8006f52 <quorem+0x9e>
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	429d      	cmp	r5, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	d32e      	bcc.n	8006fae <quorem+0xfa>
 8006f50:	613c      	str	r4, [r7, #16]
 8006f52:	4638      	mov	r0, r7
 8006f54:	f001 f918 	bl	8008188 <__mcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	db24      	blt.n	8006fa6 <quorem+0xf2>
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f04f 0c00 	mov.w	ip, #0
 8006f64:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f68:	f8d0 e000 	ldr.w	lr, [r0]
 8006f6c:	b293      	uxth	r3, r2
 8006f6e:	ebac 0303 	sub.w	r3, ip, r3
 8006f72:	0c12      	lsrs	r2, r2, #16
 8006f74:	fa13 f38e 	uxtah	r3, r3, lr
 8006f78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f86:	45c1      	cmp	r9, r8
 8006f88:	f840 3b04 	str.w	r3, [r0], #4
 8006f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f90:	d2e8      	bcs.n	8006f64 <quorem+0xb0>
 8006f92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f9a:	b922      	cbnz	r2, 8006fa6 <quorem+0xf2>
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	d30a      	bcc.n	8006fba <quorem+0x106>
 8006fa4:	613c      	str	r4, [r7, #16]
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	b003      	add	sp, #12
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	d1cc      	bne.n	8006f50 <quorem+0x9c>
 8006fb6:	3c01      	subs	r4, #1
 8006fb8:	e7c7      	b.n	8006f4a <quorem+0x96>
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <quorem+0xf0>
 8006fc2:	3c01      	subs	r4, #1
 8006fc4:	e7eb      	b.n	8006f9e <quorem+0xea>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e7ee      	b.n	8006fa8 <quorem+0xf4>
 8006fca:	0000      	movs	r0, r0
 8006fcc:	0000      	movs	r0, r0
	...

08006fd0 <_dtoa_r>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ed2d 8b02 	vpush	{d8}
 8006fd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fda:	b091      	sub	sp, #68	; 0x44
 8006fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fe0:	ec59 8b10 	vmov	r8, r9, d0
 8006fe4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006fe6:	9106      	str	r1, [sp, #24]
 8006fe8:	4606      	mov	r6, r0
 8006fea:	9208      	str	r2, [sp, #32]
 8006fec:	930c      	str	r3, [sp, #48]	; 0x30
 8006fee:	b975      	cbnz	r5, 800700e <_dtoa_r+0x3e>
 8006ff0:	2010      	movs	r0, #16
 8006ff2:	f000 fe33 	bl	8007c5c <malloc>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8006ffa:	b920      	cbnz	r0, 8007006 <_dtoa_r+0x36>
 8006ffc:	4baa      	ldr	r3, [pc, #680]	; (80072a8 <_dtoa_r+0x2d8>)
 8006ffe:	21ea      	movs	r1, #234	; 0xea
 8007000:	48aa      	ldr	r0, [pc, #680]	; (80072ac <_dtoa_r+0x2dc>)
 8007002:	f001 fa37 	bl	8008474 <__assert_func>
 8007006:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800700a:	6005      	str	r5, [r0, #0]
 800700c:	60c5      	str	r5, [r0, #12]
 800700e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	b151      	cbz	r1, 800702a <_dtoa_r+0x5a>
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	604a      	str	r2, [r1, #4]
 8007018:	2301      	movs	r3, #1
 800701a:	4093      	lsls	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
 800701e:	4630      	mov	r0, r6
 8007020:	f000 fe70 	bl	8007d04 <_Bfree>
 8007024:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f1b9 0300 	subs.w	r3, r9, #0
 800702e:	bfbb      	ittet	lt
 8007030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007034:	9303      	strlt	r3, [sp, #12]
 8007036:	2300      	movge	r3, #0
 8007038:	2201      	movlt	r2, #1
 800703a:	bfac      	ite	ge
 800703c:	6023      	strge	r3, [r4, #0]
 800703e:	6022      	strlt	r2, [r4, #0]
 8007040:	4b9b      	ldr	r3, [pc, #620]	; (80072b0 <_dtoa_r+0x2e0>)
 8007042:	9c03      	ldr	r4, [sp, #12]
 8007044:	43a3      	bics	r3, r4
 8007046:	d11c      	bne.n	8007082 <_dtoa_r+0xb2>
 8007048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800704a:	f242 730f 	movw	r3, #9999	; 0x270f
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007054:	ea53 0308 	orrs.w	r3, r3, r8
 8007058:	f000 84fd 	beq.w	8007a56 <_dtoa_r+0xa86>
 800705c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800705e:	b963      	cbnz	r3, 800707a <_dtoa_r+0xaa>
 8007060:	4b94      	ldr	r3, [pc, #592]	; (80072b4 <_dtoa_r+0x2e4>)
 8007062:	e01f      	b.n	80070a4 <_dtoa_r+0xd4>
 8007064:	4b94      	ldr	r3, [pc, #592]	; (80072b8 <_dtoa_r+0x2e8>)
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	3308      	adds	r3, #8
 800706a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	9801      	ldr	r0, [sp, #4]
 8007070:	b011      	add	sp, #68	; 0x44
 8007072:	ecbd 8b02 	vpop	{d8}
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	4b8e      	ldr	r3, [pc, #568]	; (80072b4 <_dtoa_r+0x2e4>)
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	3303      	adds	r3, #3
 8007080:	e7f3      	b.n	800706a <_dtoa_r+0x9a>
 8007082:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007086:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	d10b      	bne.n	80070a8 <_dtoa_r+0xd8>
 8007090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007092:	2301      	movs	r3, #1
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 84d9 	beq.w	8007a50 <_dtoa_r+0xa80>
 800709e:	4887      	ldr	r0, [pc, #540]	; (80072bc <_dtoa_r+0x2ec>)
 80070a0:	6018      	str	r0, [r3, #0]
 80070a2:	1e43      	subs	r3, r0, #1
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	e7e2      	b.n	800706e <_dtoa_r+0x9e>
 80070a8:	a90f      	add	r1, sp, #60	; 0x3c
 80070aa:	aa0e      	add	r2, sp, #56	; 0x38
 80070ac:	4630      	mov	r0, r6
 80070ae:	eeb0 0b48 	vmov.f64	d0, d8
 80070b2:	f001 f90f 	bl	80082d4 <__d2b>
 80070b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80070ba:	4605      	mov	r5, r0
 80070bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070be:	2900      	cmp	r1, #0
 80070c0:	d046      	beq.n	8007150 <_dtoa_r+0x180>
 80070c2:	ee18 4a90 	vmov	r4, s17
 80070c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070ca:	ec53 2b18 	vmov	r2, r3, d8
 80070ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80070d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80070da:	2400      	movs	r4, #0
 80070dc:	ec43 2b16 	vmov	d6, r2, r3
 80070e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80070e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007290 <_dtoa_r+0x2c0>
 80070e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007298 <_dtoa_r+0x2c8>
 80070f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80070f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80072a0 <_dtoa_r+0x2d0>
 80070f8:	ee07 1a90 	vmov	s15, r1
 80070fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007100:	eeb0 7b46 	vmov.f64	d7, d6
 8007104:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007108:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800710c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007114:	ee16 ba90 	vmov	fp, s13
 8007118:	940a      	str	r4, [sp, #40]	; 0x28
 800711a:	d508      	bpl.n	800712e <_dtoa_r+0x15e>
 800711c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007120:	eeb4 6b47 	vcmp.f64	d6, d7
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	bf18      	it	ne
 800712a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800712e:	f1bb 0f16 	cmp.w	fp, #22
 8007132:	d82f      	bhi.n	8007194 <_dtoa_r+0x1c4>
 8007134:	4b62      	ldr	r3, [pc, #392]	; (80072c0 <_dtoa_r+0x2f0>)
 8007136:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800713a:	ed93 7b00 	vldr	d7, [r3]
 800713e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007146:	d501      	bpl.n	800714c <_dtoa_r+0x17c>
 8007148:	f10b 3bff 	add.w	fp, fp, #4294967295
 800714c:	2300      	movs	r3, #0
 800714e:	e022      	b.n	8007196 <_dtoa_r+0x1c6>
 8007150:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007152:	4401      	add	r1, r0
 8007154:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007158:	2b20      	cmp	r3, #32
 800715a:	bfc1      	itttt	gt
 800715c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007160:	fa04 f303 	lslgt.w	r3, r4, r3
 8007164:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007168:	fa28 f804 	lsrgt.w	r8, r8, r4
 800716c:	bfd6      	itet	le
 800716e:	f1c3 0320 	rsble	r3, r3, #32
 8007172:	ea43 0808 	orrgt.w	r8, r3, r8
 8007176:	fa08 f803 	lslle.w	r8, r8, r3
 800717a:	ee07 8a90 	vmov	s15, r8
 800717e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007182:	3901      	subs	r1, #1
 8007184:	ee17 4a90 	vmov	r4, s15
 8007188:	ec53 2b17 	vmov	r2, r3, d7
 800718c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007190:	2401      	movs	r4, #1
 8007192:	e7a3      	b.n	80070dc <_dtoa_r+0x10c>
 8007194:	2301      	movs	r3, #1
 8007196:	930b      	str	r3, [sp, #44]	; 0x2c
 8007198:	1a43      	subs	r3, r0, r1
 800719a:	1e5a      	subs	r2, r3, #1
 800719c:	bf45      	ittet	mi
 800719e:	f1c3 0301 	rsbmi	r3, r3, #1
 80071a2:	9304      	strmi	r3, [sp, #16]
 80071a4:	2300      	movpl	r3, #0
 80071a6:	2300      	movmi	r3, #0
 80071a8:	9205      	str	r2, [sp, #20]
 80071aa:	bf54      	ite	pl
 80071ac:	9304      	strpl	r3, [sp, #16]
 80071ae:	9305      	strmi	r3, [sp, #20]
 80071b0:	f1bb 0f00 	cmp.w	fp, #0
 80071b4:	db18      	blt.n	80071e8 <_dtoa_r+0x218>
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80071bc:	445b      	add	r3, fp
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	2300      	movs	r3, #0
 80071c2:	9a06      	ldr	r2, [sp, #24]
 80071c4:	2a09      	cmp	r2, #9
 80071c6:	d849      	bhi.n	800725c <_dtoa_r+0x28c>
 80071c8:	2a05      	cmp	r2, #5
 80071ca:	bfc4      	itt	gt
 80071cc:	3a04      	subgt	r2, #4
 80071ce:	9206      	strgt	r2, [sp, #24]
 80071d0:	9a06      	ldr	r2, [sp, #24]
 80071d2:	f1a2 0202 	sub.w	r2, r2, #2
 80071d6:	bfcc      	ite	gt
 80071d8:	2400      	movgt	r4, #0
 80071da:	2401      	movle	r4, #1
 80071dc:	2a03      	cmp	r2, #3
 80071de:	d848      	bhi.n	8007272 <_dtoa_r+0x2a2>
 80071e0:	e8df f002 	tbb	[pc, r2]
 80071e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80071e8:	9b04      	ldr	r3, [sp, #16]
 80071ea:	2200      	movs	r2, #0
 80071ec:	eba3 030b 	sub.w	r3, r3, fp
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	9209      	str	r2, [sp, #36]	; 0x24
 80071f4:	f1cb 0300 	rsb	r3, fp, #0
 80071f8:	e7e3      	b.n	80071c2 <_dtoa_r+0x1f2>
 80071fa:	2200      	movs	r2, #0
 80071fc:	9207      	str	r2, [sp, #28]
 80071fe:	9a08      	ldr	r2, [sp, #32]
 8007200:	2a00      	cmp	r2, #0
 8007202:	dc39      	bgt.n	8007278 <_dtoa_r+0x2a8>
 8007204:	f04f 0a01 	mov.w	sl, #1
 8007208:	46d1      	mov	r9, sl
 800720a:	4652      	mov	r2, sl
 800720c:	f8cd a020 	str.w	sl, [sp, #32]
 8007210:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007212:	2100      	movs	r1, #0
 8007214:	6079      	str	r1, [r7, #4]
 8007216:	2004      	movs	r0, #4
 8007218:	f100 0c14 	add.w	ip, r0, #20
 800721c:	4594      	cmp	ip, r2
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	d92f      	bls.n	8007282 <_dtoa_r+0x2b2>
 8007222:	4630      	mov	r0, r6
 8007224:	930d      	str	r3, [sp, #52]	; 0x34
 8007226:	f000 fd2d 	bl	8007c84 <_Balloc>
 800722a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800722c:	9001      	str	r0, [sp, #4]
 800722e:	4602      	mov	r2, r0
 8007230:	2800      	cmp	r0, #0
 8007232:	d149      	bne.n	80072c8 <_dtoa_r+0x2f8>
 8007234:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <_dtoa_r+0x2f4>)
 8007236:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800723a:	e6e1      	b.n	8007000 <_dtoa_r+0x30>
 800723c:	2201      	movs	r2, #1
 800723e:	e7dd      	b.n	80071fc <_dtoa_r+0x22c>
 8007240:	2200      	movs	r2, #0
 8007242:	9207      	str	r2, [sp, #28]
 8007244:	9a08      	ldr	r2, [sp, #32]
 8007246:	eb0b 0a02 	add.w	sl, fp, r2
 800724a:	f10a 0901 	add.w	r9, sl, #1
 800724e:	464a      	mov	r2, r9
 8007250:	2a01      	cmp	r2, #1
 8007252:	bfb8      	it	lt
 8007254:	2201      	movlt	r2, #1
 8007256:	e7db      	b.n	8007210 <_dtoa_r+0x240>
 8007258:	2201      	movs	r2, #1
 800725a:	e7f2      	b.n	8007242 <_dtoa_r+0x272>
 800725c:	2401      	movs	r4, #1
 800725e:	2200      	movs	r2, #0
 8007260:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007264:	f04f 3aff 	mov.w	sl, #4294967295
 8007268:	2100      	movs	r1, #0
 800726a:	46d1      	mov	r9, sl
 800726c:	2212      	movs	r2, #18
 800726e:	9108      	str	r1, [sp, #32]
 8007270:	e7ce      	b.n	8007210 <_dtoa_r+0x240>
 8007272:	2201      	movs	r2, #1
 8007274:	9207      	str	r2, [sp, #28]
 8007276:	e7f5      	b.n	8007264 <_dtoa_r+0x294>
 8007278:	f8dd a020 	ldr.w	sl, [sp, #32]
 800727c:	46d1      	mov	r9, sl
 800727e:	4652      	mov	r2, sl
 8007280:	e7c6      	b.n	8007210 <_dtoa_r+0x240>
 8007282:	3101      	adds	r1, #1
 8007284:	6079      	str	r1, [r7, #4]
 8007286:	0040      	lsls	r0, r0, #1
 8007288:	e7c6      	b.n	8007218 <_dtoa_r+0x248>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	08008c19 	.word	0x08008c19
 80072ac:	08008c30 	.word	0x08008c30
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	08008c15 	.word	0x08008c15
 80072b8:	08008c0c 	.word	0x08008c0c
 80072bc:	08008be9 	.word	0x08008be9
 80072c0:	08008d20 	.word	0x08008d20
 80072c4:	08008c8b 	.word	0x08008c8b
 80072c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80072ca:	9901      	ldr	r1, [sp, #4]
 80072cc:	6011      	str	r1, [r2, #0]
 80072ce:	f1b9 0f0e 	cmp.w	r9, #14
 80072d2:	d86c      	bhi.n	80073ae <_dtoa_r+0x3de>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d06a      	beq.n	80073ae <_dtoa_r+0x3de>
 80072d8:	f1bb 0f00 	cmp.w	fp, #0
 80072dc:	f340 80a0 	ble.w	8007420 <_dtoa_r+0x450>
 80072e0:	49c1      	ldr	r1, [pc, #772]	; (80075e8 <_dtoa_r+0x618>)
 80072e2:	f00b 020f 	and.w	r2, fp, #15
 80072e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80072ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072ee:	ed92 7b00 	vldr	d7, [r2]
 80072f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80072f6:	f000 8087 	beq.w	8007408 <_dtoa_r+0x438>
 80072fa:	4abc      	ldr	r2, [pc, #752]	; (80075ec <_dtoa_r+0x61c>)
 80072fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8007300:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007304:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007308:	f001 010f 	and.w	r1, r1, #15
 800730c:	2203      	movs	r2, #3
 800730e:	48b7      	ldr	r0, [pc, #732]	; (80075ec <_dtoa_r+0x61c>)
 8007310:	2900      	cmp	r1, #0
 8007312:	d17b      	bne.n	800740c <_dtoa_r+0x43c>
 8007314:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007318:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800731c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007322:	2900      	cmp	r1, #0
 8007324:	f000 80a2 	beq.w	800746c <_dtoa_r+0x49c>
 8007328:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800732c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007330:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007338:	f140 8098 	bpl.w	800746c <_dtoa_r+0x49c>
 800733c:	f1b9 0f00 	cmp.w	r9, #0
 8007340:	f000 8094 	beq.w	800746c <_dtoa_r+0x49c>
 8007344:	f1ba 0f00 	cmp.w	sl, #0
 8007348:	dd2f      	ble.n	80073aa <_dtoa_r+0x3da>
 800734a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800734e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007352:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007356:	f10b 37ff 	add.w	r7, fp, #4294967295
 800735a:	3201      	adds	r2, #1
 800735c:	4650      	mov	r0, sl
 800735e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007362:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007366:	ee07 2a90 	vmov	s15, r2
 800736a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800736e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007372:	ee15 4a90 	vmov	r4, s11
 8007376:	ec52 1b15 	vmov	r1, r2, d5
 800737a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800737e:	2800      	cmp	r0, #0
 8007380:	d177      	bne.n	8007472 <_dtoa_r+0x4a2>
 8007382:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007386:	ee36 6b47 	vsub.f64	d6, d6, d7
 800738a:	ec42 1b17 	vmov	d7, r1, r2
 800738e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	f300 8263 	bgt.w	8007860 <_dtoa_r+0x890>
 800739a:	eeb1 7b47 	vneg.f64	d7, d7
 800739e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a6:	f100 8258 	bmi.w	800785a <_dtoa_r+0x88a>
 80073aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	f2c0 811d 	blt.w	80075f0 <_dtoa_r+0x620>
 80073b6:	f1bb 0f0e 	cmp.w	fp, #14
 80073ba:	f300 8119 	bgt.w	80075f0 <_dtoa_r+0x620>
 80073be:	4b8a      	ldr	r3, [pc, #552]	; (80075e8 <_dtoa_r+0x618>)
 80073c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073c4:	ed93 6b00 	vldr	d6, [r3]
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f280 80b7 	bge.w	800753e <_dtoa_r+0x56e>
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	f300 80b3 	bgt.w	800753e <_dtoa_r+0x56e>
 80073d8:	f040 823f 	bne.w	800785a <_dtoa_r+0x88a>
 80073dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80073e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80073e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	464c      	mov	r4, r9
 80073f2:	464f      	mov	r7, r9
 80073f4:	f280 8215 	bge.w	8007822 <_dtoa_r+0x852>
 80073f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073fc:	2331      	movs	r3, #49	; 0x31
 80073fe:	f808 3b01 	strb.w	r3, [r8], #1
 8007402:	f10b 0b01 	add.w	fp, fp, #1
 8007406:	e211      	b.n	800782c <_dtoa_r+0x85c>
 8007408:	2202      	movs	r2, #2
 800740a:	e780      	b.n	800730e <_dtoa_r+0x33e>
 800740c:	07cc      	lsls	r4, r1, #31
 800740e:	d504      	bpl.n	800741a <_dtoa_r+0x44a>
 8007410:	ed90 6b00 	vldr	d6, [r0]
 8007414:	3201      	adds	r2, #1
 8007416:	ee27 7b06 	vmul.f64	d7, d7, d6
 800741a:	1049      	asrs	r1, r1, #1
 800741c:	3008      	adds	r0, #8
 800741e:	e777      	b.n	8007310 <_dtoa_r+0x340>
 8007420:	d022      	beq.n	8007468 <_dtoa_r+0x498>
 8007422:	f1cb 0100 	rsb	r1, fp, #0
 8007426:	4a70      	ldr	r2, [pc, #448]	; (80075e8 <_dtoa_r+0x618>)
 8007428:	f001 000f 	and.w	r0, r1, #15
 800742c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007430:	ed92 7b00 	vldr	d7, [r2]
 8007434:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007438:	ed8d 7b02 	vstr	d7, [sp, #8]
 800743c:	486b      	ldr	r0, [pc, #428]	; (80075ec <_dtoa_r+0x61c>)
 800743e:	1109      	asrs	r1, r1, #4
 8007440:	2400      	movs	r4, #0
 8007442:	2202      	movs	r2, #2
 8007444:	b929      	cbnz	r1, 8007452 <_dtoa_r+0x482>
 8007446:	2c00      	cmp	r4, #0
 8007448:	f43f af6a 	beq.w	8007320 <_dtoa_r+0x350>
 800744c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007450:	e766      	b.n	8007320 <_dtoa_r+0x350>
 8007452:	07cf      	lsls	r7, r1, #31
 8007454:	d505      	bpl.n	8007462 <_dtoa_r+0x492>
 8007456:	ed90 6b00 	vldr	d6, [r0]
 800745a:	3201      	adds	r2, #1
 800745c:	2401      	movs	r4, #1
 800745e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007462:	1049      	asrs	r1, r1, #1
 8007464:	3008      	adds	r0, #8
 8007466:	e7ed      	b.n	8007444 <_dtoa_r+0x474>
 8007468:	2202      	movs	r2, #2
 800746a:	e759      	b.n	8007320 <_dtoa_r+0x350>
 800746c:	465f      	mov	r7, fp
 800746e:	4648      	mov	r0, r9
 8007470:	e775      	b.n	800735e <_dtoa_r+0x38e>
 8007472:	ec42 1b17 	vmov	d7, r1, r2
 8007476:	4a5c      	ldr	r2, [pc, #368]	; (80075e8 <_dtoa_r+0x618>)
 8007478:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800747c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007480:	9a01      	ldr	r2, [sp, #4]
 8007482:	1814      	adds	r4, r2, r0
 8007484:	9a07      	ldr	r2, [sp, #28]
 8007486:	b352      	cbz	r2, 80074de <_dtoa_r+0x50e>
 8007488:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800748c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007490:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007494:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007498:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800749c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074a4:	ee14 2a90 	vmov	r2, s9
 80074a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074ac:	3230      	adds	r2, #48	; 0x30
 80074ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	f808 2b01 	strb.w	r2, [r8], #1
 80074be:	d439      	bmi.n	8007534 <_dtoa_r+0x564>
 80074c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80074c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d472      	bmi.n	80075b4 <_dtoa_r+0x5e4>
 80074ce:	45a0      	cmp	r8, r4
 80074d0:	f43f af6b 	beq.w	80073aa <_dtoa_r+0x3da>
 80074d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80074d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074dc:	e7e0      	b.n	80074a0 <_dtoa_r+0x4d0>
 80074de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80074e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074e6:	4621      	mov	r1, r4
 80074e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80074ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074f0:	ee14 2a90 	vmov	r2, s9
 80074f4:	3230      	adds	r2, #48	; 0x30
 80074f6:	f808 2b01 	strb.w	r2, [r8], #1
 80074fa:	45a0      	cmp	r8, r4
 80074fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007500:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007504:	d118      	bne.n	8007538 <_dtoa_r+0x568>
 8007506:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800750a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800750e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007516:	dc4d      	bgt.n	80075b4 <_dtoa_r+0x5e4>
 8007518:	ee35 7b47 	vsub.f64	d7, d5, d7
 800751c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007524:	f57f af41 	bpl.w	80073aa <_dtoa_r+0x3da>
 8007528:	4688      	mov	r8, r1
 800752a:	3901      	subs	r1, #1
 800752c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007530:	2b30      	cmp	r3, #48	; 0x30
 8007532:	d0f9      	beq.n	8007528 <_dtoa_r+0x558>
 8007534:	46bb      	mov	fp, r7
 8007536:	e02a      	b.n	800758e <_dtoa_r+0x5be>
 8007538:	ee26 6b03 	vmul.f64	d6, d6, d3
 800753c:	e7d6      	b.n	80074ec <_dtoa_r+0x51c>
 800753e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007542:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007546:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800754a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800754e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007552:	ee15 3a10 	vmov	r3, s10
 8007556:	3330      	adds	r3, #48	; 0x30
 8007558:	f808 3b01 	strb.w	r3, [r8], #1
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	eba8 0303 	sub.w	r3, r8, r3
 8007562:	4599      	cmp	r9, r3
 8007564:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007568:	eea3 7b46 	vfms.f64	d7, d3, d6
 800756c:	d133      	bne.n	80075d6 <_dtoa_r+0x606>
 800756e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007572:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757a:	dc1a      	bgt.n	80075b2 <_dtoa_r+0x5e2>
 800757c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007584:	d103      	bne.n	800758e <_dtoa_r+0x5be>
 8007586:	ee15 3a10 	vmov	r3, s10
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	d411      	bmi.n	80075b2 <_dtoa_r+0x5e2>
 800758e:	4629      	mov	r1, r5
 8007590:	4630      	mov	r0, r6
 8007592:	f000 fbb7 	bl	8007d04 <_Bfree>
 8007596:	2300      	movs	r3, #0
 8007598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800759a:	f888 3000 	strb.w	r3, [r8]
 800759e:	f10b 0301 	add.w	r3, fp, #1
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f43f ad61 	beq.w	800706e <_dtoa_r+0x9e>
 80075ac:	f8c3 8000 	str.w	r8, [r3]
 80075b0:	e55d      	b.n	800706e <_dtoa_r+0x9e>
 80075b2:	465f      	mov	r7, fp
 80075b4:	4643      	mov	r3, r8
 80075b6:	4698      	mov	r8, r3
 80075b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075bc:	2a39      	cmp	r2, #57	; 0x39
 80075be:	d106      	bne.n	80075ce <_dtoa_r+0x5fe>
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d1f7      	bne.n	80075b6 <_dtoa_r+0x5e6>
 80075c6:	9901      	ldr	r1, [sp, #4]
 80075c8:	2230      	movs	r2, #48	; 0x30
 80075ca:	3701      	adds	r7, #1
 80075cc:	700a      	strb	r2, [r1, #0]
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	3201      	adds	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e7ae      	b.n	8007534 <_dtoa_r+0x564>
 80075d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	d1b2      	bne.n	800754a <_dtoa_r+0x57a>
 80075e4:	e7d3      	b.n	800758e <_dtoa_r+0x5be>
 80075e6:	bf00      	nop
 80075e8:	08008d20 	.word	0x08008d20
 80075ec:	08008cf8 	.word	0x08008cf8
 80075f0:	9907      	ldr	r1, [sp, #28]
 80075f2:	2900      	cmp	r1, #0
 80075f4:	f000 80d0 	beq.w	8007798 <_dtoa_r+0x7c8>
 80075f8:	9906      	ldr	r1, [sp, #24]
 80075fa:	2901      	cmp	r1, #1
 80075fc:	f300 80b4 	bgt.w	8007768 <_dtoa_r+0x798>
 8007600:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007602:	2900      	cmp	r1, #0
 8007604:	f000 80ac 	beq.w	8007760 <_dtoa_r+0x790>
 8007608:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800760c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007610:	461c      	mov	r4, r3
 8007612:	930a      	str	r3, [sp, #40]	; 0x28
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	4413      	add	r3, r2
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	2101      	movs	r1, #1
 800761e:	4413      	add	r3, r2
 8007620:	4630      	mov	r0, r6
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	f000 fc26 	bl	8007e74 <__i2b>
 8007628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762a:	4607      	mov	r7, r0
 800762c:	f1b8 0f00 	cmp.w	r8, #0
 8007630:	dd0d      	ble.n	800764e <_dtoa_r+0x67e>
 8007632:	9a05      	ldr	r2, [sp, #20]
 8007634:	2a00      	cmp	r2, #0
 8007636:	dd0a      	ble.n	800764e <_dtoa_r+0x67e>
 8007638:	4542      	cmp	r2, r8
 800763a:	9904      	ldr	r1, [sp, #16]
 800763c:	bfa8      	it	ge
 800763e:	4642      	movge	r2, r8
 8007640:	1a89      	subs	r1, r1, r2
 8007642:	9104      	str	r1, [sp, #16]
 8007644:	9905      	ldr	r1, [sp, #20]
 8007646:	eba8 0802 	sub.w	r8, r8, r2
 800764a:	1a8a      	subs	r2, r1, r2
 800764c:	9205      	str	r2, [sp, #20]
 800764e:	b303      	cbz	r3, 8007692 <_dtoa_r+0x6c2>
 8007650:	9a07      	ldr	r2, [sp, #28]
 8007652:	2a00      	cmp	r2, #0
 8007654:	f000 80a5 	beq.w	80077a2 <_dtoa_r+0x7d2>
 8007658:	2c00      	cmp	r4, #0
 800765a:	dd13      	ble.n	8007684 <_dtoa_r+0x6b4>
 800765c:	4639      	mov	r1, r7
 800765e:	4622      	mov	r2, r4
 8007660:	4630      	mov	r0, r6
 8007662:	930d      	str	r3, [sp, #52]	; 0x34
 8007664:	f000 fcc6 	bl	8007ff4 <__pow5mult>
 8007668:	462a      	mov	r2, r5
 800766a:	4601      	mov	r1, r0
 800766c:	4607      	mov	r7, r0
 800766e:	4630      	mov	r0, r6
 8007670:	f000 fc16 	bl	8007ea0 <__multiply>
 8007674:	4629      	mov	r1, r5
 8007676:	900a      	str	r0, [sp, #40]	; 0x28
 8007678:	4630      	mov	r0, r6
 800767a:	f000 fb43 	bl	8007d04 <_Bfree>
 800767e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007682:	4615      	mov	r5, r2
 8007684:	1b1a      	subs	r2, r3, r4
 8007686:	d004      	beq.n	8007692 <_dtoa_r+0x6c2>
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f000 fcb2 	bl	8007ff4 <__pow5mult>
 8007690:	4605      	mov	r5, r0
 8007692:	2101      	movs	r1, #1
 8007694:	4630      	mov	r0, r6
 8007696:	f000 fbed 	bl	8007e74 <__i2b>
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	f340 8081 	ble.w	80077a6 <_dtoa_r+0x7d6>
 80076a4:	461a      	mov	r2, r3
 80076a6:	4601      	mov	r1, r0
 80076a8:	4630      	mov	r0, r6
 80076aa:	f000 fca3 	bl	8007ff4 <__pow5mult>
 80076ae:	9b06      	ldr	r3, [sp, #24]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	4604      	mov	r4, r0
 80076b4:	dd7a      	ble.n	80077ac <_dtoa_r+0x7dc>
 80076b6:	2300      	movs	r3, #0
 80076b8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ba:	6922      	ldr	r2, [r4, #16]
 80076bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80076c0:	6910      	ldr	r0, [r2, #16]
 80076c2:	f000 fb87 	bl	8007dd4 <__hi0bits>
 80076c6:	f1c0 0020 	rsb	r0, r0, #32
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	4418      	add	r0, r3
 80076ce:	f010 001f 	ands.w	r0, r0, #31
 80076d2:	f000 808c 	beq.w	80077ee <_dtoa_r+0x81e>
 80076d6:	f1c0 0220 	rsb	r2, r0, #32
 80076da:	2a04      	cmp	r2, #4
 80076dc:	f340 8085 	ble.w	80077ea <_dtoa_r+0x81a>
 80076e0:	f1c0 001c 	rsb	r0, r0, #28
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	4403      	add	r3, r0
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	9b05      	ldr	r3, [sp, #20]
 80076ec:	4403      	add	r3, r0
 80076ee:	4480      	add	r8, r0
 80076f0:	9305      	str	r3, [sp, #20]
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd05      	ble.n	8007704 <_dtoa_r+0x734>
 80076f8:	4629      	mov	r1, r5
 80076fa:	461a      	mov	r2, r3
 80076fc:	4630      	mov	r0, r6
 80076fe:	f000 fcd3 	bl	80080a8 <__lshift>
 8007702:	4605      	mov	r5, r0
 8007704:	9b05      	ldr	r3, [sp, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd05      	ble.n	8007716 <_dtoa_r+0x746>
 800770a:	4621      	mov	r1, r4
 800770c:	461a      	mov	r2, r3
 800770e:	4630      	mov	r0, r6
 8007710:	f000 fcca 	bl	80080a8 <__lshift>
 8007714:	4604      	mov	r4, r0
 8007716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d06a      	beq.n	80077f2 <_dtoa_r+0x822>
 800771c:	4621      	mov	r1, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f000 fd32 	bl	8008188 <__mcmp>
 8007724:	2800      	cmp	r0, #0
 8007726:	da64      	bge.n	80077f2 <_dtoa_r+0x822>
 8007728:	2300      	movs	r3, #0
 800772a:	4629      	mov	r1, r5
 800772c:	220a      	movs	r2, #10
 800772e:	4630      	mov	r0, r6
 8007730:	f000 fb0a 	bl	8007d48 <__multadd>
 8007734:	9b07      	ldr	r3, [sp, #28]
 8007736:	f10b 3bff 	add.w	fp, fp, #4294967295
 800773a:	4605      	mov	r5, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8191 	beq.w	8007a64 <_dtoa_r+0xa94>
 8007742:	4639      	mov	r1, r7
 8007744:	2300      	movs	r3, #0
 8007746:	220a      	movs	r2, #10
 8007748:	4630      	mov	r0, r6
 800774a:	f000 fafd 	bl	8007d48 <__multadd>
 800774e:	f1ba 0f00 	cmp.w	sl, #0
 8007752:	4607      	mov	r7, r0
 8007754:	f300 808d 	bgt.w	8007872 <_dtoa_r+0x8a2>
 8007758:	9b06      	ldr	r3, [sp, #24]
 800775a:	2b02      	cmp	r3, #2
 800775c:	dc50      	bgt.n	8007800 <_dtoa_r+0x830>
 800775e:	e088      	b.n	8007872 <_dtoa_r+0x8a2>
 8007760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007762:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007766:	e751      	b.n	800760c <_dtoa_r+0x63c>
 8007768:	f109 34ff 	add.w	r4, r9, #4294967295
 800776c:	42a3      	cmp	r3, r4
 800776e:	bfbf      	itttt	lt
 8007770:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007772:	1ae3      	sublt	r3, r4, r3
 8007774:	18d2      	addlt	r2, r2, r3
 8007776:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007778:	bfb6      	itet	lt
 800777a:	4623      	movlt	r3, r4
 800777c:	1b1c      	subge	r4, r3, r4
 800777e:	2400      	movlt	r4, #0
 8007780:	f1b9 0f00 	cmp.w	r9, #0
 8007784:	bfb5      	itete	lt
 8007786:	9a04      	ldrlt	r2, [sp, #16]
 8007788:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800778c:	eba2 0809 	sublt.w	r8, r2, r9
 8007790:	464a      	movge	r2, r9
 8007792:	bfb8      	it	lt
 8007794:	2200      	movlt	r2, #0
 8007796:	e73c      	b.n	8007612 <_dtoa_r+0x642>
 8007798:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800779c:	9f07      	ldr	r7, [sp, #28]
 800779e:	461c      	mov	r4, r3
 80077a0:	e744      	b.n	800762c <_dtoa_r+0x65c>
 80077a2:	461a      	mov	r2, r3
 80077a4:	e770      	b.n	8007688 <_dtoa_r+0x6b8>
 80077a6:	9b06      	ldr	r3, [sp, #24]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	dc18      	bgt.n	80077de <_dtoa_r+0x80e>
 80077ac:	9b02      	ldr	r3, [sp, #8]
 80077ae:	b9b3      	cbnz	r3, 80077de <_dtoa_r+0x80e>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80077b6:	b9a2      	cbnz	r2, 80077e2 <_dtoa_r+0x812>
 80077b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077bc:	0d12      	lsrs	r2, r2, #20
 80077be:	0512      	lsls	r2, r2, #20
 80077c0:	b18a      	cbz	r2, 80077e6 <_dtoa_r+0x816>
 80077c2:	9b04      	ldr	r3, [sp, #16]
 80077c4:	3301      	adds	r3, #1
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	9b05      	ldr	r3, [sp, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	2301      	movs	r3, #1
 80077d0:	930a      	str	r3, [sp, #40]	; 0x28
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f47f af70 	bne.w	80076ba <_dtoa_r+0x6ea>
 80077da:	2001      	movs	r0, #1
 80077dc:	e775      	b.n	80076ca <_dtoa_r+0x6fa>
 80077de:	2300      	movs	r3, #0
 80077e0:	e7f6      	b.n	80077d0 <_dtoa_r+0x800>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	e7f4      	b.n	80077d0 <_dtoa_r+0x800>
 80077e6:	920a      	str	r2, [sp, #40]	; 0x28
 80077e8:	e7f3      	b.n	80077d2 <_dtoa_r+0x802>
 80077ea:	d082      	beq.n	80076f2 <_dtoa_r+0x722>
 80077ec:	4610      	mov	r0, r2
 80077ee:	301c      	adds	r0, #28
 80077f0:	e778      	b.n	80076e4 <_dtoa_r+0x714>
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	dc37      	bgt.n	8007868 <_dtoa_r+0x898>
 80077f8:	9b06      	ldr	r3, [sp, #24]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	dd34      	ble.n	8007868 <_dtoa_r+0x898>
 80077fe:	46ca      	mov	sl, r9
 8007800:	f1ba 0f00 	cmp.w	sl, #0
 8007804:	d10d      	bne.n	8007822 <_dtoa_r+0x852>
 8007806:	4621      	mov	r1, r4
 8007808:	4653      	mov	r3, sl
 800780a:	2205      	movs	r2, #5
 800780c:	4630      	mov	r0, r6
 800780e:	f000 fa9b 	bl	8007d48 <__multadd>
 8007812:	4601      	mov	r1, r0
 8007814:	4604      	mov	r4, r0
 8007816:	4628      	mov	r0, r5
 8007818:	f000 fcb6 	bl	8008188 <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	f73f adeb 	bgt.w	80073f8 <_dtoa_r+0x428>
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007828:	ea6f 0b03 	mvn.w	fp, r3
 800782c:	f04f 0900 	mov.w	r9, #0
 8007830:	4621      	mov	r1, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f000 fa66 	bl	8007d04 <_Bfree>
 8007838:	2f00      	cmp	r7, #0
 800783a:	f43f aea8 	beq.w	800758e <_dtoa_r+0x5be>
 800783e:	f1b9 0f00 	cmp.w	r9, #0
 8007842:	d005      	beq.n	8007850 <_dtoa_r+0x880>
 8007844:	45b9      	cmp	r9, r7
 8007846:	d003      	beq.n	8007850 <_dtoa_r+0x880>
 8007848:	4649      	mov	r1, r9
 800784a:	4630      	mov	r0, r6
 800784c:	f000 fa5a 	bl	8007d04 <_Bfree>
 8007850:	4639      	mov	r1, r7
 8007852:	4630      	mov	r0, r6
 8007854:	f000 fa56 	bl	8007d04 <_Bfree>
 8007858:	e699      	b.n	800758e <_dtoa_r+0x5be>
 800785a:	2400      	movs	r4, #0
 800785c:	4627      	mov	r7, r4
 800785e:	e7e0      	b.n	8007822 <_dtoa_r+0x852>
 8007860:	46bb      	mov	fp, r7
 8007862:	4604      	mov	r4, r0
 8007864:	4607      	mov	r7, r0
 8007866:	e5c7      	b.n	80073f8 <_dtoa_r+0x428>
 8007868:	9b07      	ldr	r3, [sp, #28]
 800786a:	46ca      	mov	sl, r9
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8100 	beq.w	8007a72 <_dtoa_r+0xaa2>
 8007872:	f1b8 0f00 	cmp.w	r8, #0
 8007876:	dd05      	ble.n	8007884 <_dtoa_r+0x8b4>
 8007878:	4639      	mov	r1, r7
 800787a:	4642      	mov	r2, r8
 800787c:	4630      	mov	r0, r6
 800787e:	f000 fc13 	bl	80080a8 <__lshift>
 8007882:	4607      	mov	r7, r0
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d05d      	beq.n	8007946 <_dtoa_r+0x976>
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4630      	mov	r0, r6
 800788e:	f000 f9f9 	bl	8007c84 <_Balloc>
 8007892:	4680      	mov	r8, r0
 8007894:	b928      	cbnz	r0, 80078a2 <_dtoa_r+0x8d2>
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <_dtoa_r+0xad0>)
 8007898:	4602      	mov	r2, r0
 800789a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800789e:	f7ff bbaf 	b.w	8007000 <_dtoa_r+0x30>
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	3202      	adds	r2, #2
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	f107 010c 	add.w	r1, r7, #12
 80078ac:	300c      	adds	r0, #12
 80078ae:	f7fe fd34 	bl	800631a <memcpy>
 80078b2:	2201      	movs	r2, #1
 80078b4:	4641      	mov	r1, r8
 80078b6:	4630      	mov	r0, r6
 80078b8:	f000 fbf6 	bl	80080a8 <__lshift>
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	3301      	adds	r3, #1
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	4453      	add	r3, sl
 80078c6:	9308      	str	r3, [sp, #32]
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	46b9      	mov	r9, r7
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	4607      	mov	r7, r0
 80078d4:	9b04      	ldr	r3, [sp, #16]
 80078d6:	4621      	mov	r1, r4
 80078d8:	3b01      	subs	r3, #1
 80078da:	4628      	mov	r0, r5
 80078dc:	9302      	str	r3, [sp, #8]
 80078de:	f7ff fae9 	bl	8006eb4 <quorem>
 80078e2:	4603      	mov	r3, r0
 80078e4:	3330      	adds	r3, #48	; 0x30
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	4649      	mov	r1, r9
 80078ea:	4628      	mov	r0, r5
 80078ec:	9309      	str	r3, [sp, #36]	; 0x24
 80078ee:	f000 fc4b 	bl	8008188 <__mcmp>
 80078f2:	463a      	mov	r2, r7
 80078f4:	4682      	mov	sl, r0
 80078f6:	4621      	mov	r1, r4
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 fc61 	bl	80081c0 <__mdiff>
 80078fe:	68c2      	ldr	r2, [r0, #12]
 8007900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007902:	4680      	mov	r8, r0
 8007904:	bb0a      	cbnz	r2, 800794a <_dtoa_r+0x97a>
 8007906:	4601      	mov	r1, r0
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fc3d 	bl	8008188 <__mcmp>
 800790e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007910:	4602      	mov	r2, r0
 8007912:	4641      	mov	r1, r8
 8007914:	4630      	mov	r0, r6
 8007916:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800791a:	f000 f9f3 	bl	8007d04 <_Bfree>
 800791e:	9b06      	ldr	r3, [sp, #24]
 8007920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007922:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007926:	ea43 0102 	orr.w	r1, r3, r2
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	430b      	orrs	r3, r1
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	d10d      	bne.n	800794e <_dtoa_r+0x97e>
 8007932:	2b39      	cmp	r3, #57	; 0x39
 8007934:	d029      	beq.n	800798a <_dtoa_r+0x9ba>
 8007936:	f1ba 0f00 	cmp.w	sl, #0
 800793a:	dd01      	ble.n	8007940 <_dtoa_r+0x970>
 800793c:	9b05      	ldr	r3, [sp, #20]
 800793e:	3331      	adds	r3, #49	; 0x31
 8007940:	9a02      	ldr	r2, [sp, #8]
 8007942:	7013      	strb	r3, [r2, #0]
 8007944:	e774      	b.n	8007830 <_dtoa_r+0x860>
 8007946:	4638      	mov	r0, r7
 8007948:	e7b8      	b.n	80078bc <_dtoa_r+0x8ec>
 800794a:	2201      	movs	r2, #1
 800794c:	e7e1      	b.n	8007912 <_dtoa_r+0x942>
 800794e:	f1ba 0f00 	cmp.w	sl, #0
 8007952:	db06      	blt.n	8007962 <_dtoa_r+0x992>
 8007954:	9906      	ldr	r1, [sp, #24]
 8007956:	ea41 0a0a 	orr.w	sl, r1, sl
 800795a:	9907      	ldr	r1, [sp, #28]
 800795c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007960:	d120      	bne.n	80079a4 <_dtoa_r+0x9d4>
 8007962:	2a00      	cmp	r2, #0
 8007964:	ddec      	ble.n	8007940 <_dtoa_r+0x970>
 8007966:	4629      	mov	r1, r5
 8007968:	2201      	movs	r2, #1
 800796a:	4630      	mov	r0, r6
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	f000 fb9b 	bl	80080a8 <__lshift>
 8007972:	4621      	mov	r1, r4
 8007974:	4605      	mov	r5, r0
 8007976:	f000 fc07 	bl	8008188 <__mcmp>
 800797a:	2800      	cmp	r0, #0
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	dc02      	bgt.n	8007986 <_dtoa_r+0x9b6>
 8007980:	d1de      	bne.n	8007940 <_dtoa_r+0x970>
 8007982:	07da      	lsls	r2, r3, #31
 8007984:	d5dc      	bpl.n	8007940 <_dtoa_r+0x970>
 8007986:	2b39      	cmp	r3, #57	; 0x39
 8007988:	d1d8      	bne.n	800793c <_dtoa_r+0x96c>
 800798a:	9a02      	ldr	r2, [sp, #8]
 800798c:	2339      	movs	r3, #57	; 0x39
 800798e:	7013      	strb	r3, [r2, #0]
 8007990:	4643      	mov	r3, r8
 8007992:	4698      	mov	r8, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800799a:	2a39      	cmp	r2, #57	; 0x39
 800799c:	d051      	beq.n	8007a42 <_dtoa_r+0xa72>
 800799e:	3201      	adds	r2, #1
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	e745      	b.n	8007830 <_dtoa_r+0x860>
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	dd03      	ble.n	80079b0 <_dtoa_r+0x9e0>
 80079a8:	2b39      	cmp	r3, #57	; 0x39
 80079aa:	d0ee      	beq.n	800798a <_dtoa_r+0x9ba>
 80079ac:	3301      	adds	r3, #1
 80079ae:	e7c7      	b.n	8007940 <_dtoa_r+0x970>
 80079b0:	9a04      	ldr	r2, [sp, #16]
 80079b2:	9908      	ldr	r1, [sp, #32]
 80079b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079b8:	428a      	cmp	r2, r1
 80079ba:	d02b      	beq.n	8007a14 <_dtoa_r+0xa44>
 80079bc:	4629      	mov	r1, r5
 80079be:	2300      	movs	r3, #0
 80079c0:	220a      	movs	r2, #10
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f9c0 	bl	8007d48 <__multadd>
 80079c8:	45b9      	cmp	r9, r7
 80079ca:	4605      	mov	r5, r0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	f04f 020a 	mov.w	r2, #10
 80079d4:	4649      	mov	r1, r9
 80079d6:	4630      	mov	r0, r6
 80079d8:	d107      	bne.n	80079ea <_dtoa_r+0xa1a>
 80079da:	f000 f9b5 	bl	8007d48 <__multadd>
 80079de:	4681      	mov	r9, r0
 80079e0:	4607      	mov	r7, r0
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	e774      	b.n	80078d4 <_dtoa_r+0x904>
 80079ea:	f000 f9ad 	bl	8007d48 <__multadd>
 80079ee:	4639      	mov	r1, r7
 80079f0:	4681      	mov	r9, r0
 80079f2:	2300      	movs	r3, #0
 80079f4:	220a      	movs	r2, #10
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f9a6 	bl	8007d48 <__multadd>
 80079fc:	4607      	mov	r7, r0
 80079fe:	e7f0      	b.n	80079e2 <_dtoa_r+0xa12>
 8007a00:	f1ba 0f00 	cmp.w	sl, #0
 8007a04:	9a01      	ldr	r2, [sp, #4]
 8007a06:	bfcc      	ite	gt
 8007a08:	46d0      	movgt	r8, sl
 8007a0a:	f04f 0801 	movle.w	r8, #1
 8007a0e:	4490      	add	r8, r2
 8007a10:	f04f 0900 	mov.w	r9, #0
 8007a14:	4629      	mov	r1, r5
 8007a16:	2201      	movs	r2, #1
 8007a18:	4630      	mov	r0, r6
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	f000 fb44 	bl	80080a8 <__lshift>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4605      	mov	r5, r0
 8007a24:	f000 fbb0 	bl	8008188 <__mcmp>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	dcb1      	bgt.n	8007990 <_dtoa_r+0x9c0>
 8007a2c:	d102      	bne.n	8007a34 <_dtoa_r+0xa64>
 8007a2e:	9b02      	ldr	r3, [sp, #8]
 8007a30:	07db      	lsls	r3, r3, #31
 8007a32:	d4ad      	bmi.n	8007990 <_dtoa_r+0x9c0>
 8007a34:	4643      	mov	r3, r8
 8007a36:	4698      	mov	r8, r3
 8007a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a3c:	2a30      	cmp	r2, #48	; 0x30
 8007a3e:	d0fa      	beq.n	8007a36 <_dtoa_r+0xa66>
 8007a40:	e6f6      	b.n	8007830 <_dtoa_r+0x860>
 8007a42:	9a01      	ldr	r2, [sp, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d1a4      	bne.n	8007992 <_dtoa_r+0x9c2>
 8007a48:	f10b 0b01 	add.w	fp, fp, #1
 8007a4c:	2331      	movs	r3, #49	; 0x31
 8007a4e:	e778      	b.n	8007942 <_dtoa_r+0x972>
 8007a50:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <_dtoa_r+0xad4>)
 8007a52:	f7ff bb27 	b.w	80070a4 <_dtoa_r+0xd4>
 8007a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f47f ab03 	bne.w	8007064 <_dtoa_r+0x94>
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <_dtoa_r+0xad8>)
 8007a60:	f7ff bb20 	b.w	80070a4 <_dtoa_r+0xd4>
 8007a64:	f1ba 0f00 	cmp.w	sl, #0
 8007a68:	dc03      	bgt.n	8007a72 <_dtoa_r+0xaa2>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	f73f aec7 	bgt.w	8007800 <_dtoa_r+0x830>
 8007a72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a76:	4621      	mov	r1, r4
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff fa1b 	bl	8006eb4 <quorem>
 8007a7e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a82:	f808 3b01 	strb.w	r3, [r8], #1
 8007a86:	9a01      	ldr	r2, [sp, #4]
 8007a88:	eba8 0202 	sub.w	r2, r8, r2
 8007a8c:	4592      	cmp	sl, r2
 8007a8e:	ddb7      	ble.n	8007a00 <_dtoa_r+0xa30>
 8007a90:	4629      	mov	r1, r5
 8007a92:	2300      	movs	r3, #0
 8007a94:	220a      	movs	r2, #10
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f956 	bl	8007d48 <__multadd>
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	e7ea      	b.n	8007a76 <_dtoa_r+0xaa6>
 8007aa0:	08008c8b 	.word	0x08008c8b
 8007aa4:	08008be8 	.word	0x08008be8
 8007aa8:	08008c0c 	.word	0x08008c0c

08007aac <__sflush_r>:
 8007aac:	898a      	ldrh	r2, [r1, #12]
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	0710      	lsls	r0, r2, #28
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	d458      	bmi.n	8007b6c <__sflush_r+0xc0>
 8007aba:	684b      	ldr	r3, [r1, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dc05      	bgt.n	8007acc <__sflush_r+0x20>
 8007ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dc02      	bgt.n	8007acc <__sflush_r+0x20>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	d0f9      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ad8:	682f      	ldr	r7, [r5, #0]
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	d032      	beq.n	8007b44 <__sflush_r+0x98>
 8007ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	075a      	lsls	r2, r3, #29
 8007ae4:	d505      	bpl.n	8007af2 <__sflush_r+0x46>
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	1ac0      	subs	r0, r0, r3
 8007aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aec:	b10b      	cbz	r3, 8007af2 <__sflush_r+0x46>
 8007aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af0:	1ac0      	subs	r0, r0, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	4602      	mov	r2, r0
 8007af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b0      	blx	r6
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	d106      	bne.n	8007b12 <__sflush_r+0x66>
 8007b04:	6829      	ldr	r1, [r5, #0]
 8007b06:	291d      	cmp	r1, #29
 8007b08:	d82c      	bhi.n	8007b64 <__sflush_r+0xb8>
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	; (8007bb4 <__sflush_r+0x108>)
 8007b0c:	40ca      	lsrs	r2, r1
 8007b0e:	07d6      	lsls	r6, r2, #31
 8007b10:	d528      	bpl.n	8007b64 <__sflush_r+0xb8>
 8007b12:	2200      	movs	r2, #0
 8007b14:	6062      	str	r2, [r4, #4]
 8007b16:	04d9      	lsls	r1, r3, #19
 8007b18:	6922      	ldr	r2, [r4, #16]
 8007b1a:	6022      	str	r2, [r4, #0]
 8007b1c:	d504      	bpl.n	8007b28 <__sflush_r+0x7c>
 8007b1e:	1c42      	adds	r2, r0, #1
 8007b20:	d101      	bne.n	8007b26 <__sflush_r+0x7a>
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	b903      	cbnz	r3, 8007b28 <__sflush_r+0x7c>
 8007b26:	6560      	str	r0, [r4, #84]	; 0x54
 8007b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2a:	602f      	str	r7, [r5, #0]
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d0ca      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b34:	4299      	cmp	r1, r3
 8007b36:	d002      	beq.n	8007b3e <__sflush_r+0x92>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 fc3d 	bl	80083b8 <_free_r>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	6360      	str	r0, [r4, #52]	; 0x34
 8007b42:	e7c1      	b.n	8007ac8 <__sflush_r+0x1c>
 8007b44:	6a21      	ldr	r1, [r4, #32]
 8007b46:	2301      	movs	r3, #1
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b0      	blx	r6
 8007b4c:	1c41      	adds	r1, r0, #1
 8007b4e:	d1c7      	bne.n	8007ae0 <__sflush_r+0x34>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0c4      	beq.n	8007ae0 <__sflush_r+0x34>
 8007b56:	2b1d      	cmp	r3, #29
 8007b58:	d001      	beq.n	8007b5e <__sflush_r+0xb2>
 8007b5a:	2b16      	cmp	r3, #22
 8007b5c:	d101      	bne.n	8007b62 <__sflush_r+0xb6>
 8007b5e:	602f      	str	r7, [r5, #0]
 8007b60:	e7b1      	b.n	8007ac6 <__sflush_r+0x1a>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7ad      	b.n	8007ac8 <__sflush_r+0x1c>
 8007b6c:	690f      	ldr	r7, [r1, #16]
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	d0a9      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007b72:	0793      	lsls	r3, r2, #30
 8007b74:	680e      	ldr	r6, [r1, #0]
 8007b76:	bf08      	it	eq
 8007b78:	694b      	ldreq	r3, [r1, #20]
 8007b7a:	600f      	str	r7, [r1, #0]
 8007b7c:	bf18      	it	ne
 8007b7e:	2300      	movne	r3, #0
 8007b80:	eba6 0807 	sub.w	r8, r6, r7
 8007b84:	608b      	str	r3, [r1, #8]
 8007b86:	f1b8 0f00 	cmp.w	r8, #0
 8007b8a:	dd9c      	ble.n	8007ac6 <__sflush_r+0x1a>
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b90:	4643      	mov	r3, r8
 8007b92:	463a      	mov	r2, r7
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b0      	blx	r6
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	dc06      	bgt.n	8007baa <__sflush_r+0xfe>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	e78e      	b.n	8007ac8 <__sflush_r+0x1c>
 8007baa:	4407      	add	r7, r0
 8007bac:	eba8 0800 	sub.w	r8, r8, r0
 8007bb0:	e7e9      	b.n	8007b86 <__sflush_r+0xda>
 8007bb2:	bf00      	nop
 8007bb4:	20400001 	.word	0x20400001

08007bb8 <_fflush_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	690b      	ldr	r3, [r1, #16]
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	b913      	cbnz	r3, 8007bc8 <_fflush_r+0x10>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	b118      	cbz	r0, 8007bd2 <_fflush_r+0x1a>
 8007bca:	6983      	ldr	r3, [r0, #24]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <_fflush_r+0x1a>
 8007bce:	f7fe fadf 	bl	8006190 <__sinit>
 8007bd2:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <_fflush_r+0x6c>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d11b      	bne.n	8007c10 <_fflush_r+0x58>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ef      	beq.n	8007bc2 <_fflush_r+0xa>
 8007be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007be4:	07d0      	lsls	r0, r2, #31
 8007be6:	d404      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007be8:	0599      	lsls	r1, r3, #22
 8007bea:	d402      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bee:	f7fe fb92 	bl	8006316 <__retarget_lock_acquire_recursive>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f7ff ff59 	bl	8007aac <__sflush_r>
 8007bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bfc:	07da      	lsls	r2, r3, #31
 8007bfe:	4605      	mov	r5, r0
 8007c00:	d4e0      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	d4dd      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f7fe fb85 	bl	8006318 <__retarget_lock_release_recursive>
 8007c0e:	e7d9      	b.n	8007bc4 <_fflush_r+0xc>
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <_fflush_r+0x70>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <_fflush_r+0x62>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7df      	b.n	8007bda <_fflush_r+0x22>
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <_fflush_r+0x74>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7da      	b.n	8007bda <_fflush_r+0x22>
 8007c24:	08008b94 	.word	0x08008b94
 8007c28:	08008bb4 	.word	0x08008bb4
 8007c2c:	08008b74 	.word	0x08008b74

08007c30 <_localeconv_r>:
 8007c30:	4800      	ldr	r0, [pc, #0]	; (8007c34 <_localeconv_r+0x4>)
 8007c32:	4770      	bx	lr
 8007c34:	20000164 	.word	0x20000164

08007c38 <_lseek_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	; (8007c58 <_lseek_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7f9 fb6e 	bl	8001328 <_lseek>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_lseek_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_lseek_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	2000440c 	.word	0x2000440c

08007c5c <malloc>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <malloc+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f7fe bb91 	b.w	8006388 <_malloc_r>
 8007c66:	bf00      	nop
 8007c68:	20000010 	.word	0x20000010

08007c6c <__malloc_lock>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__malloc_lock+0x8>)
 8007c6e:	f7fe bb52 	b.w	8006316 <__retarget_lock_acquire_recursive>
 8007c72:	bf00      	nop
 8007c74:	20004400 	.word	0x20004400

08007c78 <__malloc_unlock>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__malloc_unlock+0x8>)
 8007c7a:	f7fe bb4d 	b.w	8006318 <__retarget_lock_release_recursive>
 8007c7e:	bf00      	nop
 8007c80:	20004400 	.word	0x20004400

08007c84 <_Balloc>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	b976      	cbnz	r6, 8007cac <_Balloc+0x28>
 8007c8e:	2010      	movs	r0, #16
 8007c90:	f7ff ffe4 	bl	8007c5c <malloc>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6260      	str	r0, [r4, #36]	; 0x24
 8007c98:	b920      	cbnz	r0, 8007ca4 <_Balloc+0x20>
 8007c9a:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <_Balloc+0x78>)
 8007c9c:	4818      	ldr	r0, [pc, #96]	; (8007d00 <_Balloc+0x7c>)
 8007c9e:	2166      	movs	r1, #102	; 0x66
 8007ca0:	f000 fbe8 	bl	8008474 <__assert_func>
 8007ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca8:	6006      	str	r6, [r0, #0]
 8007caa:	60c6      	str	r6, [r0, #12]
 8007cac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cae:	68f3      	ldr	r3, [r6, #12]
 8007cb0:	b183      	cbz	r3, 8007cd4 <_Balloc+0x50>
 8007cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cba:	b9b8      	cbnz	r0, 8007cec <_Balloc+0x68>
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8007cc2:	1d72      	adds	r2, r6, #5
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 fb60 	bl	800838c <_calloc_r>
 8007ccc:	b160      	cbz	r0, 8007ce8 <_Balloc+0x64>
 8007cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cd2:	e00e      	b.n	8007cf2 <_Balloc+0x6e>
 8007cd4:	2221      	movs	r2, #33	; 0x21
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fb57 	bl	800838c <_calloc_r>
 8007cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce0:	60f0      	str	r0, [r6, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e4      	bne.n	8007cb2 <_Balloc+0x2e>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	6802      	ldr	r2, [r0, #0]
 8007cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cf8:	e7f7      	b.n	8007cea <_Balloc+0x66>
 8007cfa:	bf00      	nop
 8007cfc:	08008c19 	.word	0x08008c19
 8007d00:	08008c9c 	.word	0x08008c9c

08007d04 <_Bfree>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b976      	cbnz	r6, 8007d2c <_Bfree+0x28>
 8007d0e:	2010      	movs	r0, #16
 8007d10:	f7ff ffa4 	bl	8007c5c <malloc>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6268      	str	r0, [r5, #36]	; 0x24
 8007d18:	b920      	cbnz	r0, 8007d24 <_Bfree+0x20>
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <_Bfree+0x3c>)
 8007d1c:	4809      	ldr	r0, [pc, #36]	; (8007d44 <_Bfree+0x40>)
 8007d1e:	218a      	movs	r1, #138	; 0x8a
 8007d20:	f000 fba8 	bl	8008474 <__assert_func>
 8007d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d28:	6006      	str	r6, [r0, #0]
 8007d2a:	60c6      	str	r6, [r0, #12]
 8007d2c:	b13c      	cbz	r4, 8007d3e <_Bfree+0x3a>
 8007d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d38:	6021      	str	r1, [r4, #0]
 8007d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	08008c19 	.word	0x08008c19
 8007d44:	08008c9c 	.word	0x08008c9c

08007d48 <__multadd>:
 8007d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	690d      	ldr	r5, [r1, #16]
 8007d4e:	4607      	mov	r7, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	461e      	mov	r6, r3
 8007d54:	f101 0c14 	add.w	ip, r1, #20
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d5e:	b299      	uxth	r1, r3
 8007d60:	fb02 6101 	mla	r1, r2, r1, r6
 8007d64:	0c1e      	lsrs	r6, r3, #16
 8007d66:	0c0b      	lsrs	r3, r1, #16
 8007d68:	fb02 3306 	mla	r3, r2, r6, r3
 8007d6c:	b289      	uxth	r1, r1
 8007d6e:	3001      	adds	r0, #1
 8007d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d74:	4285      	cmp	r5, r0
 8007d76:	f84c 1b04 	str.w	r1, [ip], #4
 8007d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d7e:	dcec      	bgt.n	8007d5a <__multadd+0x12>
 8007d80:	b30e      	cbz	r6, 8007dc6 <__multadd+0x7e>
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	42ab      	cmp	r3, r5
 8007d86:	dc19      	bgt.n	8007dbc <__multadd+0x74>
 8007d88:	6861      	ldr	r1, [r4, #4]
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	f7ff ff79 	bl	8007c84 <_Balloc>
 8007d92:	4680      	mov	r8, r0
 8007d94:	b928      	cbnz	r0, 8007da2 <__multadd+0x5a>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <__multadd+0x84>)
 8007d9a:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <__multadd+0x88>)
 8007d9c:	21b5      	movs	r1, #181	; 0xb5
 8007d9e:	f000 fb69 	bl	8008474 <__assert_func>
 8007da2:	6922      	ldr	r2, [r4, #16]
 8007da4:	3202      	adds	r2, #2
 8007da6:	f104 010c 	add.w	r1, r4, #12
 8007daa:	0092      	lsls	r2, r2, #2
 8007dac:	300c      	adds	r0, #12
 8007dae:	f7fe fab4 	bl	800631a <memcpy>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff ffa5 	bl	8007d04 <_Bfree>
 8007dba:	4644      	mov	r4, r8
 8007dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	615e      	str	r6, [r3, #20]
 8007dc4:	6125      	str	r5, [r4, #16]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dcc:	08008c8b 	.word	0x08008c8b
 8007dd0:	08008c9c 	.word	0x08008c9c

08007dd4 <__hi0bits>:
 8007dd4:	0c03      	lsrs	r3, r0, #16
 8007dd6:	041b      	lsls	r3, r3, #16
 8007dd8:	b9d3      	cbnz	r3, 8007e10 <__hi0bits+0x3c>
 8007dda:	0400      	lsls	r0, r0, #16
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007de2:	bf04      	itt	eq
 8007de4:	0200      	lsleq	r0, r0, #8
 8007de6:	3308      	addeq	r3, #8
 8007de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007dec:	bf04      	itt	eq
 8007dee:	0100      	lsleq	r0, r0, #4
 8007df0:	3304      	addeq	r3, #4
 8007df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007df6:	bf04      	itt	eq
 8007df8:	0080      	lsleq	r0, r0, #2
 8007dfa:	3302      	addeq	r3, #2
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	db05      	blt.n	8007e0c <__hi0bits+0x38>
 8007e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e04:	f103 0301 	add.w	r3, r3, #1
 8007e08:	bf08      	it	eq
 8007e0a:	2320      	moveq	r3, #32
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	4770      	bx	lr
 8007e10:	2300      	movs	r3, #0
 8007e12:	e7e4      	b.n	8007dde <__hi0bits+0xa>

08007e14 <__lo0bits>:
 8007e14:	6803      	ldr	r3, [r0, #0]
 8007e16:	f013 0207 	ands.w	r2, r3, #7
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	d00b      	beq.n	8007e36 <__lo0bits+0x22>
 8007e1e:	07da      	lsls	r2, r3, #31
 8007e20:	d423      	bmi.n	8007e6a <__lo0bits+0x56>
 8007e22:	0798      	lsls	r0, r3, #30
 8007e24:	bf49      	itett	mi
 8007e26:	085b      	lsrmi	r3, r3, #1
 8007e28:	089b      	lsrpl	r3, r3, #2
 8007e2a:	2001      	movmi	r0, #1
 8007e2c:	600b      	strmi	r3, [r1, #0]
 8007e2e:	bf5c      	itt	pl
 8007e30:	600b      	strpl	r3, [r1, #0]
 8007e32:	2002      	movpl	r0, #2
 8007e34:	4770      	bx	lr
 8007e36:	b298      	uxth	r0, r3
 8007e38:	b9a8      	cbnz	r0, 8007e66 <__lo0bits+0x52>
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	2010      	movs	r0, #16
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	b90a      	cbnz	r2, 8007e46 <__lo0bits+0x32>
 8007e42:	3008      	adds	r0, #8
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	071a      	lsls	r2, r3, #28
 8007e48:	bf04      	itt	eq
 8007e4a:	091b      	lsreq	r3, r3, #4
 8007e4c:	3004      	addeq	r0, #4
 8007e4e:	079a      	lsls	r2, r3, #30
 8007e50:	bf04      	itt	eq
 8007e52:	089b      	lsreq	r3, r3, #2
 8007e54:	3002      	addeq	r0, #2
 8007e56:	07da      	lsls	r2, r3, #31
 8007e58:	d403      	bmi.n	8007e62 <__lo0bits+0x4e>
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f100 0001 	add.w	r0, r0, #1
 8007e60:	d005      	beq.n	8007e6e <__lo0bits+0x5a>
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	4770      	bx	lr
 8007e66:	4610      	mov	r0, r2
 8007e68:	e7e9      	b.n	8007e3e <__lo0bits+0x2a>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	4770      	bx	lr
 8007e6e:	2020      	movs	r0, #32
 8007e70:	4770      	bx	lr
	...

08007e74 <__i2b>:
 8007e74:	b510      	push	{r4, lr}
 8007e76:	460c      	mov	r4, r1
 8007e78:	2101      	movs	r1, #1
 8007e7a:	f7ff ff03 	bl	8007c84 <_Balloc>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	b928      	cbnz	r0, 8007e8e <__i2b+0x1a>
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <__i2b+0x24>)
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <__i2b+0x28>)
 8007e86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e8a:	f000 faf3 	bl	8008474 <__assert_func>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	6144      	str	r4, [r0, #20]
 8007e92:	6103      	str	r3, [r0, #16]
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	bf00      	nop
 8007e98:	08008c8b 	.word	0x08008c8b
 8007e9c:	08008c9c 	.word	0x08008c9c

08007ea0 <__multiply>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	4691      	mov	r9, r2
 8007ea6:	690a      	ldr	r2, [r1, #16]
 8007ea8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	bfb8      	it	lt
 8007eb0:	460b      	movlt	r3, r1
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	bfbc      	itt	lt
 8007eb6:	464c      	movlt	r4, r9
 8007eb8:	4699      	movlt	r9, r3
 8007eba:	6927      	ldr	r7, [r4, #16]
 8007ebc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	6861      	ldr	r1, [r4, #4]
 8007ec4:	eb07 060a 	add.w	r6, r7, sl
 8007ec8:	42b3      	cmp	r3, r6
 8007eca:	b085      	sub	sp, #20
 8007ecc:	bfb8      	it	lt
 8007ece:	3101      	addlt	r1, #1
 8007ed0:	f7ff fed8 	bl	8007c84 <_Balloc>
 8007ed4:	b930      	cbnz	r0, 8007ee4 <__multiply+0x44>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	4b44      	ldr	r3, [pc, #272]	; (8007fec <__multiply+0x14c>)
 8007eda:	4845      	ldr	r0, [pc, #276]	; (8007ff0 <__multiply+0x150>)
 8007edc:	f240 115d 	movw	r1, #349	; 0x15d
 8007ee0:	f000 fac8 	bl	8008474 <__assert_func>
 8007ee4:	f100 0514 	add.w	r5, r0, #20
 8007ee8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eec:	462b      	mov	r3, r5
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4543      	cmp	r3, r8
 8007ef2:	d321      	bcc.n	8007f38 <__multiply+0x98>
 8007ef4:	f104 0314 	add.w	r3, r4, #20
 8007ef8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007efc:	f109 0314 	add.w	r3, r9, #20
 8007f00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f04:	9202      	str	r2, [sp, #8]
 8007f06:	1b3a      	subs	r2, r7, r4
 8007f08:	3a15      	subs	r2, #21
 8007f0a:	f022 0203 	bic.w	r2, r2, #3
 8007f0e:	3204      	adds	r2, #4
 8007f10:	f104 0115 	add.w	r1, r4, #21
 8007f14:	428f      	cmp	r7, r1
 8007f16:	bf38      	it	cc
 8007f18:	2204      	movcc	r2, #4
 8007f1a:	9201      	str	r2, [sp, #4]
 8007f1c:	9a02      	ldr	r2, [sp, #8]
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d80c      	bhi.n	8007f3e <__multiply+0x9e>
 8007f24:	2e00      	cmp	r6, #0
 8007f26:	dd03      	ble.n	8007f30 <__multiply+0x90>
 8007f28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d05a      	beq.n	8007fe6 <__multiply+0x146>
 8007f30:	6106      	str	r6, [r0, #16]
 8007f32:	b005      	add	sp, #20
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	f843 2b04 	str.w	r2, [r3], #4
 8007f3c:	e7d8      	b.n	8007ef0 <__multiply+0x50>
 8007f3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f42:	f1ba 0f00 	cmp.w	sl, #0
 8007f46:	d024      	beq.n	8007f92 <__multiply+0xf2>
 8007f48:	f104 0e14 	add.w	lr, r4, #20
 8007f4c:	46a9      	mov	r9, r5
 8007f4e:	f04f 0c00 	mov.w	ip, #0
 8007f52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f56:	f8d9 1000 	ldr.w	r1, [r9]
 8007f5a:	fa1f fb82 	uxth.w	fp, r2
 8007f5e:	b289      	uxth	r1, r1
 8007f60:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f68:	f8d9 2000 	ldr.w	r2, [r9]
 8007f6c:	4461      	add	r1, ip
 8007f6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f72:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f7a:	b289      	uxth	r1, r1
 8007f7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f80:	4577      	cmp	r7, lr
 8007f82:	f849 1b04 	str.w	r1, [r9], #4
 8007f86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f8a:	d8e2      	bhi.n	8007f52 <__multiply+0xb2>
 8007f8c:	9a01      	ldr	r2, [sp, #4]
 8007f8e:	f845 c002 	str.w	ip, [r5, r2]
 8007f92:	9a03      	ldr	r2, [sp, #12]
 8007f94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	f1b9 0f00 	cmp.w	r9, #0
 8007f9e:	d020      	beq.n	8007fe2 <__multiply+0x142>
 8007fa0:	6829      	ldr	r1, [r5, #0]
 8007fa2:	f104 0c14 	add.w	ip, r4, #20
 8007fa6:	46ae      	mov	lr, r5
 8007fa8:	f04f 0a00 	mov.w	sl, #0
 8007fac:	f8bc b000 	ldrh.w	fp, [ip]
 8007fb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fb4:	fb09 220b 	mla	r2, r9, fp, r2
 8007fb8:	4492      	add	sl, r2
 8007fba:	b289      	uxth	r1, r1
 8007fbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fc0:	f84e 1b04 	str.w	r1, [lr], #4
 8007fc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fc8:	f8be 1000 	ldrh.w	r1, [lr]
 8007fcc:	0c12      	lsrs	r2, r2, #16
 8007fce:	fb09 1102 	mla	r1, r9, r2, r1
 8007fd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fd6:	4567      	cmp	r7, ip
 8007fd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fdc:	d8e6      	bhi.n	8007fac <__multiply+0x10c>
 8007fde:	9a01      	ldr	r2, [sp, #4]
 8007fe0:	50a9      	str	r1, [r5, r2]
 8007fe2:	3504      	adds	r5, #4
 8007fe4:	e79a      	b.n	8007f1c <__multiply+0x7c>
 8007fe6:	3e01      	subs	r6, #1
 8007fe8:	e79c      	b.n	8007f24 <__multiply+0x84>
 8007fea:	bf00      	nop
 8007fec:	08008c8b 	.word	0x08008c8b
 8007ff0:	08008c9c 	.word	0x08008c9c

08007ff4 <__pow5mult>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	f012 0203 	ands.w	r2, r2, #3
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	d007      	beq.n	8008014 <__pow5mult+0x20>
 8008004:	4c25      	ldr	r4, [pc, #148]	; (800809c <__pow5mult+0xa8>)
 8008006:	3a01      	subs	r2, #1
 8008008:	2300      	movs	r3, #0
 800800a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800800e:	f7ff fe9b 	bl	8007d48 <__multadd>
 8008012:	4607      	mov	r7, r0
 8008014:	10ad      	asrs	r5, r5, #2
 8008016:	d03d      	beq.n	8008094 <__pow5mult+0xa0>
 8008018:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800801a:	b97c      	cbnz	r4, 800803c <__pow5mult+0x48>
 800801c:	2010      	movs	r0, #16
 800801e:	f7ff fe1d 	bl	8007c5c <malloc>
 8008022:	4602      	mov	r2, r0
 8008024:	6270      	str	r0, [r6, #36]	; 0x24
 8008026:	b928      	cbnz	r0, 8008034 <__pow5mult+0x40>
 8008028:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <__pow5mult+0xac>)
 800802a:	481e      	ldr	r0, [pc, #120]	; (80080a4 <__pow5mult+0xb0>)
 800802c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008030:	f000 fa20 	bl	8008474 <__assert_func>
 8008034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008038:	6004      	str	r4, [r0, #0]
 800803a:	60c4      	str	r4, [r0, #12]
 800803c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008044:	b94c      	cbnz	r4, 800805a <__pow5mult+0x66>
 8008046:	f240 2171 	movw	r1, #625	; 0x271
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ff12 	bl	8007e74 <__i2b>
 8008050:	2300      	movs	r3, #0
 8008052:	f8c8 0008 	str.w	r0, [r8, #8]
 8008056:	4604      	mov	r4, r0
 8008058:	6003      	str	r3, [r0, #0]
 800805a:	f04f 0900 	mov.w	r9, #0
 800805e:	07eb      	lsls	r3, r5, #31
 8008060:	d50a      	bpl.n	8008078 <__pow5mult+0x84>
 8008062:	4639      	mov	r1, r7
 8008064:	4622      	mov	r2, r4
 8008066:	4630      	mov	r0, r6
 8008068:	f7ff ff1a 	bl	8007ea0 <__multiply>
 800806c:	4639      	mov	r1, r7
 800806e:	4680      	mov	r8, r0
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff fe47 	bl	8007d04 <_Bfree>
 8008076:	4647      	mov	r7, r8
 8008078:	106d      	asrs	r5, r5, #1
 800807a:	d00b      	beq.n	8008094 <__pow5mult+0xa0>
 800807c:	6820      	ldr	r0, [r4, #0]
 800807e:	b938      	cbnz	r0, 8008090 <__pow5mult+0x9c>
 8008080:	4622      	mov	r2, r4
 8008082:	4621      	mov	r1, r4
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ff0b 	bl	8007ea0 <__multiply>
 800808a:	6020      	str	r0, [r4, #0]
 800808c:	f8c0 9000 	str.w	r9, [r0]
 8008090:	4604      	mov	r4, r0
 8008092:	e7e4      	b.n	800805e <__pow5mult+0x6a>
 8008094:	4638      	mov	r0, r7
 8008096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809a:	bf00      	nop
 800809c:	08008de8 	.word	0x08008de8
 80080a0:	08008c19 	.word	0x08008c19
 80080a4:	08008c9c 	.word	0x08008c9c

080080a8 <__lshift>:
 80080a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	6849      	ldr	r1, [r1, #4]
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	4607      	mov	r7, r0
 80080ba:	4691      	mov	r9, r2
 80080bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080c0:	f108 0601 	add.w	r6, r8, #1
 80080c4:	42b3      	cmp	r3, r6
 80080c6:	db0b      	blt.n	80080e0 <__lshift+0x38>
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff fddb 	bl	8007c84 <_Balloc>
 80080ce:	4605      	mov	r5, r0
 80080d0:	b948      	cbnz	r0, 80080e6 <__lshift+0x3e>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4b2a      	ldr	r3, [pc, #168]	; (8008180 <__lshift+0xd8>)
 80080d6:	482b      	ldr	r0, [pc, #172]	; (8008184 <__lshift+0xdc>)
 80080d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080dc:	f000 f9ca 	bl	8008474 <__assert_func>
 80080e0:	3101      	adds	r1, #1
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	e7ee      	b.n	80080c4 <__lshift+0x1c>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f100 0114 	add.w	r1, r0, #20
 80080ec:	f100 0210 	add.w	r2, r0, #16
 80080f0:	4618      	mov	r0, r3
 80080f2:	4553      	cmp	r3, sl
 80080f4:	db37      	blt.n	8008166 <__lshift+0xbe>
 80080f6:	6920      	ldr	r0, [r4, #16]
 80080f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080fc:	f104 0314 	add.w	r3, r4, #20
 8008100:	f019 091f 	ands.w	r9, r9, #31
 8008104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008108:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800810c:	d02f      	beq.n	800816e <__lshift+0xc6>
 800810e:	f1c9 0e20 	rsb	lr, r9, #32
 8008112:	468a      	mov	sl, r1
 8008114:	f04f 0c00 	mov.w	ip, #0
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	fa02 f209 	lsl.w	r2, r2, r9
 800811e:	ea42 020c 	orr.w	r2, r2, ip
 8008122:	f84a 2b04 	str.w	r2, [sl], #4
 8008126:	f853 2b04 	ldr.w	r2, [r3], #4
 800812a:	4298      	cmp	r0, r3
 800812c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008130:	d8f2      	bhi.n	8008118 <__lshift+0x70>
 8008132:	1b03      	subs	r3, r0, r4
 8008134:	3b15      	subs	r3, #21
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	3304      	adds	r3, #4
 800813c:	f104 0215 	add.w	r2, r4, #21
 8008140:	4290      	cmp	r0, r2
 8008142:	bf38      	it	cc
 8008144:	2304      	movcc	r3, #4
 8008146:	f841 c003 	str.w	ip, [r1, r3]
 800814a:	f1bc 0f00 	cmp.w	ip, #0
 800814e:	d001      	beq.n	8008154 <__lshift+0xac>
 8008150:	f108 0602 	add.w	r6, r8, #2
 8008154:	3e01      	subs	r6, #1
 8008156:	4638      	mov	r0, r7
 8008158:	612e      	str	r6, [r5, #16]
 800815a:	4621      	mov	r1, r4
 800815c:	f7ff fdd2 	bl	8007d04 <_Bfree>
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008166:	f842 0f04 	str.w	r0, [r2, #4]!
 800816a:	3301      	adds	r3, #1
 800816c:	e7c1      	b.n	80080f2 <__lshift+0x4a>
 800816e:	3904      	subs	r1, #4
 8008170:	f853 2b04 	ldr.w	r2, [r3], #4
 8008174:	f841 2f04 	str.w	r2, [r1, #4]!
 8008178:	4298      	cmp	r0, r3
 800817a:	d8f9      	bhi.n	8008170 <__lshift+0xc8>
 800817c:	e7ea      	b.n	8008154 <__lshift+0xac>
 800817e:	bf00      	nop
 8008180:	08008c8b 	.word	0x08008c8b
 8008184:	08008c9c 	.word	0x08008c9c

08008188 <__mcmp>:
 8008188:	b530      	push	{r4, r5, lr}
 800818a:	6902      	ldr	r2, [r0, #16]
 800818c:	690c      	ldr	r4, [r1, #16]
 800818e:	1b12      	subs	r2, r2, r4
 8008190:	d10e      	bne.n	80081b0 <__mcmp+0x28>
 8008192:	f100 0314 	add.w	r3, r0, #20
 8008196:	3114      	adds	r1, #20
 8008198:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800819c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081a8:	42a5      	cmp	r5, r4
 80081aa:	d003      	beq.n	80081b4 <__mcmp+0x2c>
 80081ac:	d305      	bcc.n	80081ba <__mcmp+0x32>
 80081ae:	2201      	movs	r2, #1
 80081b0:	4610      	mov	r0, r2
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	4283      	cmp	r3, r0
 80081b6:	d3f3      	bcc.n	80081a0 <__mcmp+0x18>
 80081b8:	e7fa      	b.n	80081b0 <__mcmp+0x28>
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295
 80081be:	e7f7      	b.n	80081b0 <__mcmp+0x28>

080081c0 <__mdiff>:
 80081c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	4606      	mov	r6, r0
 80081c8:	4611      	mov	r1, r2
 80081ca:	4620      	mov	r0, r4
 80081cc:	4690      	mov	r8, r2
 80081ce:	f7ff ffdb 	bl	8008188 <__mcmp>
 80081d2:	1e05      	subs	r5, r0, #0
 80081d4:	d110      	bne.n	80081f8 <__mdiff+0x38>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff fd53 	bl	8007c84 <_Balloc>
 80081de:	b930      	cbnz	r0, 80081ee <__mdiff+0x2e>
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <__mdiff+0x10c>)
 80081e2:	4602      	mov	r2, r0
 80081e4:	f240 2132 	movw	r1, #562	; 0x232
 80081e8:	4839      	ldr	r0, [pc, #228]	; (80082d0 <__mdiff+0x110>)
 80081ea:	f000 f943 	bl	8008474 <__assert_func>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	bfa4      	itt	ge
 80081fa:	4643      	movge	r3, r8
 80081fc:	46a0      	movge	r8, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008204:	bfa6      	itte	ge
 8008206:	461c      	movge	r4, r3
 8008208:	2500      	movge	r5, #0
 800820a:	2501      	movlt	r5, #1
 800820c:	f7ff fd3a 	bl	8007c84 <_Balloc>
 8008210:	b920      	cbnz	r0, 800821c <__mdiff+0x5c>
 8008212:	4b2e      	ldr	r3, [pc, #184]	; (80082cc <__mdiff+0x10c>)
 8008214:	4602      	mov	r2, r0
 8008216:	f44f 7110 	mov.w	r1, #576	; 0x240
 800821a:	e7e5      	b.n	80081e8 <__mdiff+0x28>
 800821c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008220:	6926      	ldr	r6, [r4, #16]
 8008222:	60c5      	str	r5, [r0, #12]
 8008224:	f104 0914 	add.w	r9, r4, #20
 8008228:	f108 0514 	add.w	r5, r8, #20
 800822c:	f100 0e14 	add.w	lr, r0, #20
 8008230:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008234:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008238:	f108 0210 	add.w	r2, r8, #16
 800823c:	46f2      	mov	sl, lr
 800823e:	2100      	movs	r1, #0
 8008240:	f859 3b04 	ldr.w	r3, [r9], #4
 8008244:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008248:	fa1f f883 	uxth.w	r8, r3
 800824c:	fa11 f18b 	uxtah	r1, r1, fp
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	eba1 0808 	sub.w	r8, r1, r8
 8008256:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800825a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800825e:	fa1f f888 	uxth.w	r8, r8
 8008262:	1419      	asrs	r1, r3, #16
 8008264:	454e      	cmp	r6, r9
 8008266:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800826a:	f84a 3b04 	str.w	r3, [sl], #4
 800826e:	d8e7      	bhi.n	8008240 <__mdiff+0x80>
 8008270:	1b33      	subs	r3, r6, r4
 8008272:	3b15      	subs	r3, #21
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	3304      	adds	r3, #4
 800827a:	3415      	adds	r4, #21
 800827c:	42a6      	cmp	r6, r4
 800827e:	bf38      	it	cc
 8008280:	2304      	movcc	r3, #4
 8008282:	441d      	add	r5, r3
 8008284:	4473      	add	r3, lr
 8008286:	469e      	mov	lr, r3
 8008288:	462e      	mov	r6, r5
 800828a:	4566      	cmp	r6, ip
 800828c:	d30e      	bcc.n	80082ac <__mdiff+0xec>
 800828e:	f10c 0203 	add.w	r2, ip, #3
 8008292:	1b52      	subs	r2, r2, r5
 8008294:	f022 0203 	bic.w	r2, r2, #3
 8008298:	3d03      	subs	r5, #3
 800829a:	45ac      	cmp	ip, r5
 800829c:	bf38      	it	cc
 800829e:	2200      	movcc	r2, #0
 80082a0:	441a      	add	r2, r3
 80082a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082a6:	b17b      	cbz	r3, 80082c8 <__mdiff+0x108>
 80082a8:	6107      	str	r7, [r0, #16]
 80082aa:	e7a3      	b.n	80081f4 <__mdiff+0x34>
 80082ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80082b0:	fa11 f288 	uxtah	r2, r1, r8
 80082b4:	1414      	asrs	r4, r2, #16
 80082b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082ba:	b292      	uxth	r2, r2
 80082bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082c0:	f84e 2b04 	str.w	r2, [lr], #4
 80082c4:	1421      	asrs	r1, r4, #16
 80082c6:	e7e0      	b.n	800828a <__mdiff+0xca>
 80082c8:	3f01      	subs	r7, #1
 80082ca:	e7ea      	b.n	80082a2 <__mdiff+0xe2>
 80082cc:	08008c8b 	.word	0x08008c8b
 80082d0:	08008c9c 	.word	0x08008c9c

080082d4 <__d2b>:
 80082d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	4689      	mov	r9, r1
 80082da:	2101      	movs	r1, #1
 80082dc:	ec57 6b10 	vmov	r6, r7, d0
 80082e0:	4690      	mov	r8, r2
 80082e2:	f7ff fccf 	bl	8007c84 <_Balloc>
 80082e6:	4604      	mov	r4, r0
 80082e8:	b930      	cbnz	r0, 80082f8 <__d2b+0x24>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4b25      	ldr	r3, [pc, #148]	; (8008384 <__d2b+0xb0>)
 80082ee:	4826      	ldr	r0, [pc, #152]	; (8008388 <__d2b+0xb4>)
 80082f0:	f240 310a 	movw	r1, #778	; 0x30a
 80082f4:	f000 f8be 	bl	8008474 <__assert_func>
 80082f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008300:	bb35      	cbnz	r5, 8008350 <__d2b+0x7c>
 8008302:	2e00      	cmp	r6, #0
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	d028      	beq.n	800835a <__d2b+0x86>
 8008308:	4668      	mov	r0, sp
 800830a:	9600      	str	r6, [sp, #0]
 800830c:	f7ff fd82 	bl	8007e14 <__lo0bits>
 8008310:	9900      	ldr	r1, [sp, #0]
 8008312:	b300      	cbz	r0, 8008356 <__d2b+0x82>
 8008314:	9a01      	ldr	r2, [sp, #4]
 8008316:	f1c0 0320 	rsb	r3, r0, #32
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	430b      	orrs	r3, r1
 8008320:	40c2      	lsrs	r2, r0
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	9201      	str	r2, [sp, #4]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	61a3      	str	r3, [r4, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bf14      	ite	ne
 800832e:	2202      	movne	r2, #2
 8008330:	2201      	moveq	r2, #1
 8008332:	6122      	str	r2, [r4, #16]
 8008334:	b1d5      	cbz	r5, 800836c <__d2b+0x98>
 8008336:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800833a:	4405      	add	r5, r0
 800833c:	f8c9 5000 	str.w	r5, [r9]
 8008340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008344:	f8c8 0000 	str.w	r0, [r8]
 8008348:	4620      	mov	r0, r4
 800834a:	b003      	add	sp, #12
 800834c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008354:	e7d5      	b.n	8008302 <__d2b+0x2e>
 8008356:	6161      	str	r1, [r4, #20]
 8008358:	e7e5      	b.n	8008326 <__d2b+0x52>
 800835a:	a801      	add	r0, sp, #4
 800835c:	f7ff fd5a 	bl	8007e14 <__lo0bits>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	6163      	str	r3, [r4, #20]
 8008364:	2201      	movs	r2, #1
 8008366:	6122      	str	r2, [r4, #16]
 8008368:	3020      	adds	r0, #32
 800836a:	e7e3      	b.n	8008334 <__d2b+0x60>
 800836c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008374:	f8c9 0000 	str.w	r0, [r9]
 8008378:	6918      	ldr	r0, [r3, #16]
 800837a:	f7ff fd2b 	bl	8007dd4 <__hi0bits>
 800837e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008382:	e7df      	b.n	8008344 <__d2b+0x70>
 8008384:	08008c8b 	.word	0x08008c8b
 8008388:	08008c9c 	.word	0x08008c9c

0800838c <_calloc_r>:
 800838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838e:	fba1 2402 	umull	r2, r4, r1, r2
 8008392:	b94c      	cbnz	r4, 80083a8 <_calloc_r+0x1c>
 8008394:	4611      	mov	r1, r2
 8008396:	9201      	str	r2, [sp, #4]
 8008398:	f7fd fff6 	bl	8006388 <_malloc_r>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	4605      	mov	r5, r0
 80083a0:	b930      	cbnz	r0, 80083b0 <_calloc_r+0x24>
 80083a2:	4628      	mov	r0, r5
 80083a4:	b003      	add	sp, #12
 80083a6:	bd30      	pop	{r4, r5, pc}
 80083a8:	220c      	movs	r2, #12
 80083aa:	6002      	str	r2, [r0, #0]
 80083ac:	2500      	movs	r5, #0
 80083ae:	e7f8      	b.n	80083a2 <_calloc_r+0x16>
 80083b0:	4621      	mov	r1, r4
 80083b2:	f7fd ffc0 	bl	8006336 <memset>
 80083b6:	e7f4      	b.n	80083a2 <_calloc_r+0x16>

080083b8 <_free_r>:
 80083b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ba:	2900      	cmp	r1, #0
 80083bc:	d044      	beq.n	8008448 <_free_r+0x90>
 80083be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c2:	9001      	str	r0, [sp, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f1a1 0404 	sub.w	r4, r1, #4
 80083ca:	bfb8      	it	lt
 80083cc:	18e4      	addlt	r4, r4, r3
 80083ce:	f7ff fc4d 	bl	8007c6c <__malloc_lock>
 80083d2:	4a1e      	ldr	r2, [pc, #120]	; (800844c <_free_r+0x94>)
 80083d4:	9801      	ldr	r0, [sp, #4]
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	b933      	cbnz	r3, 80083e8 <_free_r+0x30>
 80083da:	6063      	str	r3, [r4, #4]
 80083dc:	6014      	str	r4, [r2, #0]
 80083de:	b003      	add	sp, #12
 80083e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e4:	f7ff bc48 	b.w	8007c78 <__malloc_unlock>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d908      	bls.n	80083fe <_free_r+0x46>
 80083ec:	6825      	ldr	r5, [r4, #0]
 80083ee:	1961      	adds	r1, r4, r5
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf01      	itttt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	1949      	addeq	r1, r1, r5
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	e7ed      	b.n	80083da <_free_r+0x22>
 80083fe:	461a      	mov	r2, r3
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b10b      	cbz	r3, 8008408 <_free_r+0x50>
 8008404:	42a3      	cmp	r3, r4
 8008406:	d9fa      	bls.n	80083fe <_free_r+0x46>
 8008408:	6811      	ldr	r1, [r2, #0]
 800840a:	1855      	adds	r5, r2, r1
 800840c:	42a5      	cmp	r5, r4
 800840e:	d10b      	bne.n	8008428 <_free_r+0x70>
 8008410:	6824      	ldr	r4, [r4, #0]
 8008412:	4421      	add	r1, r4
 8008414:	1854      	adds	r4, r2, r1
 8008416:	42a3      	cmp	r3, r4
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	d1e0      	bne.n	80083de <_free_r+0x26>
 800841c:	681c      	ldr	r4, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	6053      	str	r3, [r2, #4]
 8008422:	4421      	add	r1, r4
 8008424:	6011      	str	r1, [r2, #0]
 8008426:	e7da      	b.n	80083de <_free_r+0x26>
 8008428:	d902      	bls.n	8008430 <_free_r+0x78>
 800842a:	230c      	movs	r3, #12
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	e7d6      	b.n	80083de <_free_r+0x26>
 8008430:	6825      	ldr	r5, [r4, #0]
 8008432:	1961      	adds	r1, r4, r5
 8008434:	428b      	cmp	r3, r1
 8008436:	bf04      	itt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	bf04      	itt	eq
 8008440:	1949      	addeq	r1, r1, r5
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	6054      	str	r4, [r2, #4]
 8008446:	e7ca      	b.n	80083de <_free_r+0x26>
 8008448:	b003      	add	sp, #12
 800844a:	bd30      	pop	{r4, r5, pc}
 800844c:	20004404 	.word	0x20004404

08008450 <_read_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_read_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f8 ff02 	bl	8001268 <_read>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_read_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_read_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	2000440c 	.word	0x2000440c

08008474 <__assert_func>:
 8008474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008476:	4614      	mov	r4, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <__assert_func+0x2c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4605      	mov	r5, r0
 8008480:	68d8      	ldr	r0, [r3, #12]
 8008482:	b14c      	cbz	r4, 8008498 <__assert_func+0x24>
 8008484:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <__assert_func+0x30>)
 8008486:	9100      	str	r1, [sp, #0]
 8008488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800848c:	4906      	ldr	r1, [pc, #24]	; (80084a8 <__assert_func+0x34>)
 800848e:	462b      	mov	r3, r5
 8008490:	f000 f80e 	bl	80084b0 <fiprintf>
 8008494:	f000 fa58 	bl	8008948 <abort>
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <__assert_func+0x38>)
 800849a:	461c      	mov	r4, r3
 800849c:	e7f3      	b.n	8008486 <__assert_func+0x12>
 800849e:	bf00      	nop
 80084a0:	20000010 	.word	0x20000010
 80084a4:	08008df4 	.word	0x08008df4
 80084a8:	08008e01 	.word	0x08008e01
 80084ac:	08008e2f 	.word	0x08008e2f

080084b0 <fiprintf>:
 80084b0:	b40e      	push	{r1, r2, r3}
 80084b2:	b503      	push	{r0, r1, lr}
 80084b4:	4601      	mov	r1, r0
 80084b6:	ab03      	add	r3, sp, #12
 80084b8:	4805      	ldr	r0, [pc, #20]	; (80084d0 <fiprintf+0x20>)
 80084ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	f000 f843 	bl	800854c <_vfiprintf_r>
 80084c6:	b002      	add	sp, #8
 80084c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084cc:	b003      	add	sp, #12
 80084ce:	4770      	bx	lr
 80084d0:	20000010 	.word	0x20000010

080084d4 <__ascii_mbtowc>:
 80084d4:	b082      	sub	sp, #8
 80084d6:	b901      	cbnz	r1, 80084da <__ascii_mbtowc+0x6>
 80084d8:	a901      	add	r1, sp, #4
 80084da:	b142      	cbz	r2, 80084ee <__ascii_mbtowc+0x1a>
 80084dc:	b14b      	cbz	r3, 80084f2 <__ascii_mbtowc+0x1e>
 80084de:	7813      	ldrb	r3, [r2, #0]
 80084e0:	600b      	str	r3, [r1, #0]
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	1e10      	subs	r0, r2, #0
 80084e6:	bf18      	it	ne
 80084e8:	2001      	movne	r0, #1
 80084ea:	b002      	add	sp, #8
 80084ec:	4770      	bx	lr
 80084ee:	4610      	mov	r0, r2
 80084f0:	e7fb      	b.n	80084ea <__ascii_mbtowc+0x16>
 80084f2:	f06f 0001 	mvn.w	r0, #1
 80084f6:	e7f8      	b.n	80084ea <__ascii_mbtowc+0x16>

080084f8 <__sfputc_r>:
 80084f8:	6893      	ldr	r3, [r2, #8]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	b410      	push	{r4}
 8008500:	6093      	str	r3, [r2, #8]
 8008502:	da08      	bge.n	8008516 <__sfputc_r+0x1e>
 8008504:	6994      	ldr	r4, [r2, #24]
 8008506:	42a3      	cmp	r3, r4
 8008508:	db01      	blt.n	800850e <__sfputc_r+0x16>
 800850a:	290a      	cmp	r1, #10
 800850c:	d103      	bne.n	8008516 <__sfputc_r+0x1e>
 800850e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008512:	f000 b94b 	b.w	80087ac <__swbuf_r>
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	1c58      	adds	r0, r3, #1
 800851a:	6010      	str	r0, [r2, #0]
 800851c:	7019      	strb	r1, [r3, #0]
 800851e:	4608      	mov	r0, r1
 8008520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008524:	4770      	bx	lr

08008526 <__sfputs_r>:
 8008526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008528:	4606      	mov	r6, r0
 800852a:	460f      	mov	r7, r1
 800852c:	4614      	mov	r4, r2
 800852e:	18d5      	adds	r5, r2, r3
 8008530:	42ac      	cmp	r4, r5
 8008532:	d101      	bne.n	8008538 <__sfputs_r+0x12>
 8008534:	2000      	movs	r0, #0
 8008536:	e007      	b.n	8008548 <__sfputs_r+0x22>
 8008538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853c:	463a      	mov	r2, r7
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ffda 	bl	80084f8 <__sfputc_r>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d1f3      	bne.n	8008530 <__sfputs_r+0xa>
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800854c <_vfiprintf_r>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	460d      	mov	r5, r1
 8008552:	b09d      	sub	sp, #116	; 0x74
 8008554:	4614      	mov	r4, r2
 8008556:	4698      	mov	r8, r3
 8008558:	4606      	mov	r6, r0
 800855a:	b118      	cbz	r0, 8008564 <_vfiprintf_r+0x18>
 800855c:	6983      	ldr	r3, [r0, #24]
 800855e:	b90b      	cbnz	r3, 8008564 <_vfiprintf_r+0x18>
 8008560:	f7fd fe16 	bl	8006190 <__sinit>
 8008564:	4b89      	ldr	r3, [pc, #548]	; (800878c <_vfiprintf_r+0x240>)
 8008566:	429d      	cmp	r5, r3
 8008568:	d11b      	bne.n	80085a2 <_vfiprintf_r+0x56>
 800856a:	6875      	ldr	r5, [r6, #4]
 800856c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	d405      	bmi.n	800857e <_vfiprintf_r+0x32>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d402      	bmi.n	800857e <_vfiprintf_r+0x32>
 8008578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800857a:	f7fd fecc 	bl	8006316 <__retarget_lock_acquire_recursive>
 800857e:	89ab      	ldrh	r3, [r5, #12]
 8008580:	071b      	lsls	r3, r3, #28
 8008582:	d501      	bpl.n	8008588 <_vfiprintf_r+0x3c>
 8008584:	692b      	ldr	r3, [r5, #16]
 8008586:	b9eb      	cbnz	r3, 80085c4 <_vfiprintf_r+0x78>
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f96e 	bl	800886c <__swsetup_r>
 8008590:	b1c0      	cbz	r0, 80085c4 <_vfiprintf_r+0x78>
 8008592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008594:	07dc      	lsls	r4, r3, #31
 8008596:	d50e      	bpl.n	80085b6 <_vfiprintf_r+0x6a>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	b01d      	add	sp, #116	; 0x74
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	4b7b      	ldr	r3, [pc, #492]	; (8008790 <_vfiprintf_r+0x244>)
 80085a4:	429d      	cmp	r5, r3
 80085a6:	d101      	bne.n	80085ac <_vfiprintf_r+0x60>
 80085a8:	68b5      	ldr	r5, [r6, #8]
 80085aa:	e7df      	b.n	800856c <_vfiprintf_r+0x20>
 80085ac:	4b79      	ldr	r3, [pc, #484]	; (8008794 <_vfiprintf_r+0x248>)
 80085ae:	429d      	cmp	r5, r3
 80085b0:	bf08      	it	eq
 80085b2:	68f5      	ldreq	r5, [r6, #12]
 80085b4:	e7da      	b.n	800856c <_vfiprintf_r+0x20>
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	0598      	lsls	r0, r3, #22
 80085ba:	d4ed      	bmi.n	8008598 <_vfiprintf_r+0x4c>
 80085bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085be:	f7fd feab 	bl	8006318 <__retarget_lock_release_recursive>
 80085c2:	e7e9      	b.n	8008598 <_vfiprintf_r+0x4c>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	2320      	movs	r3, #32
 80085ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d2:	2330      	movs	r3, #48	; 0x30
 80085d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008798 <_vfiprintf_r+0x24c>
 80085d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085dc:	f04f 0901 	mov.w	r9, #1
 80085e0:	4623      	mov	r3, r4
 80085e2:	469a      	mov	sl, r3
 80085e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e8:	b10a      	cbz	r2, 80085ee <_vfiprintf_r+0xa2>
 80085ea:	2a25      	cmp	r2, #37	; 0x25
 80085ec:	d1f9      	bne.n	80085e2 <_vfiprintf_r+0x96>
 80085ee:	ebba 0b04 	subs.w	fp, sl, r4
 80085f2:	d00b      	beq.n	800860c <_vfiprintf_r+0xc0>
 80085f4:	465b      	mov	r3, fp
 80085f6:	4622      	mov	r2, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff ff93 	bl	8008526 <__sfputs_r>
 8008600:	3001      	adds	r0, #1
 8008602:	f000 80aa 	beq.w	800875a <_vfiprintf_r+0x20e>
 8008606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008608:	445a      	add	r2, fp
 800860a:	9209      	str	r2, [sp, #36]	; 0x24
 800860c:	f89a 3000 	ldrb.w	r3, [sl]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80a2 	beq.w	800875a <_vfiprintf_r+0x20e>
 8008616:	2300      	movs	r3, #0
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008620:	f10a 0a01 	add.w	sl, sl, #1
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800862c:	931a      	str	r3, [sp, #104]	; 0x68
 800862e:	4654      	mov	r4, sl
 8008630:	2205      	movs	r2, #5
 8008632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008636:	4858      	ldr	r0, [pc, #352]	; (8008798 <_vfiprintf_r+0x24c>)
 8008638:	f7f7 fe0a 	bl	8000250 <memchr>
 800863c:	9a04      	ldr	r2, [sp, #16]
 800863e:	b9d8      	cbnz	r0, 8008678 <_vfiprintf_r+0x12c>
 8008640:	06d1      	lsls	r1, r2, #27
 8008642:	bf44      	itt	mi
 8008644:	2320      	movmi	r3, #32
 8008646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800864a:	0713      	lsls	r3, r2, #28
 800864c:	bf44      	itt	mi
 800864e:	232b      	movmi	r3, #43	; 0x2b
 8008650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008654:	f89a 3000 	ldrb.w	r3, [sl]
 8008658:	2b2a      	cmp	r3, #42	; 0x2a
 800865a:	d015      	beq.n	8008688 <_vfiprintf_r+0x13c>
 800865c:	9a07      	ldr	r2, [sp, #28]
 800865e:	4654      	mov	r4, sl
 8008660:	2000      	movs	r0, #0
 8008662:	f04f 0c0a 	mov.w	ip, #10
 8008666:	4621      	mov	r1, r4
 8008668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866c:	3b30      	subs	r3, #48	; 0x30
 800866e:	2b09      	cmp	r3, #9
 8008670:	d94e      	bls.n	8008710 <_vfiprintf_r+0x1c4>
 8008672:	b1b0      	cbz	r0, 80086a2 <_vfiprintf_r+0x156>
 8008674:	9207      	str	r2, [sp, #28]
 8008676:	e014      	b.n	80086a2 <_vfiprintf_r+0x156>
 8008678:	eba0 0308 	sub.w	r3, r0, r8
 800867c:	fa09 f303 	lsl.w	r3, r9, r3
 8008680:	4313      	orrs	r3, r2
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	46a2      	mov	sl, r4
 8008686:	e7d2      	b.n	800862e <_vfiprintf_r+0xe2>
 8008688:	9b03      	ldr	r3, [sp, #12]
 800868a:	1d19      	adds	r1, r3, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	9103      	str	r1, [sp, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfbb      	ittet	lt
 8008694:	425b      	neglt	r3, r3
 8008696:	f042 0202 	orrlt.w	r2, r2, #2
 800869a:	9307      	strge	r3, [sp, #28]
 800869c:	9307      	strlt	r3, [sp, #28]
 800869e:	bfb8      	it	lt
 80086a0:	9204      	strlt	r2, [sp, #16]
 80086a2:	7823      	ldrb	r3, [r4, #0]
 80086a4:	2b2e      	cmp	r3, #46	; 0x2e
 80086a6:	d10c      	bne.n	80086c2 <_vfiprintf_r+0x176>
 80086a8:	7863      	ldrb	r3, [r4, #1]
 80086aa:	2b2a      	cmp	r3, #42	; 0x2a
 80086ac:	d135      	bne.n	800871a <_vfiprintf_r+0x1ce>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	9203      	str	r2, [sp, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfb8      	it	lt
 80086ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80086be:	3402      	adds	r4, #2
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087a8 <_vfiprintf_r+0x25c>
 80086c6:	7821      	ldrb	r1, [r4, #0]
 80086c8:	2203      	movs	r2, #3
 80086ca:	4650      	mov	r0, sl
 80086cc:	f7f7 fdc0 	bl	8000250 <memchr>
 80086d0:	b140      	cbz	r0, 80086e4 <_vfiprintf_r+0x198>
 80086d2:	2340      	movs	r3, #64	; 0x40
 80086d4:	eba0 000a 	sub.w	r0, r0, sl
 80086d8:	fa03 f000 	lsl.w	r0, r3, r0
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	4303      	orrs	r3, r0
 80086e0:	3401      	adds	r4, #1
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e8:	482c      	ldr	r0, [pc, #176]	; (800879c <_vfiprintf_r+0x250>)
 80086ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ee:	2206      	movs	r2, #6
 80086f0:	f7f7 fdae 	bl	8000250 <memchr>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d03f      	beq.n	8008778 <_vfiprintf_r+0x22c>
 80086f8:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <_vfiprintf_r+0x254>)
 80086fa:	bb1b      	cbnz	r3, 8008744 <_vfiprintf_r+0x1f8>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	3307      	adds	r3, #7
 8008700:	f023 0307 	bic.w	r3, r3, #7
 8008704:	3308      	adds	r3, #8
 8008706:	9303      	str	r3, [sp, #12]
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	443b      	add	r3, r7
 800870c:	9309      	str	r3, [sp, #36]	; 0x24
 800870e:	e767      	b.n	80085e0 <_vfiprintf_r+0x94>
 8008710:	fb0c 3202 	mla	r2, ip, r2, r3
 8008714:	460c      	mov	r4, r1
 8008716:	2001      	movs	r0, #1
 8008718:	e7a5      	b.n	8008666 <_vfiprintf_r+0x11a>
 800871a:	2300      	movs	r3, #0
 800871c:	3401      	adds	r4, #1
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	4619      	mov	r1, r3
 8008722:	f04f 0c0a 	mov.w	ip, #10
 8008726:	4620      	mov	r0, r4
 8008728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872c:	3a30      	subs	r2, #48	; 0x30
 800872e:	2a09      	cmp	r2, #9
 8008730:	d903      	bls.n	800873a <_vfiprintf_r+0x1ee>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0c5      	beq.n	80086c2 <_vfiprintf_r+0x176>
 8008736:	9105      	str	r1, [sp, #20]
 8008738:	e7c3      	b.n	80086c2 <_vfiprintf_r+0x176>
 800873a:	fb0c 2101 	mla	r1, ip, r1, r2
 800873e:	4604      	mov	r4, r0
 8008740:	2301      	movs	r3, #1
 8008742:	e7f0      	b.n	8008726 <_vfiprintf_r+0x1da>
 8008744:	ab03      	add	r3, sp, #12
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	462a      	mov	r2, r5
 800874a:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <_vfiprintf_r+0x258>)
 800874c:	a904      	add	r1, sp, #16
 800874e:	4630      	mov	r0, r6
 8008750:	f7fd ff1e 	bl	8006590 <_printf_float>
 8008754:	4607      	mov	r7, r0
 8008756:	1c78      	adds	r0, r7, #1
 8008758:	d1d6      	bne.n	8008708 <_vfiprintf_r+0x1bc>
 800875a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800875c:	07d9      	lsls	r1, r3, #31
 800875e:	d405      	bmi.n	800876c <_vfiprintf_r+0x220>
 8008760:	89ab      	ldrh	r3, [r5, #12]
 8008762:	059a      	lsls	r2, r3, #22
 8008764:	d402      	bmi.n	800876c <_vfiprintf_r+0x220>
 8008766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008768:	f7fd fdd6 	bl	8006318 <__retarget_lock_release_recursive>
 800876c:	89ab      	ldrh	r3, [r5, #12]
 800876e:	065b      	lsls	r3, r3, #25
 8008770:	f53f af12 	bmi.w	8008598 <_vfiprintf_r+0x4c>
 8008774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008776:	e711      	b.n	800859c <_vfiprintf_r+0x50>
 8008778:	ab03      	add	r3, sp, #12
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	462a      	mov	r2, r5
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <_vfiprintf_r+0x258>)
 8008780:	a904      	add	r1, sp, #16
 8008782:	4630      	mov	r0, r6
 8008784:	f7fe f990 	bl	8006aa8 <_printf_i>
 8008788:	e7e4      	b.n	8008754 <_vfiprintf_r+0x208>
 800878a:	bf00      	nop
 800878c:	08008b94 	.word	0x08008b94
 8008790:	08008bb4 	.word	0x08008bb4
 8008794:	08008b74 	.word	0x08008b74
 8008798:	08008e3a 	.word	0x08008e3a
 800879c:	08008e44 	.word	0x08008e44
 80087a0:	08006591 	.word	0x08006591
 80087a4:	08008527 	.word	0x08008527
 80087a8:	08008e40 	.word	0x08008e40

080087ac <__swbuf_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	460e      	mov	r6, r1
 80087b0:	4614      	mov	r4, r2
 80087b2:	4605      	mov	r5, r0
 80087b4:	b118      	cbz	r0, 80087be <__swbuf_r+0x12>
 80087b6:	6983      	ldr	r3, [r0, #24]
 80087b8:	b90b      	cbnz	r3, 80087be <__swbuf_r+0x12>
 80087ba:	f7fd fce9 	bl	8006190 <__sinit>
 80087be:	4b21      	ldr	r3, [pc, #132]	; (8008844 <__swbuf_r+0x98>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d12b      	bne.n	800881c <__swbuf_r+0x70>
 80087c4:	686c      	ldr	r4, [r5, #4]
 80087c6:	69a3      	ldr	r3, [r4, #24]
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	071a      	lsls	r2, r3, #28
 80087ce:	d52f      	bpl.n	8008830 <__swbuf_r+0x84>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	b36b      	cbz	r3, 8008830 <__swbuf_r+0x84>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	1ac0      	subs	r0, r0, r3
 80087da:	6963      	ldr	r3, [r4, #20]
 80087dc:	b2f6      	uxtb	r6, r6
 80087de:	4283      	cmp	r3, r0
 80087e0:	4637      	mov	r7, r6
 80087e2:	dc04      	bgt.n	80087ee <__swbuf_r+0x42>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	f7ff f9e6 	bl	8007bb8 <_fflush_r>
 80087ec:	bb30      	cbnz	r0, 800883c <__swbuf_r+0x90>
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	60a3      	str	r3, [r4, #8]
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	701e      	strb	r6, [r3, #0]
 80087fc:	6963      	ldr	r3, [r4, #20]
 80087fe:	3001      	adds	r0, #1
 8008800:	4283      	cmp	r3, r0
 8008802:	d004      	beq.n	800880e <__swbuf_r+0x62>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	07db      	lsls	r3, r3, #31
 8008808:	d506      	bpl.n	8008818 <__swbuf_r+0x6c>
 800880a:	2e0a      	cmp	r6, #10
 800880c:	d104      	bne.n	8008818 <__swbuf_r+0x6c>
 800880e:	4621      	mov	r1, r4
 8008810:	4628      	mov	r0, r5
 8008812:	f7ff f9d1 	bl	8007bb8 <_fflush_r>
 8008816:	b988      	cbnz	r0, 800883c <__swbuf_r+0x90>
 8008818:	4638      	mov	r0, r7
 800881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <__swbuf_r+0x9c>)
 800881e:	429c      	cmp	r4, r3
 8008820:	d101      	bne.n	8008826 <__swbuf_r+0x7a>
 8008822:	68ac      	ldr	r4, [r5, #8]
 8008824:	e7cf      	b.n	80087c6 <__swbuf_r+0x1a>
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <__swbuf_r+0xa0>)
 8008828:	429c      	cmp	r4, r3
 800882a:	bf08      	it	eq
 800882c:	68ec      	ldreq	r4, [r5, #12]
 800882e:	e7ca      	b.n	80087c6 <__swbuf_r+0x1a>
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f81a 	bl	800886c <__swsetup_r>
 8008838:	2800      	cmp	r0, #0
 800883a:	d0cb      	beq.n	80087d4 <__swbuf_r+0x28>
 800883c:	f04f 37ff 	mov.w	r7, #4294967295
 8008840:	e7ea      	b.n	8008818 <__swbuf_r+0x6c>
 8008842:	bf00      	nop
 8008844:	08008b94 	.word	0x08008b94
 8008848:	08008bb4 	.word	0x08008bb4
 800884c:	08008b74 	.word	0x08008b74

08008850 <__ascii_wctomb>:
 8008850:	b149      	cbz	r1, 8008866 <__ascii_wctomb+0x16>
 8008852:	2aff      	cmp	r2, #255	; 0xff
 8008854:	bf85      	ittet	hi
 8008856:	238a      	movhi	r3, #138	; 0x8a
 8008858:	6003      	strhi	r3, [r0, #0]
 800885a:	700a      	strbls	r2, [r1, #0]
 800885c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008860:	bf98      	it	ls
 8008862:	2001      	movls	r0, #1
 8008864:	4770      	bx	lr
 8008866:	4608      	mov	r0, r1
 8008868:	4770      	bx	lr
	...

0800886c <__swsetup_r>:
 800886c:	4b32      	ldr	r3, [pc, #200]	; (8008938 <__swsetup_r+0xcc>)
 800886e:	b570      	push	{r4, r5, r6, lr}
 8008870:	681d      	ldr	r5, [r3, #0]
 8008872:	4606      	mov	r6, r0
 8008874:	460c      	mov	r4, r1
 8008876:	b125      	cbz	r5, 8008882 <__swsetup_r+0x16>
 8008878:	69ab      	ldr	r3, [r5, #24]
 800887a:	b913      	cbnz	r3, 8008882 <__swsetup_r+0x16>
 800887c:	4628      	mov	r0, r5
 800887e:	f7fd fc87 	bl	8006190 <__sinit>
 8008882:	4b2e      	ldr	r3, [pc, #184]	; (800893c <__swsetup_r+0xd0>)
 8008884:	429c      	cmp	r4, r3
 8008886:	d10f      	bne.n	80088a8 <__swsetup_r+0x3c>
 8008888:	686c      	ldr	r4, [r5, #4]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008890:	0719      	lsls	r1, r3, #28
 8008892:	d42c      	bmi.n	80088ee <__swsetup_r+0x82>
 8008894:	06dd      	lsls	r5, r3, #27
 8008896:	d411      	bmi.n	80088bc <__swsetup_r+0x50>
 8008898:	2309      	movs	r3, #9
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e03e      	b.n	8008926 <__swsetup_r+0xba>
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <__swsetup_r+0xd4>)
 80088aa:	429c      	cmp	r4, r3
 80088ac:	d101      	bne.n	80088b2 <__swsetup_r+0x46>
 80088ae:	68ac      	ldr	r4, [r5, #8]
 80088b0:	e7eb      	b.n	800888a <__swsetup_r+0x1e>
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <__swsetup_r+0xd8>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	bf08      	it	eq
 80088b8:	68ec      	ldreq	r4, [r5, #12]
 80088ba:	e7e6      	b.n	800888a <__swsetup_r+0x1e>
 80088bc:	0758      	lsls	r0, r3, #29
 80088be:	d512      	bpl.n	80088e6 <__swsetup_r+0x7a>
 80088c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c2:	b141      	cbz	r1, 80088d6 <__swsetup_r+0x6a>
 80088c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <__swsetup_r+0x66>
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff fd73 	bl	80083b8 <_free_r>
 80088d2:	2300      	movs	r3, #0
 80088d4:	6363      	str	r3, [r4, #52]	; 0x34
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	2300      	movs	r3, #0
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	b94b      	cbnz	r3, 8008906 <__swsetup_r+0x9a>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fc:	d003      	beq.n	8008906 <__swsetup_r+0x9a>
 80088fe:	4621      	mov	r1, r4
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f84d 	bl	80089a0 <__smakebuf_r>
 8008906:	89a0      	ldrh	r0, [r4, #12]
 8008908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800890c:	f010 0301 	ands.w	r3, r0, #1
 8008910:	d00a      	beq.n	8008928 <__swsetup_r+0xbc>
 8008912:	2300      	movs	r3, #0
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	6963      	ldr	r3, [r4, #20]
 8008918:	425b      	negs	r3, r3
 800891a:	61a3      	str	r3, [r4, #24]
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	b943      	cbnz	r3, 8008932 <__swsetup_r+0xc6>
 8008920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008924:	d1ba      	bne.n	800889c <__swsetup_r+0x30>
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	0781      	lsls	r1, r0, #30
 800892a:	bf58      	it	pl
 800892c:	6963      	ldrpl	r3, [r4, #20]
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	e7f4      	b.n	800891c <__swsetup_r+0xb0>
 8008932:	2000      	movs	r0, #0
 8008934:	e7f7      	b.n	8008926 <__swsetup_r+0xba>
 8008936:	bf00      	nop
 8008938:	20000010 	.word	0x20000010
 800893c:	08008b94 	.word	0x08008b94
 8008940:	08008bb4 	.word	0x08008bb4
 8008944:	08008b74 	.word	0x08008b74

08008948 <abort>:
 8008948:	b508      	push	{r3, lr}
 800894a:	2006      	movs	r0, #6
 800894c:	f000 f890 	bl	8008a70 <raise>
 8008950:	2001      	movs	r0, #1
 8008952:	f7f8 fc7f 	bl	8001254 <_exit>

08008956 <__swhatbuf_r>:
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	460e      	mov	r6, r1
 800895a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895e:	2900      	cmp	r1, #0
 8008960:	b096      	sub	sp, #88	; 0x58
 8008962:	4614      	mov	r4, r2
 8008964:	461d      	mov	r5, r3
 8008966:	da08      	bge.n	800897a <__swhatbuf_r+0x24>
 8008968:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	061a      	lsls	r2, r3, #24
 8008972:	d410      	bmi.n	8008996 <__swhatbuf_r+0x40>
 8008974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008978:	e00e      	b.n	8008998 <__swhatbuf_r+0x42>
 800897a:	466a      	mov	r2, sp
 800897c:	f000 f894 	bl	8008aa8 <_fstat_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	dbf1      	blt.n	8008968 <__swhatbuf_r+0x12>
 8008984:	9a01      	ldr	r2, [sp, #4]
 8008986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800898a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800898e:	425a      	negs	r2, r3
 8008990:	415a      	adcs	r2, r3
 8008992:	602a      	str	r2, [r5, #0]
 8008994:	e7ee      	b.n	8008974 <__swhatbuf_r+0x1e>
 8008996:	2340      	movs	r3, #64	; 0x40
 8008998:	2000      	movs	r0, #0
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	b016      	add	sp, #88	; 0x58
 800899e:	bd70      	pop	{r4, r5, r6, pc}

080089a0 <__smakebuf_r>:
 80089a0:	898b      	ldrh	r3, [r1, #12]
 80089a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089a4:	079d      	lsls	r5, r3, #30
 80089a6:	4606      	mov	r6, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	d507      	bpl.n	80089bc <__smakebuf_r+0x1c>
 80089ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	2301      	movs	r3, #1
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	b002      	add	sp, #8
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	ab01      	add	r3, sp, #4
 80089be:	466a      	mov	r2, sp
 80089c0:	f7ff ffc9 	bl	8008956 <__swhatbuf_r>
 80089c4:	9900      	ldr	r1, [sp, #0]
 80089c6:	4605      	mov	r5, r0
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7fd fcdd 	bl	8006388 <_malloc_r>
 80089ce:	b948      	cbnz	r0, 80089e4 <__smakebuf_r+0x44>
 80089d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d4ef      	bmi.n	80089b8 <__smakebuf_r+0x18>
 80089d8:	f023 0303 	bic.w	r3, r3, #3
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	e7e3      	b.n	80089ac <__smakebuf_r+0xc>
 80089e4:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <__smakebuf_r+0x7c>)
 80089e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	6020      	str	r0, [r4, #0]
 80089ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	6163      	str	r3, [r4, #20]
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	6120      	str	r0, [r4, #16]
 80089fa:	b15b      	cbz	r3, 8008a14 <__smakebuf_r+0x74>
 80089fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f863 	bl	8008acc <_isatty_r>
 8008a06:	b128      	cbz	r0, 8008a14 <__smakebuf_r+0x74>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	89a0      	ldrh	r0, [r4, #12]
 8008a16:	4305      	orrs	r5, r0
 8008a18:	81a5      	strh	r5, [r4, #12]
 8008a1a:	e7cd      	b.n	80089b8 <__smakebuf_r+0x18>
 8008a1c:	08006129 	.word	0x08006129

08008a20 <_raise_r>:
 8008a20:	291f      	cmp	r1, #31
 8008a22:	b538      	push	{r3, r4, r5, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	d904      	bls.n	8008a34 <_raise_r+0x14>
 8008a2a:	2316      	movs	r3, #22
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a36:	b112      	cbz	r2, 8008a3e <_raise_r+0x1e>
 8008a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a3c:	b94b      	cbnz	r3, 8008a52 <_raise_r+0x32>
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 f830 	bl	8008aa4 <_getpid_r>
 8008a44:	462a      	mov	r2, r5
 8008a46:	4601      	mov	r1, r0
 8008a48:	4620      	mov	r0, r4
 8008a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4e:	f000 b817 	b.w	8008a80 <_kill_r>
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d00a      	beq.n	8008a6c <_raise_r+0x4c>
 8008a56:	1c59      	adds	r1, r3, #1
 8008a58:	d103      	bne.n	8008a62 <_raise_r+0x42>
 8008a5a:	2316      	movs	r3, #22
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	2001      	movs	r0, #1
 8008a60:	e7e7      	b.n	8008a32 <_raise_r+0x12>
 8008a62:	2400      	movs	r4, #0
 8008a64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a68:	4628      	mov	r0, r5
 8008a6a:	4798      	blx	r3
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7e0      	b.n	8008a32 <_raise_r+0x12>

08008a70 <raise>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <raise+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f7ff bfd3 	b.w	8008a20 <_raise_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000010 	.word	0x20000010

08008a80 <_kill_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	; (8008aa0 <_kill_r+0x20>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f7f8 fbd1 	bl	8001234 <_kill>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_kill_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_kill_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2000440c 	.word	0x2000440c

08008aa4 <_getpid_r>:
 8008aa4:	f7f8 bbbe 	b.w	8001224 <_getpid>

08008aa8 <_fstat_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	; (8008ac8 <_fstat_r+0x20>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	f7f8 fc1c 	bl	80012f2 <_fstat>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	d102      	bne.n	8008ac4 <_fstat_r+0x1c>
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	b103      	cbz	r3, 8008ac4 <_fstat_r+0x1c>
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000440c 	.word	0x2000440c

08008acc <_isatty_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d06      	ldr	r5, [pc, #24]	; (8008ae8 <_isatty_r+0x1c>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f8 fc1b 	bl	8001312 <_isatty>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_isatty_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_isatty_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	2000440c 	.word	0x2000440c

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
